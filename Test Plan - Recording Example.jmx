<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan - Recording Example">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-250" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:35:21 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:35:11 GMT&quot;,&quot;timeSpent&quot;:&quot;10159&quot;,&quot;totalTimeSpent&quot;:&quot;126723&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">a3099575-3e1b-4a15-84c2-7975ab3f9e5a</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-251" enabled="true">
            <stringProp name="HTTPSampler.domain">u.clarity.ms</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/collect</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.44&quot;,13,97312,24222,&quot;d7w7q41v8m&quot;,&quot;1bw6kip&quot;,&quot;1sdv2kv&quot;,1,0,0],&quot;a&quot;:[[98519,2,12,2,204],[97312,4,0,1280,7771,1280,587,1484,0,0,0,96295,42136],[121534,0,2,1624,3,7,4,15,5,8,25,6],[121534,36,6,[99338,0,103467,0,109361,0,111398,3,115428,0,119511,0]]],&quot;p&quot;:[[109361,6,2370,245,2343,&quot;LI&quot;,&quot;id=ey-banner-li&quot;,&quot;class=ai-banner&quot;,&quot;style=width: 1280px;&quot;,2371,2370,&quot;DIV&quot;,&quot;class=main-banner&quot;,2372,2371,[11],&quot;class=container&quot;,2373,2372,[11],&quot;class=ai-left-info&quot;,2374,2372,2373,[11],&quot;class=ai-right-img&quot;,2375,2373,&quot;P&quot;,2376,2373,2375,[28],2377,2373,2376,[11],&quot;class=ai-process-home&quot;,2378,2373,2377,&quot;A&quot;,&quot;href=https://www.simplilearn.com/certifications/generative-ai-courses&quot;,&quot;class=btn&quot;,2379,2374,&quot;IMG&quot;,&quot;class=mob-banner gm-added&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-mobile2.webp&quot;,&quot;width=337&quot;,&quot;height=278&quot;,&quot;data-gumlet=false&quot;,&quot;data-gmlazy=false&quot;,&quot;fetchpriority=high&quot;,2380,2374,2379,[46],&quot;class=tab-banner gm-added&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-tab.webp&quot;,&quot;width=675&quot;,&quot;height=400&quot;,[51,52,53],2381,2374,2380,[46],&quot;class=web-banner gm-added&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-web.webp&quot;,&quot;width=1046&quot;,&quot;height=492&quot;,[51,52,53],2382,2375,&quot;*T&quot;,&quot;All our top programs include&quot;,2383,2376,&quot;SPAN&quot;,2384,2377,[78],2385,2377,2384,[28],2386,2378,[74],&quot;Explore Gen AI Programs&quot;,2387,2383,[74],&quot;Generative AI Components&quot;,2388,2384,[74],&quot;Be a leader in your field&quot;,2389,2385,[74],&quot;Change, Adapt and Build with AI&quot;,2390,245,2370,[5],&quot;class=home-bootcamp&quot;,&quot;id=home-banner-li&quot;,[8],2391,2390,[11],&quot;class=banner&quot;,[8],2392,2391,[11,16],2393,2392,[11],&quot;class=left-clm&quot;,2394,2392,2393,[11],&quot;class=right-clm&quot;,2395,2393,&quot;H1&quot;,2396,2393,2395,&quot;UL&quot;,2397,2393,2396,[41],&quot;href=#our-programs&quot;,[43],2398,2394,[41],&quot;href=&quot;,&quot;rel=noopener&quot;,&quot;class=play-anim&quot;,&quot;style=background-image:url(https://www.simplilearn.com/ice9/assets/1410243f-aea7-497b-9bd1-737a4a6a9e34.png)&quot;,2399,2395,[74],&quot; &quot;,2400,2395,2399,[74],&quot;World’s #▫ &quot;,2401,2395,2400,&quot;BR&quot;,2402,2395,2401,[74],&quot; Online Bootcamp&quot;,2403,2396,[5],2404,2396,2403,[5],2405,2396,2404,[5],2406,2397,[74],&quot;Explore Programs&quot;,2407,2403,&quot;B&quot;,2408,2403,2407,[74],&quot; careers advanced&quot;,2409,2404,[181],2410,2404,2409,[74],&quot; live classes every month&quot;,2411,2405,[181],2412,2405,2411,[74],&quot; report career benefits including promotion or a new job&quot;,2413,2407,[74],&quot;▫,▫▫▫,▫▫▫&quot;,2414,2409,[74],&quot;▫,▫▫▫&quot;,2415,2411,[74],&quot;▫▫%&quot;,2416,245,2390,[5],&quot;id=certification-banner-li&quot;,&quot;class=certification-banner ai-banner&quot;,&quot;style=background:linear-gradient(99deg, #0092D1 1.55%, #000 26.98%, #000506 29.29%, #00080B 64.42%, #0092D1 102.02%);&quot;,2417,2416,[11,12],2418,2417,[11,16],2419,2418,[11,20],2420,2418,2419,[11,25],2421,2419,&quot;H2&quot;,2422,2419,2421,&quot;H3&quot;,2423,2419,2422,[11,37],2424,2419,2423,[41,137,43],2425,2420,[46,47],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_mobile.png&quot;,[49,50,51,52,53],2426,2420,2425,[46,58],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_tablet.png&quot;,[60,61,51,52,53],2427,2420,2426,[46,67],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_desktop.png&quot;,[69,70,51,52,53],2428,2421,[74],&quot;Transform your Career with&quot;,2429,2422,[78],2430,2423,[132],2431,2424,[74,178],2432,2429,[74],&quot;▫▫▫+ In-demand Industry-Recognized Certifications&quot;,2433,2430,[5],2434,2430,2433,[5],2435,2433,[46],&quot;src=https://www.simplilearn.com/ice9/assets/banner-3-success-icon.svgz?w=720&amp;dpr=1.5&quot;,&quot;class=gm-lazy gm-added gm-loaded gm-observing gm-observing-cb&quot;,2436,2433,2435,[74,149],2437,2433,2436,[78],2438,2434,[46],&quot;src=https://www.simplilearn.com/ice9/assets/banner-3-group-icon.svgz?w=720&amp;dpr=1.5&quot;,[295],2439,2434,2438,[74,149],2440,2434,2439,[78],2441,2437,[74],&quot; ▫▪▪+ Successful Learners&quot;,2442,2440,[74],&quot;  ▫▫▫▫+ Guaranteed to run sessions every month&quot;],[111401,6,2297,&quot;LI&quot;,2317,[3],2343,[3]]]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-252" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:35:30 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:35:21 GMT&quot;,&quot;timeSpent&quot;:&quot;9248&quot;,&quot;totalTimeSpent&quot;:&quot;135971&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">a3099575-3e1b-4a15-84c2-7975ab3f9e5a</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-254" enabled="true">
            <stringProp name="HTTPSampler.domain">u.clarity.ms</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/collect</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.44&quot;,14,121534,16050,&quot;d7w7q41v8m&quot;,&quot;1bw6kip&quot;,&quot;1sdv2kv&quot;,1,0,0],&quot;a&quot;:[[133213,2,13,2,204],[136693,28,&quot;visible&quot;],[121534,4,0,1280,7771,1280,587,1484,0,0,0,111401,42136],[137584,0,2,1615,3,9,4,15,5,6,25,7,28,7594],[137584,36,6,[124567,0,126596,4,129685,0,133828,0]]],&quot;p&quot;:[[124567,6,2443,245,2416,&quot;LI&quot;,&quot;id=ey-banner-li&quot;,&quot;class=ai-banner&quot;,&quot;style=width: 1280px;&quot;,2444,2443,&quot;DIV&quot;,&quot;class=main-banner&quot;,2445,2444,[11],&quot;class=container&quot;,2446,2445,[11],&quot;class=ai-left-info&quot;,2447,2445,2446,[11],&quot;class=ai-right-img&quot;,2448,2446,&quot;P&quot;,2449,2446,2448,[28],2450,2446,2449,[11],&quot;class=ai-process-home&quot;,2451,2446,2450,&quot;A&quot;,&quot;href=https://www.simplilearn.com/certifications/generative-ai-courses&quot;,&quot;class=btn&quot;,2452,2447,&quot;IMG&quot;,&quot;class=mob-banner gm-added&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-mobile2.webp&quot;,&quot;width=337&quot;,&quot;height=278&quot;,&quot;data-gumlet=false&quot;,&quot;data-gmlazy=false&quot;,&quot;fetchpriority=high&quot;,2453,2447,2452,[46],&quot;class=tab-banner gm-added&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-tab.webp&quot;,&quot;width=675&quot;,&quot;height=400&quot;,[51,52,53],2454,2447,2453,[46],&quot;class=web-banner gm-added&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-web.webp&quot;,&quot;width=1046&quot;,&quot;height=492&quot;,[51,52,53],2455,2448,&quot;*T&quot;,&quot;All our top programs include&quot;,2456,2449,&quot;SPAN&quot;,2457,2450,[78],2458,2450,2457,[28],2459,2451,[74],&quot;Explore Gen AI Programs&quot;,2460,2456,[74],&quot;Generative AI Components&quot;,2461,2457,[74],&quot;Be a leader in your field&quot;,2462,2458,[74],&quot;Change, Adapt and Build with AI&quot;,2463,245,2443,[5],&quot;class=home-bootcamp&quot;,&quot;id=home-banner-li&quot;,[8],2464,2463,[11],&quot;class=banner&quot;,[8],2465,2464,[11,16],2466,2465,[11],&quot;class=left-clm&quot;,2467,2465,2466,[11],&quot;class=right-clm&quot;,2468,2466,&quot;H1&quot;,2469,2466,2468,&quot;UL&quot;,2470,2466,2469,[41],&quot;href=#our-programs&quot;,[43],2471,2467,[41],&quot;href=&quot;,&quot;rel=noopener&quot;,&quot;class=play-anim&quot;,&quot;style=background-image:url(https://www.simplilearn.com/ice9/assets/1410243f-aea7-497b-9bd1-737a4a6a9e34.png)&quot;,2472,2468,[74],&quot; &quot;,2473,2468,2472,[74],&quot;World’s #▫ &quot;,2474,2468,2473,&quot;BR&quot;,2475,2468,2474,[74],&quot; Online Bootcamp&quot;,2476,2469,[5],2477,2469,2476,[5],2478,2469,2477,[5],2479,2470,[74],&quot;Explore Programs&quot;,2480,2476,&quot;B&quot;,2481,2476,2480,[74],&quot; careers advanced&quot;,2482,2477,[181],2483,2477,2482,[74],&quot; live classes every month&quot;,2484,2478,[181],2485,2478,2484,[74],&quot; report career benefits including promotion or a new job&quot;,2486,2480,[74],&quot;▫,▫▫▫,▫▫▫&quot;,2487,2482,[74],&quot;▫,▫▫▫&quot;,2488,2484,[74],&quot;▫▫%&quot;,2489,245,2463,[5],&quot;id=certification-banner-li&quot;,&quot;class=certification-banner ai-banner&quot;,&quot;style=background:linear-gradient(99deg, #0092D1 1.55%, #000 26.98%, #000506 29.29%, #00080B 64.42%, #0092D1 102.02%);&quot;,2490,2489,[11,12],2491,2490,[11,16],2492,2491,[11,20],2493,2491,2492,[11,25],2494,2492,&quot;H2&quot;,2495,2492,2494,&quot;H3&quot;,2496,2492,2495,[11,37],2497,2492,2496,[41,137,43],2498,2493,[46,47],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_mobile.png&quot;,[49,50,51,52,53],2499,2493,2498,[46,58],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_tablet.png&quot;,[60,61,51,52,53],2500,2493,2499,[46,67],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_desktop.png&quot;,[69,70,51,52,53],2501,2494,[74],&quot;Transform your Career with&quot;,2502,2495,[78],2503,2496,[132],2504,2497,[74,178],2505,2502,[74],&quot;▫▫▫+ In-demand Industry-Recognized Certifications&quot;,2506,2503,[5],2507,2503,2506,[5],2508,2506,[46],&quot;src=https://www.simplilearn.com/ice9/assets/banner-3-success-icon.svgz?w=720&amp;dpr=1.5&quot;,&quot;class=gm-lazy gm-added gm-loaded gm-observing gm-observing-cb&quot;,2509,2506,2508,[74,149],2510,2506,2509,[78],2511,2507,[46],&quot;src=https://www.simplilearn.com/ice9/assets/banner-3-group-icon.svgz?w=720&amp;dpr=1.5&quot;,[295],2512,2507,2511,[74,149],2513,2507,2512,[78],2514,2510,[74],&quot; ▫▪▪+ Successful Learners&quot;,2515,2513,[74],&quot;  ▫▫▫▫+ Guaranteed to run sessions every month&quot;],[126600,6,2370,&quot;LI&quot;,2390,[3],2416,[3]]]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/g/collect?v=2&amp;tid=G-CG9EYRX7VL&amp;gtm=45je48e0v883248642za200&amp;_p=1723995186843&amp;_gaz=1&amp;gcs=G111&amp;gcd=13t3t3l3l5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;cid=703217028.1723993832&amp;ul=en-us&amp;sr=1280x720&amp;frm=0&amp;pscdl=noapi&amp;_s=3&amp;sid=1723993831&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.simplilearn.com%2F&amp;dt=Simplilearn%20%7C%20Online%20Courses%20-%20Bootcamp%20%26%20Certification%20Platform&amp;uid=undefined&amp;en=mega_menu_new_display&amp;_ee=1&amp;epn.site_speed_sample_rate=20&amp;ep.transport_type=beacon&amp;ep.event_label=on%20mega%20menu%20display&amp;ep.section=Header&amp;ep.segment=mega_menu_new&amp;ep.label=Mega_menuV2&amp;ep.page_type=home-new&amp;ep.country=IN&amp;_et=3622&amp;tfd=152590-255" enabled="true">
            <stringProp name="HTTPSampler.domain">analytics.google.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/g/collect?v=2&amp;tid=G-CG9EYRX7VL&amp;gtm=45je48e0v883248642za200&amp;_p=1723995186843&amp;_gaz=1&amp;gcs=G111&amp;gcd=13t3t3l3l5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;cid=703217028.1723993832&amp;ul=en-us&amp;sr=1280x720&amp;frm=0&amp;pscdl=noapi&amp;_s=3&amp;sid=1723993831&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.simplilearn.com%2F&amp;dt=Simplilearn%20%7C%20Online%20Courses%20-%20Bootcamp%20%26%20Certification%20Platform&amp;uid=undefined&amp;en=mega_menu_new_display&amp;_ee=1&amp;epn.site_speed_sample_rate=20&amp;ep.transport_type=beacon&amp;ep.event_label=on%20mega%20menu%20display&amp;ep.section=Header&amp;ep.segment=mega_menu_new&amp;ep.label=Mega_menuV2&amp;ep.page_type=home-new&amp;ep.country=IN&amp;_et=3622&amp;tfd=152590</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=4</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ads/ga-audiences-256" enabled="true">
            <stringProp name="HTTPSampler.domain">www.google.co.in</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/ads/ga-audiences</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">sr</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="slf_rd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">slf_rd</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_r</stringProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tid</stringProp>
                  <stringProp name="Argument.value">G-CG9EYRX7VL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">703217028.1723993832</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gtm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gtm</stringProp>
                  <stringProp name="Argument.value">45je48e0v883248642za200</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="aip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aip</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dma" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dma</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gcs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcs</stringProp>
                  <stringProp name="Argument.value">G111</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gcd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcd</stringProp>
                  <stringProp name="Argument.value">13t3t3l3l5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="npa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">npa</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="frm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">frm</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tag_exp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tag_exp</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="z" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">z</stringProp>
                  <stringProp name="Argument.value">654514542</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=5, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/l4.jpg-257" enabled="true">
            <stringProp name="HTTPSampler.domain">c.webengage.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/l4.jpg</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;data&quot;:&quot;NobwRAxghgLgpgcwPYCcCeYBcYoAdcA2AltDEUgHZgA0YcAbnBTAPoVQC2cWYAzgWyj0WXBFBFMAriwAmRXoSgZaDJqxmwoWcLzgQylHqKgACLhUk0+A3fvJVsAWUTjzkgGoAmK/xaTdKCwwaLjc2ABGnhA+AqrMQURcWACMAOyeAMwAnFkArBkZqQAcRam0vpIwHCy8KNHYAOIAgskAdG2pAAwZnmmdnkXt6dlZGUU9rZUcELUAvAAUcih6MACUAD5TEBAUC0srG1scMgsUlHAb/GRcs2mZOWMALBnrAGZEKLysr3CwksuzYwSCxsOAAdxYAAskIxAhAkBwOJR1gQoF8WD8/gCgW5QRDobCWPDEci4AAPXCzToxFi4KAIOBBEJhMDQrgAWgo4KscVY7CS2AAqgETAS4J8TDDxSZnGI3CYoBQZDKXPKkKEKLwwABfcpoL5waoaGBaTDgMFwcJMMQMliw3j2HgANla1No1zgAC9zikskVOp1aPR5EQYKgaiaUKwPTwAH4wTz9R7szpFdnJIoAFWSuUwyWSmFynnaWSdAC0rMGHWHAqj0bpeA7KAkBWB44nPMnU+mszm8wWiyWshXynBG/YiUhJMwUu6kCaBHTbcHwZPpzAsI9aMsfihligeJWQzWamOmxQI1Aoy2We2kym0xns7n84Xi8ksqkR2Al4yVxD4XXU9x0MTAtx/elGTIGACBZABlRJCCIWCrwoEx1hMAB5ChiC5EwAGEp0+McTHZEwACEkHnaAOFwEwADICPFMh3lIewTAABVRGBXlQDgrF/PwUAIHhIRgGBcF4TAAHppLBeTWgdWjiBQlAKFaYlpKPcFcFQVhITgIgEDErBclKIMiB0vSWDBIgZBgSEUgGQM+BkABrFg7NnMBYSwTxaFRJUiAoBBaUg0TxMkmS5IUpSkNU9TNJ8CBliYQRW38cUAEkKF4qxAOYdAeByuQtG3RBHWwABpVDNDcsrIFDDBsHI60oAIf5LF1MBiAgJhdEnGQWQyfMIFyJ1Hm8cpJC8vNhgeLJkl6T8ApmmQeFKZJXleKJHigEo9DGmRcigTpUlSCB0lePrOigZIZDSR44E8V5xmSKwyRYZYAEdJDHVhZrATbtt2/aikO3JjtO87Lpem67oe1Inpet72RG5Ixomzx03mvICn9RMUx1ABdIAAAA==&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/-258" enabled="true">
            <stringProp name="HTTPSampler.domain">www.simplilearn.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=0, i</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ice9/labels/iitkanpur_Home(1).svg-259" enabled="true">
            <stringProp name="HTTPSampler.domain">www.simplilearn.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/ice9/labels/iitkanpur_Home(1).svg</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=5, i</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/resources/api/v1/getMenuRevampData-261" enabled="true">
            <stringProp name="HTTPSampler.domain">www.simplilearn.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/resources/api/v1/getMenuRevampData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="countryId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">countryId</stringProp>
                  <stringProp name="Argument.value">6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="clusterId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clusterId</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="megaMenuVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">megaMenuVersion</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/resources/api/v1/getMenuRevampData-260" enabled="true">
            <stringProp name="HTTPSampler.domain">www.simplilearn.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/resources/api/v1/getMenuRevampData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="countryId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">countryId</stringProp>
                  <stringProp name="Argument.value">6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="clusterId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clusterId</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-265" enabled="true">
            <stringProp name="HTTPSampler.domain">u.clarity.ms</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/collect</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.44&quot;,15,137584,6138,&quot;d7w7q41v8m&quot;,&quot;1bw6kip&quot;,&quot;1sdv2kv&quot;,1,1,1],&quot;a&quot;:[[138697,2,14,2,204],[139643,12,2527,870,513],[139855,12,2527,865,497],[139871,12,2527,853,472],[139885,12,2527,830,433],[139901,12,2527,799,384],[139918,12,2530,754,321],[139933,12,2522,679,228],[139948,12,2521,649,200],[139965,12,2527,609,163],[139980,12,2527,563,129],[141824,12,2527,707,160],[141840,12,2527,573,131],[141855,12,2527,447,100],[141871,12,413,343,68],[141918,12,136,225,34],[141933,12,136,220,31],[141948,12,136,216,27],[141964,12,136,214,24],[141980,12,136,209,20],[141996,12,136,205,15],[142011,12,136,198,10],[142027,12,136,189,5],[142043,12,136,184,1],[142058,12,136,183,0],[143717,26,&quot;pagehide&quot;],[137584,4,1,1280,7771,1280,587,1484,0,0,0,126600,42136],[143722,0,2,1610,3,29,4,49,5,31,25,33],[143722,36,6,[137833,16,138142,2,138256,0,139674,0,139860,85,139961,32,141843,100,141959,100,142069,0]]],&quot;p&quot;:[[137833,6,2516,245,2489,&quot;LI&quot;,&quot;id=ey-banner-li&quot;,&quot;class=ai-banner&quot;,&quot;style=width: 1280px;&quot;,2517,2516,&quot;DIV&quot;,&quot;class=main-banner&quot;,2518,2517,[11],&quot;class=container&quot;,2519,2518,[11],&quot;class=ai-left-info&quot;,2520,2518,2519,[11],&quot;class=ai-right-img&quot;,2521,2519,&quot;P&quot;,2522,2519,2521,[28],2523,2519,2522,[11],&quot;class=ai-process-home&quot;,2524,2519,2523,&quot;A&quot;,&quot;href=https://www.simplilearn.com/certifications/generative-ai-courses&quot;,&quot;class=btn&quot;,2525,2520,&quot;IMG&quot;,&quot;class=mob-banner gm-added&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-mobile2.webp&quot;,&quot;width=337&quot;,&quot;height=278&quot;,&quot;data-gumlet=false&quot;,&quot;data-gmlazy=false&quot;,&quot;fetchpriority=high&quot;,2526,2520,2525,[46],&quot;class=tab-banner gm-added&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-tab.webp&quot;,&quot;width=675&quot;,&quot;height=400&quot;,[51,52,53],2527,2520,2526,[46],&quot;class=web-banner gm-added&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-web.webp&quot;,&quot;width=1046&quot;,&quot;height=492&quot;,[51,52,53],2528,2521,&quot;*T&quot;,&quot;All our top programs include&quot;,2529,2522,&quot;SPAN&quot;,2530,2523,[78],2531,2523,2530,[28],2532,2524,[74],&quot;Explore Gen AI Programs&quot;,2533,2529,[74],&quot;Generative AI Components&quot;,2534,2530,[74],&quot;Be a leader in your field&quot;,2535,2531,[74],&quot;Change, Adapt and Build with AI&quot;,2536,245,2516,[5],&quot;class=home-bootcamp&quot;,&quot;id=home-banner-li&quot;,[8],2537,2536,[11],&quot;class=banner&quot;,[8],2538,2537,[11,16],2539,2538,[11],&quot;class=left-clm&quot;,2540,2538,2539,[11],&quot;class=right-clm&quot;,2541,2539,&quot;H1&quot;,2542,2539,2541,&quot;UL&quot;,2543,2539,2542,[41],&quot;href=#our-programs&quot;,[43],2544,2540,[41],&quot;href=&quot;,&quot;rel=noopener&quot;,&quot;class=play-anim&quot;,&quot;style=background-image:url(https://www.simplilearn.com/ice9/assets/1410243f-aea7-497b-9bd1-737a4a6a9e34.png)&quot;,2545,2541,[74],&quot; &quot;,2546,2541,2545,[74],&quot;World’s #▫ &quot;,2547,2541,2546,&quot;BR&quot;,2548,2541,2547,[74],&quot; Online Bootcamp&quot;,2549,2542,[5],2550,2542,2549,[5],2551,2542,2550,[5],2552,2543,[74],&quot;Explore Programs&quot;,2553,2549,&quot;B&quot;,2554,2549,2553,[74],&quot; careers advanced&quot;,2555,2550,[181],2556,2550,2555,[74],&quot; live classes every month&quot;,2557,2551,[181],2558,2551,2557,[74],&quot; report career benefits including promotion or a new job&quot;,2559,2553,[74],&quot;▫,▫▫▫,▫▫▫&quot;,2560,2555,[74],&quot;▫,▫▫▫&quot;,2561,2557,[74],&quot;▫▫%&quot;,2562,245,2536,[5],&quot;id=certification-banner-li&quot;,&quot;class=certification-banner ai-banner&quot;,&quot;style=background:linear-gradient(99deg, #0092D1 1.55%, #000 26.98%, #000506 29.29%, #00080B 64.42%, #0092D1 102.02%);&quot;,2563,2562,[11,12],2564,2563,[11,16],2565,2564,[11,20],2566,2564,2565,[11,25],2567,2565,&quot;H2&quot;,2568,2565,2567,&quot;H3&quot;,2569,2565,2568,[11,37],2570,2565,2569,[41,137,43],2571,2566,[46,47],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_mobile.png&quot;,[49,50,51,52,53],2572,2566,2571,[46,58],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_tablet.png&quot;,[60,61,51,52,53],2573,2566,2572,[46,67],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_desktop.png&quot;,[69,70,51,52,53],2574,2567,[74],&quot;Transform your Career with&quot;,2575,2568,[78],2576,2569,[132],2577,2570,[74,178],2578,2575,[74],&quot;▫▫▫+ In-demand Industry-Recognized Certifications&quot;,2579,2576,[5],2580,2576,2579,[5],2581,2579,[46],&quot;src=https://www.simplilearn.com/ice9/assets/banner-3-success-icon.svgz?w=720&amp;dpr=1.5&quot;,&quot;class=gm-lazy gm-added gm-loaded gm-observing gm-observing-cb&quot;,2582,2579,2581,[74,149],2583,2579,2582,[78],2584,2580,[46],&quot;src=https://www.simplilearn.com/ice9/assets/banner-3-group-icon.svgz?w=720&amp;dpr=1.5&quot;,[295],2585,2580,2584,[74,149],2586,2580,2585,[78],2587,2583,[74],&quot; ▫▪▪+ Successful Learners&quot;,2588,2586,[74],&quot;  ▫▫▫▫+ Guaranteed to run sessions every month&quot;],[138256,6,2443,&quot;LI&quot;,2463,[3],2489,[3]],[141916,6,121,115,120,&quot;DIV&quot;,&quot;id=MegaMenuLatest&quot;,&quot;class=&quot;],[141935,6,121,115,120,&quot;DIV&quot;,&quot;id=MegaMenuLatest&quot;,&quot;class=hide&quot;]]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ice9/accreditation_icons/IIT-K1.svgz-267" enabled="true">
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            <stringProp name="HTTPSampler.domain">simplilearn.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/ice9/accreditation_icons/IIT-K1.svgz</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/g/collect?v=2&amp;tid=G-CG9EYRX7VL&amp;gtm=45je48e0v883248642za200&amp;_p=1723995339722&amp;gcd=13l3l3l3l1&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;cid=703217028.1723993832&amp;ul=en-us&amp;sr=1280x720&amp;frm=0&amp;pscdl=noapi&amp;_s=1&amp;sid=1723993831&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.simplilearn.com%2F&amp;dt=Simplilearn%20%7C%20Online%20Courses%20-%20Bootcamp%20%26%20Certification%20Platform&amp;en=page_view&amp;_ee=1&amp;epn.site_speed_sample_rate=20&amp;ep.transport_type=beacon&amp;tfd=2646-268" enabled="true">
            <stringProp name="HTTPSampler.domain">analytics.google.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/g/collect?v=2&amp;tid=G-CG9EYRX7VL&amp;gtm=45je48e0v883248642za200&amp;_p=1723995339722&amp;gcd=13l3l3l3l1&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;cid=703217028.1723993832&amp;ul=en-us&amp;sr=1280x720&amp;frm=0&amp;pscdl=noapi&amp;_s=1&amp;sid=1723993831&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.simplilearn.com%2F&amp;dt=Simplilearn%20%7C%20Online%20Courses%20-%20Bootcamp%20%26%20Certification%20Platform&amp;en=page_view&amp;_ee=1&amp;epn.site_speed_sample_rate=20&amp;ep.transport_type=beacon&amp;tfd=2646</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=4</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/actionp/0?ti=4002550&amp;Ver=2&amp;mid=97d57870-032a-470b-9162-5d8c00261046&amp;sid=1f5684705d7411efab59ebca8046ca7b&amp;vid=1f56ae505d7411ef92d96d6b06bdce59&amp;vids=0&amp;msclkid=N&amp;evt=pageHide-263" enabled="true">
            <stringProp name="HTTPSampler.domain">bat.bing.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/actionp/0?ti=4002550&amp;Ver=2&amp;mid=97d57870-032a-470b-9162-5d8c00261046&amp;sid=1f5684705d7411efab59ebca8046ca7b&amp;vid=1f56ae505d7411ef92d96d6b06bdce59&amp;vids=0&amp;msclkid=N&amp;evt=pageHide</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/jserrors/1/0d4c245767?a=351379365&amp;sa=1&amp;v=1208.49599aa&amp;t=Unnamed%20Transaction&amp;rst=154411&amp;ck=1&amp;ref=https://www.simplilearn.com/-264" enabled="true">
            <stringProp name="HTTPSampler.domain">bam.nr-data.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/jserrors/1/0d4c245767?a=351379365&amp;sa=1&amp;v=1208.49599aa&amp;t=Unnamed%20Transaction&amp;rst=154411&amp;ck=1&amp;ref=https://www.simplilearn.com/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;xhr&quot;:[{&quot;params&quot;:{&quot;method&quot;:&quot;POST&quot;,&quot;host&quot;:&quot;bam.nr-data.net:443&quot;,&quot;pathname&quot;:&quot;/jserrors/1/0d4c245767&quot;,&quot;status&quot;:0},&quot;metrics&quot;:{&quot;count&quot;:1,&quot;txSize&quot;:{&quot;t&quot;:1155},&quot;duration&quot;:{&quot;t&quot;:4085},&quot;cbTime&quot;:{&quot;t&quot;:0},&quot;time&quot;:{&quot;t&quot;:124110}}},{&quot;params&quot;:{&quot;method&quot;:&quot;POST&quot;,&quot;host&quot;:&quot;u.clarity.ms:443&quot;,&quot;pathname&quot;:&quot;/collect&quot;,&quot;status&quot;:0},&quot;metrics&quot;:{&quot;count&quot;:2,&quot;txSize&quot;:{&quot;t&quot;:31825,&quot;min&quot;:15903,&quot;max&quot;:15922,&quot;sos&quot;:506415493,&quot;c&quot;:2},&quot;duration&quot;:{&quot;t&quot;:4093,&quot;min&quot;:12,&quot;max&quot;:4081,&quot;sos&quot;:16654705,&quot;c&quot;:2},&quot;cbTime&quot;:{&quot;t&quot;:0,&quot;min&quot;:0,&quot;max&quot;:0,&quot;sos&quot;:0,&quot;c&quot;:2},&quot;time&quot;:{&quot;t&quot;:280505,&quot;min&quot;:132228,&quot;max&quot;:148277,&quot;sos&quot;:39470312713,&quot;c&quot;:2}}},{&quot;params&quot;:{&quot;method&quot;:&quot;POST&quot;,&quot;host&quot;:&quot;u.clarity.ms:443&quot;,&quot;pathname&quot;:&quot;/collect&quot;,&quot;status&quot;:204},&quot;metrics&quot;:{&quot;count&quot;:2,&quot;txSize&quot;:{&quot;t&quot;:7549,&quot;min&quot;:3766,&quot;max&quot;:3783,&quot;sos&quot;:28493845,&quot;c&quot;:2},&quot;duration&quot;:{&quot;t&quot;:8699,&quot;min&quot;:1102,&quot;max&quot;:7597,&quot;sos&quot;:58928813,&quot;c&quot;:2},&quot;cbTime&quot;:{&quot;t&quot;:0,&quot;min&quot;:0,&quot;max&quot;:0,&quot;sos&quot;:0,&quot;c&quot;:2},&quot;time&quot;:{&quot;t&quot;:284597,&quot;min&quot;:136309,&quot;max&quot;:148288,&quot;sos&quot;:40569474425,&quot;c&quot;:2}}}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/events/1/0d4c245767?a=351379365&amp;sa=1&amp;v=1208.49599aa&amp;t=Unnamed%20Transaction&amp;rst=154410&amp;ck=1&amp;ref=https://www.simplilearn.com/-262" enabled="true">
            <stringProp name="HTTPSampler.domain">bam.nr-data.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/events/1/0d4c245767?a=351379365&amp;sa=1&amp;v=1208.49599aa&amp;t=Unnamed%20Transaction&amp;rst=154410&amp;ck=1&amp;ref=https://www.simplilearn.com/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">bel.6;e,&apos;unload,3b55,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/1/0d4c245767-266" enabled="true">
            <stringProp name="HTTPSampler.domain">bam.nr-data.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/1/0d4c245767</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">a</stringProp>
                  <stringProp name="Argument.value">351379365</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sa</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1208.49599aa</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">Unnamed Transaction</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rst" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rst</stringProp>
                  <stringProp name="Argument.value">1472</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ck" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ck</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ref" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ref</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="be" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">be</stringProp>
                  <stringProp name="Argument.value">881</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fe</stringProp>
                  <stringProp name="Argument.value">1123</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dc</stringProp>
                  <stringProp name="Argument.value">1100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="af" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">af</stringProp>
                  <stringProp name="Argument.value">err,xhr,stn,ins</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="perf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">perf</stringProp>
                  <stringProp name="Argument.value">{&quot;timing&quot;:{&quot;of&quot;:1723995338846,&quot;n&quot;:0,&quot;u&quot;:849,&quot;ue&quot;:857,&quot;f&quot;:1,&quot;dn&quot;:40,&quot;dne&quot;:40,&quot;c&quot;:40,&quot;s&quot;:40,&quot;ce&quot;:40,&quot;rq&quot;:41,&quot;rp&quot;:42,&quot;rpe&quot;:841,&quot;dl&quot;:849,&quot;di&quot;:955,&quot;ds&quot;:1099,&quot;de&quot;:1100,&quot;dc&quot;:1103,&quot;l&quot;:1103,&quot;le&quot;:1124},&quot;navigation&quot;:{&quot;ty&quot;:1}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fcp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fcp</stringProp>
                  <stringProp name="Argument.value">974</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="jsonp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">jsonp</stringProp>
                  <stringProp name="Argument.value">NREUM.setToken</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ice9/assets/new-search-white-icon.svgz-269" enabled="true">
            <stringProp name="HTTPSampler.domain">www.simplilearn.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/ice9/assets/new-search-white-icon.svgz</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=4, i</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/g/collect?v=2&amp;tid=G-CG9EYRX7VL&amp;gtm=45je48e0v883248642za200&amp;_p=1723995339722&amp;gcs=G111&amp;gcd=13t3t3l3l5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;cid=703217028.1723993832&amp;ul=en-us&amp;sr=1280x720&amp;frm=0&amp;pscdl=noapi&amp;_s=2&amp;sid=1723993831&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.simplilearn.com%2F&amp;dt=Simplilearn%20%7C%20Online%20Courses%20-%20Bootcamp%20%26%20Certification%20Platform&amp;uid=undefined&amp;en=mega_menu_new_display&amp;_ee=1&amp;epn.site_speed_sample_rate=20&amp;ep.transport_type=beacon&amp;ep.event_label=on%20mega%20menu%20display&amp;ep.section=Header&amp;ep.segment=mega_menu_new&amp;ep.label=Mega_menuV2&amp;ep.page_type=home-new&amp;ep.country=IN&amp;_et=1522&amp;tfd=8240-270" enabled="true">
            <stringProp name="HTTPSampler.domain">analytics.google.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/g/collect?v=2&amp;tid=G-CG9EYRX7VL&amp;gtm=45je48e0v883248642za200&amp;_p=1723995339722&amp;gcs=G111&amp;gcd=13t3t3l3l5&amp;npa=0&amp;dma=0&amp;tag_exp=0&amp;cid=703217028.1723993832&amp;ul=en-us&amp;sr=1280x720&amp;frm=0&amp;pscdl=noapi&amp;_s=2&amp;sid=1723993831&amp;sct=1&amp;seg=1&amp;dl=https%3A%2F%2Fwww.simplilearn.com%2F&amp;dt=Simplilearn%20%7C%20Online%20Courses%20-%20Bootcamp%20%26%20Certification%20Platform&amp;uid=undefined&amp;en=mega_menu_new_display&amp;_ee=1&amp;epn.site_speed_sample_rate=20&amp;ep.transport_type=beacon&amp;ep.event_label=on%20mega%20menu%20display&amp;ep.section=Header&amp;ep.segment=mega_menu_new&amp;ep.label=Mega_menuV2&amp;ep.page_type=home-new&amp;ep.country=IN&amp;_et=1522&amp;tfd=8240</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=4</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/newconf/a6ac3e6e-c86b-4536-aedd-105a3df85b16/-271" enabled="true">
            <stringProp name="HTTPSampler.domain">cdn-jp.gsecondscreen.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/newconf/a6ac3e6e-c86b-4536-aedd-105a3df85b16/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="callback" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">callback</stringProp>
                  <stringProp name="Argument.value">_ta_on_conf</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_</stringProp>
                  <stringProp name="Argument.value">1723995347125</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/conf/a6ac3e6e-c86b-4536-aedd-105a3df85b16/-272" enabled="true">
            <stringProp name="HTTPSampler.domain">cdn-jp.gsecondscreen.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/conf/a6ac3e6e-c86b-4536-aedd-105a3df85b16/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="callback" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">callback</stringProp>
                  <stringProp name="Argument.value">_ss_on_ajax_conf</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_</stringProp>
                  <stringProp name="Argument.value">1723995347426</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ajax/libs/jquery/3.3.1/jquery.min.js-273" enabled="true">
            <stringProp name="HTTPSampler.domain">ajax.googleapis.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/ajax/libs/jquery/3.3.1/jquery.min.js</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_</stringProp>
                  <stringProp name="Argument.value">1723995347424</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/canonical.html-276" enabled="true">
            <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/canonical.html</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-278" enabled="true">
            <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/success.txt</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ipv6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ipv6</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=4</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-277" enabled="true">
            <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/success.txt</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ipv4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ipv4</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=4</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/mev/-275" enabled="true">
            <stringProp name="HTTPSampler.domain">evbk6-uk.gsecondscreen.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/mev/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">c</stringProp>
                  <stringProp name="Argument.value">a6ac3e6e-c86b-4536-aedd-105a3df85b16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">3fxTBkvkR*M7k5MD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="s" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">s</stringProp>
                  <stringProp name="Argument.value">4pr1ux6r07s</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">3rn</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="z" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">z</stringProp>
                  <stringProp name="Argument.value">17239953477118113</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="data" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">data</stringProp>
                  <stringProp name="Argument.value">WyJ2aXNpdGVkIHBhZ2UiLHsidGl0bGUiOiJTaW1wbGlsZWFybiB8IE9ubGluZSBDb3Vyc2VzIC0gQm9vdGNhbXAgJiBDZXJ0aWZpY2F0aW9uIFBsYXRmb3JtIiwidXJsIjoiLyIsImZyb21fcGFnZSI6Iihub25lKSIsImZyb21fbW9iaWxlIjpmYWxzZSwiYmFzZV9PUyI6IldpbmRvd3MiLCJiYXNlX2Jyb3dzZXIiOiJGaXJlZm94IiwiSVAiOiIxNTIuNTguMjQyLjE4NCIsImxvY2F0aW9uIjoiQmVuZ2FsdXJ1IC0gS2FybmF0YWthLCBJbmRpYSIsImRvbWFpbiI6Ind3dy5zaW1wbGlsZWFybi5jb20ifV0=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=5, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/pagead/landing?gcs=G111&amp;gcd=13t3t3l3l5&amp;tag_exp=0&amp;rnd=1697859738.1723995349&amp;url=https%3A%2F%2Fwww.simplilearn.com%2F&amp;dma=0&amp;npa=0&amp;gtm=45He48e0n71WTL3CFv6481802za200&amp;auid=1886465050.1723993851-279" enabled="true">
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            <stringProp name="HTTPSampler.domain">www.google.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pagead/landing?gcs=G111&amp;gcd=13t3t3l3l5&amp;tag_exp=0&amp;rnd=1697859738.1723995349&amp;url=https%3A%2F%2Fwww.simplilearn.com%2F&amp;dma=0&amp;npa=0&amp;gtm=45He48e0n71WTL3CFv6481802za200&amp;auid=1886465050.1723993851</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/-286" enabled="true">
            <stringProp name="HTTPSampler.domain">ipv6.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/-285" enabled="true">
            <stringProp name="HTTPSampler.domain">c.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/pagead/viewthroughconversion/1003447763/-284" enabled="true">
            <stringProp name="HTTPSampler.domain">googleads.g.doubleclick.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pagead/viewthroughconversion/1003447763/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">1723995349263</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cv</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fst" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fst</stringProp>
                  <stringProp name="Argument.value">1723995349263</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bg</stringProp>
                  <stringProp name="Argument.value">ffffff</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="guid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">guid</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="async" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">async</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gtm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gtm</stringProp>
                  <stringProp name="Argument.value">45be48e0z86481802za201zb6481802</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gcd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcd</stringProp>
                  <stringProp name="Argument.value">13t3t3l3l5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dma" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dma</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tag_exp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tag_exp</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_w" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_w</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_h" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_h</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="label" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">label</stringProp>
                  <stringProp name="Argument.value">dhlmCOWU7gMQ08u93gM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hn</stringProp>
                  <stringProp name="Argument.value">www.googleadservices.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="frm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">frm</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tiba" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tiba</stringProp>
                  <stringProp name="Argument.value">Simplilearn | Online Courses - Bootcamp &amp; Certification Platform</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_uid</stringProp>
                  <stringProp name="Argument.value">G-CG9EYRX7VL.undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="npa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">npa</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pscdl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pscdl</stringProp>
                  <stringProp name="Argument.value">noapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="auid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">auid</stringProp>
                  <stringProp name="Argument.value">1886465050.1723993851</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fdr</stringProp>
                  <stringProp name="Argument.value">QA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rfmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rfmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fmt</stringProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/pagead/viewthroughconversion/866563032/-282" enabled="true">
            <stringProp name="HTTPSampler.domain">googleads.g.doubleclick.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pagead/viewthroughconversion/866563032/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">1723995349312</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cv</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fst" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fst</stringProp>
                  <stringProp name="Argument.value">1723995349312</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bg</stringProp>
                  <stringProp name="Argument.value">ffffff</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="guid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">guid</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="async" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">async</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gtm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gtm</stringProp>
                  <stringProp name="Argument.value">45be48e0v9119647210z86481802za201zb6481802</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gcd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcd</stringProp>
                  <stringProp name="Argument.value">13t3t3l3l5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dma" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dma</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tag_exp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tag_exp</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_w" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_w</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_h" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_h</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hn</stringProp>
                  <stringProp name="Argument.value">www.googleadservices.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="frm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">frm</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tiba" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tiba</stringProp>
                  <stringProp name="Argument.value">Simplilearn | Online Courses - Bootcamp &amp; Certification Platform</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_uid</stringProp>
                  <stringProp name="Argument.value">G-CG9EYRX7VL.undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="npa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">npa</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pscdl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pscdl</stringProp>
                  <stringProp name="Argument.value">noapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="auid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">auid</stringProp>
                  <stringProp name="Argument.value">1886465050.1723993851</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fdr</stringProp>
                  <stringProp name="Argument.value">QA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="data" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">data</stringProp>
                  <stringProp name="Argument.value">edu_pid=1;edu_plocid=Online;edu_pagetype=other;edu_totalvalue=0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rfmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rfmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fmt</stringProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/pagead/viewthroughconversion/960912318/-283" enabled="true">
            <stringProp name="HTTPSampler.domain">googleads.g.doubleclick.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pagead/viewthroughconversion/960912318/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">1723995349287</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cv</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fst" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fst</stringProp>
                  <stringProp name="Argument.value">1723995349287</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bg</stringProp>
                  <stringProp name="Argument.value">ffffff</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="guid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">guid</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="async" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">async</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gtm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gtm</stringProp>
                  <stringProp name="Argument.value">45be48e0z86481802za201zb6481802</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gcd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcd</stringProp>
                  <stringProp name="Argument.value">13t3t3l3l5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dma" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dma</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tag_exp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tag_exp</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_w" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_w</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_h" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_h</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hn</stringProp>
                  <stringProp name="Argument.value">www.googleadservices.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="frm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">frm</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tiba" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tiba</stringProp>
                  <stringProp name="Argument.value">Simplilearn | Online Courses - Bootcamp &amp; Certification Platform</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_uid</stringProp>
                  <stringProp name="Argument.value">G-CG9EYRX7VL.undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="npa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">npa</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pscdl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pscdl</stringProp>
                  <stringProp name="Argument.value">noapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="auid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">auid</stringProp>
                  <stringProp name="Argument.value">1886465050.1723993851</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fdr</stringProp>
                  <stringProp name="Argument.value">QA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rfmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rfmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fmt</stringProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tag/d7w7q41v8m-280" enabled="true">
            <stringProp name="HTTPSampler.domain">www.clarity.ms</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/tag/d7w7q41v8m</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tr/-287" enabled="true">
            <stringProp name="HTTPSampler.domain">www.facebook.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/tr/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                  <stringProp name="Argument.value">227666084092113</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ev" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ev</stringProp>
                  <stringProp name="Argument.value">PixelInitialized</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dl</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rl</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="if" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">if</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ts" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ts</stringProp>
                  <stringProp name="Argument.value">1723995349447</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/pixel/ZlpwB9vMiLNibuSWefe5-281" enabled="true">
            <stringProp name="HTTPSampler.domain">ws.zoominfo.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pixel/ZlpwB9vMiLNibuSWefe5</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-289" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">ni:asyncSettingsAudit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;settings&quot;:&quot;[{\&quot;name\&quot;:\&quot;setToken\&quot;,\&quot;value\&quot;:\&quot;bb02d357a7626bfb5ed6ca1d35efd712\&quot;,\&quot;dateTime\&quot;:\&quot;Sun, 18 Aug 2024 15:35:49 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;},{\&quot;name\&quot;:\&quot;setEpsilonKey\&quot;,\&quot;value\&quot;:\&quot;62281790d7c8ea74d83b1d998db9f9999f0ec4f5\&quot;,\&quot;dateTime\&quot;:\&quot;Sun, 18 Aug 2024 15:35:49 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;},{\&quot;name\&quot;:\&quot;enableRetargeting\&quot;,\&quot;value\&quot;:\&quot;false\&quot;,\&quot;dateTime\&quot;:\&quot;Sun, 18 Aug 2024 15:35:49 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;},{\&quot;name\&quot;:\&quot;setCustomMetatags\&quot;,\&quot;value\&quot;:\&quot;[]\&quot;,\&quot;dateTime\&quot;:\&quot;Sun, 18 Aug 2024 15:35:49 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;},{\&quot;name\&quot;:\&quot;storeTagId\&quot;,\&quot;value\&quot;:\&quot;aba49154-3ac6-4297-839c-2d581677fb46\&quot;,\&quot;dateTime\&quot;:\&quot;Sun, 18 Aug 2024 15:35:49 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;},{\&quot;name\&quot;:\&quot;enableEventTracking\&quot;,\&quot;value\&quot;:\&quot;true\&quot;,\&quot;dateTime\&quot;:\&quot;Sun, 18 Aug 2024 15:35:49 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;},{\&quot;name\&quot;:\&quot;enableCompanyDetails\&quot;,\&quot;value\&quot;:\&quot;[true,null,3]\&quot;,\&quot;dateTime\&quot;:\&quot;Sun, 18 Aug 2024 15:35:49 GMT\&quot;,\&quot;timeSincePageLoad\&quot;:\&quot;0\&quot;}]&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-288" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">a_pageload</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;pageLoadTime&quot;:&quot;Sun, 18 Aug 2024 15:35:49 GMT&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/wa/-290" enabled="true">
            <stringProp name="HTTPSampler.domain">px.ads.linkedin.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/wa/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;pids&quot;:[685867],&quot;scriptVersion&quot;:169,&quot;time&quot;:1723995349815,&quot;domain&quot;:&quot;simplilearn.com&quot;,&quot;url&quot;:&quot;https://simplilearn.com/&quot;,&quot;pageTitle&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp; Certification Platform&quot;,&quot;websiteSignalRequestId&quot;:&quot;15cc2705-f5b4-baa3-26e8-53c819c8e6d5&quot;,&quot;isTranslated&quot;:false,&quot;liFatId&quot;:&quot;&quot;,&quot;liGiant&quot;:&quot;&quot;,&quot;misc&quot;:{&quot;psbState&quot;:-4},&quot;isLinkedInApp&quot;:false,&quot;hem&quot;:null,&quot;signalType&quot;:&quot;PAGE_VISIT&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/pagead/1p-user-list/1003447763/-291" enabled="true">
            <stringProp name="HTTPSampler.domain">www.google.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pagead/1p-user-list/1003447763/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">1723995349263</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cv</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fst" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fst</stringProp>
                  <stringProp name="Argument.value">1723993200000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bg</stringProp>
                  <stringProp name="Argument.value">ffffff</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="guid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">guid</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="async" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">async</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gtm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gtm</stringProp>
                  <stringProp name="Argument.value">45be48e0z86481802za201zb6481802</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gcd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcd</stringProp>
                  <stringProp name="Argument.value">13t3t3l3l5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dma" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dma</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tag_exp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tag_exp</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_w" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_w</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_h" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_h</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="label" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">label</stringProp>
                  <stringProp name="Argument.value">dhlmCOWU7gMQ08u93gM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hn</stringProp>
                  <stringProp name="Argument.value">www.googleadservices.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="frm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">frm</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tiba" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tiba</stringProp>
                  <stringProp name="Argument.value">Simplilearn | Online Courses - Bootcamp &amp; Certification Platform</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_uid</stringProp>
                  <stringProp name="Argument.value">G-CG9EYRX7VL.undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="npa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">npa</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pscdl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pscdl</stringProp>
                  <stringProp name="Argument.value">noapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="auid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">auid</stringProp>
                  <stringProp name="Argument.value">1886465050.1723993851</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fdr</stringProp>
                  <stringProp name="Argument.value">QA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rfmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rfmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="is_vtc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is_vtc</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">CAQSGwDpaXnfOIOMyPfPwaFa95VRw0uHwwTrPArtgA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">3330901247</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rmt_tld" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rmt_tld</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ipr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ipr</stringProp>
                  <stringProp name="Argument.value">y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=5, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/pagead/1p-user-list/960912318/-295" enabled="true">
            <stringProp name="HTTPSampler.domain">www.google.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pagead/1p-user-list/960912318/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">1723995349287</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cv</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fst" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fst</stringProp>
                  <stringProp name="Argument.value">1723993200000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bg</stringProp>
                  <stringProp name="Argument.value">ffffff</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="guid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">guid</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="async" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">async</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gtm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gtm</stringProp>
                  <stringProp name="Argument.value">45be48e0z86481802za201zb6481802</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gcd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcd</stringProp>
                  <stringProp name="Argument.value">13t3t3l3l5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dma" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dma</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tag_exp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tag_exp</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_w" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_w</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_h" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_h</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hn</stringProp>
                  <stringProp name="Argument.value">www.googleadservices.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="frm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">frm</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tiba" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tiba</stringProp>
                  <stringProp name="Argument.value">Simplilearn | Online Courses - Bootcamp &amp; Certification Platform</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_uid</stringProp>
                  <stringProp name="Argument.value">G-CG9EYRX7VL.undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="npa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">npa</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pscdl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pscdl</stringProp>
                  <stringProp name="Argument.value">noapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="auid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">auid</stringProp>
                  <stringProp name="Argument.value">1886465050.1723993851</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fdr</stringProp>
                  <stringProp name="Argument.value">QA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rfmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rfmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="is_vtc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is_vtc</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">CAQSGwDpaXnfSrGtJ2SvaAkHbdEU77-Z4vAUSRYozA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">1223109064</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rmt_tld" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rmt_tld</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ipr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ipr</stringProp>
                  <stringProp name="Argument.value">y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=5, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/pagead/1p-user-list/1003447763/-292" enabled="true">
            <stringProp name="HTTPSampler.domain">www.google.co.in</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pagead/1p-user-list/1003447763/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">1723995349263</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cv</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fst" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fst</stringProp>
                  <stringProp name="Argument.value">1723993200000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bg</stringProp>
                  <stringProp name="Argument.value">ffffff</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="guid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">guid</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="async" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">async</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gtm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gtm</stringProp>
                  <stringProp name="Argument.value">45be48e0z86481802za201zb6481802</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gcd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcd</stringProp>
                  <stringProp name="Argument.value">13t3t3l3l5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dma" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dma</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tag_exp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tag_exp</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_w" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_w</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_h" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_h</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="label" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">label</stringProp>
                  <stringProp name="Argument.value">dhlmCOWU7gMQ08u93gM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hn</stringProp>
                  <stringProp name="Argument.value">www.googleadservices.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="frm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">frm</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tiba" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tiba</stringProp>
                  <stringProp name="Argument.value">Simplilearn | Online Courses - Bootcamp &amp; Certification Platform</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_uid</stringProp>
                  <stringProp name="Argument.value">G-CG9EYRX7VL.undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="npa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">npa</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pscdl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pscdl</stringProp>
                  <stringProp name="Argument.value">noapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="auid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">auid</stringProp>
                  <stringProp name="Argument.value">1886465050.1723993851</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fdr</stringProp>
                  <stringProp name="Argument.value">QA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rfmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rfmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="is_vtc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is_vtc</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">CAQSGwDpaXnfOIOMyPfPwaFa95VRw0uHwwTrPArtgA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">3330901247</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rmt_tld" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rmt_tld</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ipr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ipr</stringProp>
                  <stringProp name="Argument.value">y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=5, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/pagead/1p-user-list/866563032/-294" enabled="true">
            <stringProp name="HTTPSampler.domain">www.google.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pagead/1p-user-list/866563032/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">1723995349312</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cv</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fst" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fst</stringProp>
                  <stringProp name="Argument.value">1723993200000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bg</stringProp>
                  <stringProp name="Argument.value">ffffff</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="guid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">guid</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="async" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">async</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gtm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gtm</stringProp>
                  <stringProp name="Argument.value">45be48e0v9119647210z86481802za201zb6481802</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gcd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcd</stringProp>
                  <stringProp name="Argument.value">13t3t3l3l5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dma" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dma</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tag_exp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tag_exp</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_w" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_w</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_h" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_h</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hn</stringProp>
                  <stringProp name="Argument.value">www.googleadservices.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="frm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">frm</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tiba" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tiba</stringProp>
                  <stringProp name="Argument.value">Simplilearn | Online Courses - Bootcamp &amp; Certification Platform</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_uid</stringProp>
                  <stringProp name="Argument.value">G-CG9EYRX7VL.undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="npa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">npa</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pscdl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pscdl</stringProp>
                  <stringProp name="Argument.value">noapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="auid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">auid</stringProp>
                  <stringProp name="Argument.value">1886465050.1723993851</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fdr</stringProp>
                  <stringProp name="Argument.value">QA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="data" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">data</stringProp>
                  <stringProp name="Argument.value">edu_pid=1;edu_plocid=Online;edu_pagetype=other;edu_totalvalue=0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rfmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rfmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="is_vtc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is_vtc</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">CAQSGwDpaXnfS-01epBTVGxtbcAN6qepBUYg2NYNCg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">3999643356</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rmt_tld" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rmt_tld</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ipr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ipr</stringProp>
                  <stringProp name="Argument.value">y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=5, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/pagead/1p-user-list/866563032/-293" enabled="true">
            <stringProp name="HTTPSampler.domain">www.google.co.in</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pagead/1p-user-list/866563032/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">1723995349312</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cv</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fst" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fst</stringProp>
                  <stringProp name="Argument.value">1723993200000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bg</stringProp>
                  <stringProp name="Argument.value">ffffff</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="guid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">guid</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="async" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">async</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gtm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gtm</stringProp>
                  <stringProp name="Argument.value">45be48e0v9119647210z86481802za201zb6481802</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gcd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcd</stringProp>
                  <stringProp name="Argument.value">13t3t3l3l5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dma" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dma</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tag_exp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tag_exp</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_w" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_w</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_h" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_h</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hn</stringProp>
                  <stringProp name="Argument.value">www.googleadservices.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="frm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">frm</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tiba" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tiba</stringProp>
                  <stringProp name="Argument.value">Simplilearn | Online Courses - Bootcamp &amp; Certification Platform</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_uid</stringProp>
                  <stringProp name="Argument.value">G-CG9EYRX7VL.undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="npa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">npa</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pscdl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pscdl</stringProp>
                  <stringProp name="Argument.value">noapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="auid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">auid</stringProp>
                  <stringProp name="Argument.value">1886465050.1723993851</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fdr</stringProp>
                  <stringProp name="Argument.value">QA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="data" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">data</stringProp>
                  <stringProp name="Argument.value">edu_pid=1;edu_plocid=Online;edu_pagetype=other;edu_totalvalue=0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rfmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rfmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="is_vtc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is_vtc</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">CAQSGwDpaXnfS-01epBTVGxtbcAN6qepBUYg2NYNCg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">3999643356</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rmt_tld" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rmt_tld</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ipr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ipr</stringProp>
                  <stringProp name="Argument.value">y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=5, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/pagead/1p-user-list/960912318/-296" enabled="true">
            <stringProp name="HTTPSampler.domain">www.google.co.in</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pagead/1p-user-list/960912318/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">1723995349287</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cv</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fst" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fst</stringProp>
                  <stringProp name="Argument.value">1723993200000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bg</stringProp>
                  <stringProp name="Argument.value">ffffff</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="guid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">guid</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="async" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">async</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gtm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gtm</stringProp>
                  <stringProp name="Argument.value">45be48e0z86481802za201zb6481802</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gcd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcd</stringProp>
                  <stringProp name="Argument.value">13t3t3l3l5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dma" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dma</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tag_exp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tag_exp</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_w" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_w</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_h" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_h</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="hn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hn</stringProp>
                  <stringProp name="Argument.value">www.googleadservices.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="frm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">frm</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tiba" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tiba</stringProp>
                  <stringProp name="Argument.value">Simplilearn | Online Courses - Bootcamp &amp; Certification Platform</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_uid</stringProp>
                  <stringProp name="Argument.value">G-CG9EYRX7VL.undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="npa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">npa</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pscdl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pscdl</stringProp>
                  <stringProp name="Argument.value">noapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="auid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">auid</stringProp>
                  <stringProp name="Argument.value">1886465050.1723993851</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fdr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fdr</stringProp>
                  <stringProp name="Argument.value">QA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rfmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rfmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fmt</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="is_vtc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is_vtc</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">CAQSGwDpaXnfSrGtJ2SvaAkHbdEU77-Z4vAUSRYozA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="random" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">random</stringProp>
                  <stringProp name="Argument.value">1223109064</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rmt_tld" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rmt_tld</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ipr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ipr</stringProp>
                  <stringProp name="Argument.value">y</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=5, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/pagead/landing-297" enabled="true">
            <stringProp name="HTTPSampler.domain">googleads.g.doubleclick.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/pagead/landing</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="gcs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcs</stringProp>
                  <stringProp name="Argument.value">G111</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gcd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gcd</stringProp>
                  <stringProp name="Argument.value">13t3t3l3l5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tag_exp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tag_exp</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rnd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rnd</stringProp>
                  <stringProp name="Argument.value">1697859738.1723995349</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dma" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dma</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="npa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">npa</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gtm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gtm</stringProp>
                  <stringProp name="Argument.value">45He48e0n71WTL3CFv6481802za200</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="auid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">auid</stringProp>
                  <stringProp name="Argument.value">1886465050.1723993851</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tr/-302" enabled="true">
            <stringProp name="HTTPSampler.domain">www.facebook.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/tr/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                  <stringProp name="Argument.value">227666084092113</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ev" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ev</stringProp>
                  <stringProp name="Argument.value">ViewContent</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dl</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rl</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="if" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">if</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ts" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ts</stringProp>
                  <stringProp name="Argument.value">1723995349833</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cd[content_type]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cd[content_type]</stringProp>
                  <stringProp name="Argument.value">product</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cd[content_ids]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cd[content_ids]</stringProp>
                  <stringProp name="Argument.value">[&quot;undefined&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sw</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sh</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">2.9.164</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">stable</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ec" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ec</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="o" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o</stringProp>
                  <stringProp name="Argument.value">4126</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fbp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fbp</stringProp>
                  <stringProp name="Argument.value">fb.1.1723993870862.914564005256725519</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ler" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ler</stringProp>
                  <stringProp name="Argument.value">empty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="it" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">it</stringProp>
                  <stringProp name="Argument.value">1723995349482</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="coo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">coo</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rqm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rqm</stringProp>
                  <stringProp name="Argument.value">GET</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tr/-298" enabled="true">
            <stringProp name="HTTPSampler.domain">www.facebook.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/tr/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                  <stringProp name="Argument.value">227666084092113</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ev" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ev</stringProp>
                  <stringProp name="Argument.value">PageView</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dl</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rl</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="if" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">if</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ts" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ts</stringProp>
                  <stringProp name="Argument.value">1723995349831</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sw</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sh</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">2.9.164</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">stable</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ec" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ec</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="o" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o</stringProp>
                  <stringProp name="Argument.value">4126</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fbp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fbp</stringProp>
                  <stringProp name="Argument.value">fb.1.1723993870862.914564005256725519</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ler" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ler</stringProp>
                  <stringProp name="Argument.value">empty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="it" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">it</stringProp>
                  <stringProp name="Argument.value">1723995349482</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="coo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">coo</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rqm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rqm</stringProp>
                  <stringProp name="Argument.value">GET</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tr/-303" enabled="true">
            <stringProp name="HTTPSampler.domain">www.facebook.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/tr/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                  <stringProp name="Argument.value">377994675260290</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ev" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ev</stringProp>
                  <stringProp name="Argument.value">PageView</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dl</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rl</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="if" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">if</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ts" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ts</stringProp>
                  <stringProp name="Argument.value">1723995351023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sw</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sh</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">2.9.164</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value">stable</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">a</stringProp>
                  <stringProp name="Argument.value">tmgoogletagmanager</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ec" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ec</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="o" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o</stringProp>
                  <stringProp name="Argument.value">4126</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fbp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fbp</stringProp>
                  <stringProp name="Argument.value">fb.1.1723993870862.914564005256725519</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ler" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ler</stringProp>
                  <stringProp name="Argument.value">empty</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="it" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">it</stringProp>
                  <stringProp name="Argument.value">1723995349482</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="coo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">coo</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rqm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rqm</stringProp>
                  <stringProp name="Argument.value">GET</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/s/0.7.41/clarity.js-299" enabled="true">
            <stringProp name="HTTPSampler.domain">www.clarity.ms</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/s/0.7.41/clarity.js</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/action/0-300" enabled="true">
            <stringProp name="HTTPSampler.domain">bat.bing.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/action/0</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ti" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ti</stringProp>
                  <stringProp name="Argument.value">4002550</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Ver" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Ver</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                  <stringProp name="Argument.value">a67bb0b3-7669-4a05-85c3-aa8d5dbf0100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sid</stringProp>
                  <stringProp name="Argument.value">1f5684705d7411efab59ebca8046ca7b</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">vid</stringProp>
                  <stringProp name="Argument.value">1f56ae505d7411ef92d96d6b06bdce59</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vids" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">vids</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="msclkid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">msclkid</stringProp>
                  <stringProp name="Argument.value">N</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pi" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pi</stringProp>
                  <stringProp name="Argument.value">918639831</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lg</stringProp>
                  <stringProp name="Argument.value">en-US</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sw</stringProp>
                  <stringProp name="Argument.value">1280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sh</stringProp>
                  <stringProp name="Argument.value">720</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sc</stringProp>
                  <stringProp name="Argument.value">24</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tl</stringProp>
                  <stringProp name="Argument.value">Simplilearn | Online Courses - Bootcamp &amp; Certification Platform</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">p</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value">1124</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="evt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">evt</stringProp>
                  <stringProp name="Argument.value">pageLoad</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sv</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cdb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cdb</stringProp>
                  <stringProp name="Argument.value">AQAQ</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rn</stringProp>
                  <stringProp name="Argument.value">597746</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/c.gif-301" enabled="true">
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            <stringProp name="HTTPSampler.domain">c.clarity.ms</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/c.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/c.gif-304" enabled="false">
            <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            <stringProp name="HTTPSampler.domain">c.bing.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/c.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ctsa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctsa</stringProp>
                  <stringProp name="Argument.value">mr</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CtsSyncId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">CtsSyncId</stringProp>
                  <stringProp name="Argument.value">5ECA49A013304C12B9E62216123F208C</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="RedC" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">RedC</stringProp>
                  <stringProp name="Argument.value">c.clarity.ms</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="MXFR" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">MXFR</stringProp>
                  <stringProp name="Argument.value">3088674F0EB76AAA318273900AB764FD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/c.gif-305" enabled="false">
            <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            <stringProp name="HTTPSampler.domain">c.clarity.ms</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/c.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ctsa" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ctsa</stringProp>
                  <stringProp name="Argument.value">mr</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CtsSyncId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">CtsSyncId</stringProp>
                  <stringProp name="Argument.value">5ECA49A013304C12B9E62216123F208C</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="MUID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">MUID</stringProp>
                  <stringProp name="Argument.value">11DDBD56B6DD62772747A989B76F6393</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-306" enabled="true">
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            <stringProp name="HTTPSampler.domain">px.ads.linkedin.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/collect</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fmt</stringProp>
                  <stringProp name="Argument.value">js</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">685867</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1723995354270</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="li_adsId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">li_adsId</stringProp>
                  <stringProp name="Argument.value">27deeaea-d913-4c62-9d6a-a14ffab88a3c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tm</stringProp>
                  <stringProp name="Argument.value">gtmv2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-307" enabled="true">
            <stringProp name="HTTPSampler.domain">px.ads.linkedin.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/collect</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fmt</stringProp>
                  <stringProp name="Argument.value">js</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">685867</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1723995354270</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="li_adsId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">li_adsId</stringProp>
                  <stringProp name="Argument.value">27deeaea-d913-4c62-9d6a-a14ffab88a3c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tm</stringProp>
                  <stringProp name="Argument.value">gtmv2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cookiesTest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cookiesTest</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/events/1/0d4c245767?a=351379365&amp;sa=1&amp;v=1208.49599aa&amp;t=Unnamed%20Transaction&amp;rst=16442&amp;ck=1&amp;ref=https://www.simplilearn.com/-309" enabled="true">
            <stringProp name="HTTPSampler.domain">bam.nr-data.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/events/1/0d4c245767?a=351379365&amp;sa=1&amp;v=1208.49599aa&amp;t=Unnamed%20Transaction&amp;rst=16442&amp;ck=1&amp;ref=https://www.simplilearn.com/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">bel.6;e,&apos;fcp,r2,;e,&apos;load,v7,;e,&apos;pageHide,5hx,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">https://epsilon.6sense.com/v3/company/</stringProp>
                <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
                <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
                <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v3/company/details-308" enabled="true">
            <stringProp name="HTTPSampler.domain">epsilon.6sense.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v3/company/details</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="X-6s-CustomID" elementType="Header">
                  <stringProp name="Header.name">X-6s-CustomID</stringProp>
                  <stringProp name="Header.value">WebTag aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-312" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:35:56 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:35:49 GMT&quot;,&quot;timeSpent&quot;:&quot;6836&quot;,&quot;totalTimeSpent&quot;:&quot;6836&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-311" enabled="true">
            <stringProp name="HTTPSampler.domain">u.clarity.ms</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/collect</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.41&quot;,1,0,4925,&quot;d7w7q41v8m&quot;,&quot;1bw6kip&quot;,&quot;1sdv2kv&quot;,2,0,0],&quot;a&quot;:[[2,8,1280,7771],[35,11,1280,587],[35,28,&quot;hidden&quot;],[35,29,1,41,41,41,42,841,956,1104,1104,1124,0,651241,&quot;reload&quot;,&quot;http/1.1&quot;,650941,650941],[4925,34,&quot;_uetvid&quot;,[&quot;1f56ae505d7411ef92d96d6b06bdce59&quot;],&quot;C_IS&quot;,[&quot;0&quot;]],[4925,1,0,[&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0&quot;],1,[&quot;https://www.simplilearn.com/&quot;],3,[&quot;Simplilearn | Online Courses - Bootcamp &amp; Certification Platform&quot;],4,[&quot;www.simplilearn.com&quot;,&quot;www.googletagmanager.com&quot;,&quot;cdn.gumlet.com&quot;,&quot;js-agent.newrelic.com&quot;,&quot;bam.nr-data.net&quot;,&quot;simplilearn.com&quot;,&quot;analytics.google.com&quot;,&quot;cdn-jp.gsecondscreen.com&quot;,&quot;xds.gsecondscreen.com&quot;,&quot;ajax.googleapis.com&quot;,&quot;evbk6-uk.gsecondscreen.com&quot;,&quot;ssl.widgets.webengage.com&quot;,&quot;311c5642.webengage.co&quot;,&quot;www.google.com&quot;,&quot;bat.bing.com&quot;,&quot;snap.licdn.com&quot;,&quot;connect.facebook.net&quot;,&quot;scout-cdn.salesloft.com&quot;,&quot;ws.zoominfo.com&quot;,&quot;j.6sc.co&quot;,&quot;www.clarity.ms&quot;,&quot;googleads.g.doubleclick.net&quot;,&quot;www.facebook.com&quot;,&quot;b.6sc.co&quot;,&quot;c.6sc.co&quot;,&quot;ipv6.6sc.co&quot;,&quot;px.ads.linkedin.com&quot;,&quot;www.google.co.in&quot;,&quot;c.clarity.ms&quot;,&quot;epsilon.6sense.com&quot;],9,[&quot;en-US&quot;],15,[&quot;kykjq6&quot;],16,[&quot;en-US&quot;],17,[&quot;ltr&quot;],19,[&quot;website&quot;],20,[&quot;Simplilearn | Online Courses - Bootcamp &amp; Certification Platform&quot;],22,[&quot;Win32&quot;],26,[&quot;1.5&quot;],28,[&quot;1691&quot;],29,[&quot;2&quot;]],[4925,0,0,1723995351367,1,0,3,31,4,37,5,2,6,34,7,1,14,1280,15,720,16,24,25,6,26,0,31,1,32,0,33,8,35,0],[4925,36,6,[3919,1]]]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-313" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:35:57 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:35:56 GMT&quot;,&quot;timeSpent&quot;:&quot;1012&quot;,&quot;totalTimeSpent&quot;:&quot;7848&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-314" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:35:59 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:35:57 GMT&quot;,&quot;timeSpent&quot;:&quot;2022&quot;,&quot;totalTimeSpent&quot;:&quot;9870&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-316" enabled="true">
            <stringProp name="HTTPSampler.domain">u.clarity.ms</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/collect</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.41&quot;,2,4925,4041,&quot;d7w7q41v8m&quot;,&quot;1bw6kip&quot;,&quot;1sdv2kv&quot;,2,0,0],&quot;a&quot;:[[6046,2,1,2,204],[4925,4,0,1280,7771,1280,587,0,0,0,0,35,0],[8966,1,4,[&quot;u.clarity.ms&quot;],31,[&quot;3un1793hx.7eniqzu8e&quot;],32,[&quot;1sjxdg4mx.58fje3eq8&quot;]],[8966,0,1,1,2,753,3,71,4,73,5,4,25,8,28,1063],[8966,36,6,[6940,0]]],&quot;p&quot;:[[3,5,1,&quot;*D&quot;,&quot;name=html&quot;,&quot;publicId=&quot;,&quot;systemId=&quot;,2,&quot;HTML&quot;,&quot;xmlns=https://www.w3.org/1999/xhtml&quot;,&quot;dir=ltr&quot;,&quot;lang=en-US&quot;,3,2,&quot;HEAD&quot;,&quot;*B=https://www.simplilearn.com/&quot;,4,2,3,&quot;*T&quot;,&quot;\n\t&quot;,5,2,4,&quot;BODY&quot;,&quot;class=body&quot;,6,3,[19],&quot;\n\t\n\t\n\t&quot;,7,3,6,[19],&quot;\n    &quot;,8,3,7,[19,34],9,3,8,[19],&quot;\n\t\n        &quot;,10,3,9,[19],&quot;\n        &quot;,11,3,10,[19,48],12,3,11,&quot;TITLE&quot;,13,3,12,[19],&quot;\n        \n        &quot;,14,3,13,&quot;LINK&quot;,&quot;rel=dns-prefetch&quot;,&quot;href=https://stats.g.doubleclick.net/&quot;,15,3,14,[19,48],16,3,15,[65,66],&quot;href=https://www.google.com/&quot;,17,3,16,[19,48],18,3,17,[65],&quot;rel=preconnect&quot;,&quot;href=https://js-agent.newrelic.com&quot;,19,3,18,[19,48],20,3,19,[65,85],&quot;href=https://cdn.gumlet.com/&quot;,21,3,20,[19,61],22,3,21,[19,48],23,3,22,[65],&quot;rel=shortcut icon&quot;,&quot;href=https://www.simplilearn.com/static/frontend/images/favicon.png&quot;,24,3,23,[19,48],25,3,24,[65],&quot;rel=manifest&quot;,&quot;href=https://www.simplilearn.com/static-frs/manifest.json&quot;,26,3,25,[19,48],27,3,26,[65],&quot;rel=icon&quot;,&quot;href=https://www.simplilearn.com/static/frontend/images/favicon/favicon.ico&quot;,28,3,27,[19,48],29,3,28,[65],&quot;rel=apple-touch-icon&quot;,&quot;sizes=152x152&quot;,&quot;href=https://www.simplilearn.com/static/frontend/images/favicon/apple-touch-icon-152x152.png&quot;,30,3,29,[19,48],31,3,30,[65,138],&quot;sizes=120x120&quot;,&quot;href=https://www.simplilearn.com/static/frontend/images/favicon/apple-touch-icon-120x120.png&quot;,32,3,31,[19,48],33,3,32,[65,138],&quot;sizes=76x76&quot;,&quot;href=https://www.simplilearn.com/static/frontend/images/favicon/apple-touch-icon-76x76.png&quot;,34,3,33,[19,48],35,3,34,[65,138],&quot;sizes=60x60&quot;,&quot;href=https://www.simplilearn.com/static/frontend/images/favicon/apple-touch-icon-60x60.png&quot;,36,3,35,[19,48],37,3,36,[19,48],38,3,37,[19,48],39,3,38,[19,48],40,3,39,[65],&quot;rel=alternate&quot;,&quot;type=application/rss+xml&quot;,&quot;href=https://www.simplilearn.com/feed/&quot;,41,3,40,[19],&quot;\n        \n        \n        &quot;,42,3,41,[65],&quot;type=application/opensearchdescription+xml&quot;,&quot;rel=search&quot;,&quot;href=/simpli_search.xml&quot;,43,3,42,[19,61],44,3,43,[65],&quot;rel=canonical&quot;,&quot;href=https://www.simplilearn.com&quot;,45,3,44,[19,48],46,3,45,[19,198],47,3,46,[19,48],48,3,47,[19,48],49,3,48,[19,48],50,3,49,[19,48],51,3,50,[19,48],52,3,51,[19,48],53,3,52,[19,48],54,3,53,[19,61],55,3,54,[19],&quot;\n            &quot;,56,3,55,[19,260],57,3,56,[19,260],58,3,57,[19,260],59,3,58,[19,260],60,3,59,[19,260],61,3,60,[19,260],62,3,61,[19,48],63,3,62,[19,48],64,3,63,[19,48],65,3,64,[19,48],66,3,65,[19,48],67,3,66,[19,198],68,3,67,[19],&quot;\n        \n        \n        \n        &quot;,69,3,68,[19,48],70,3,69,[19,61],71,3,70,[19,48],72,3,71,[19],&quot;\n        \n        \n    &quot;,73,3,72,[19],&quot;\n    \n        \n    &quot;,74,3,73,[19,198],75,3,74,[19],&quot;\n    \n\t&quot;,76,3,75,&quot;STYLE&quot;,&quot;@font-face {\n\t\tfont-family: &apos;Roboto&apos;;\n\t\tsrc: url(&apos;https://www.simplilearn.com/ice9/assets/fonts/Roboto-Regular_v1.woff2&apos;) format(&apos;woff2&apos;),\n\t\turl(&apos;https://www.simplilearn.com/ice9/assets/fonts/Roboto-Regular_v1.woff&apos;) format(&apos;woff&apos;);\n\t\tfont-weight: 400;\n\t\tfont-display: swap;\n\t\t}\n\t\t@font-face {\n\t\tfont-family: &apos;Roboto&apos;;\n\t\tsrc: url(&apos;https://www.simplilearn.com/ice9/assets/fonts/Roboto-Medium_v1.woff2&apos;) format(&apos;woff2&apos;),\n\t\turl(&apos;https://www.simplilearn.com/ice9/assets/fonts/Roboto-Medium_v1.woff&apos;) format(&apos;woff&apos;);\n\t\tfont-weight: 500;\n\t\tfont-display: swap;\n\t\t}\n\n\t\t\n\t\n\t\n        :root { \n            --sub-course-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/course_sprite_7.svgz&apos;);\n            --frs-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/frs-sprite_4.svgz&apos;);\n            --footer-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/footer_sprite.svgz&apos;);\n            --footer-telegram-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/telegram_logo.svgz&apos;);\n            --home-sprite-new:url(&apos;https://www.simplilearn.com/ice9/assets/home/sprite_v2.svgz&apos;);\n            --mql-sprite-new:url(&apos;https://www.simplilearn.com/ice9/assets/mql-new-sprite_4.svgz&apos;);\n            --mql-new-bg:url(&apos;https://www.simplilearn.com/ice9/assets/mql-new-banner_1.jpg&apos;);\n            --dm-sprite-cal:url(&apos;https://www.simplilearn.com/ice9/assets/mql-caltech-sprite.svgz&apos;);\n            --mql-right:url(&apos;https://www.simplilearn.com/ice9/assets/right-mark.png&apos;);\n            --mql-linkdin:url(&apos;https://www.simplilearn.com/ice9/assets/linkedin-logo.png&apos;);\n            --mql-sprite-orange:url(&apos;https://www.simplilearn.com/ice9/assets/mql-caltech-sprite_3.svgz&apos;);\n            --caltech-footer-bg:url(&apos;https://www.simplilearn.com/ice9/assets/caltech-bg-footer.png&apos;);\n            --jagsom-footer-icon:url(&apos;https://www.simplilearn.com/ice9/assets/chat-footer-icons_v_8.svgz&apos;);\n            --mql-purdue-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/mql-sprite-Purdue.svgz&apos;);\n            --mql-purdue-sprite-new:url(&apos;https://www.simplilearn.com/ice9/university/MQL-Sprite-purdue_v81_new-sprite-image-uni-1.svgz&apos;);\n            --spj-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/mql-sprite-sp-jain-blue.svgz&apos;);\n            --wharton-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/wharton.svgz&apos;);\n            --dm-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/dual-master-sprite_1.svgz&apos;);\n            --wharton-play:url(&apos;https://www.simplilearn.com/ice9/assets/wharton-play-icon.svgz&apos;);\n            --propelld-excla-logo:url(&apos;https://www.simplilearn.com/ice9/assets/exclamation-mark.svgz&apos;);\n            --subdamin-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/MQL-Sprite-Caltech_v2.svgz&apos;);\n            --subdomain-thank-you:url(&apos;https://www.simplilearn.com/ice9/assets/success_anim_v2.gif&apos;);\n            --iit-mobile-banner:url(&apos;https://www.simplilearn.com/ice9/assets/iit_mobile_banner_v7.jpg&apos;);\n            --iitk-tab:url(&apos;https://www.simplilearn.com/ice9/assets/iitk_tab_v_3_2.png&apos;);\n            --home-sprite:url(&apos;https://www.simplilearn.com/static/frontend/images/home-page_sprite_v7.png&apos;);\n            --sub-program-fees:url(&apos;https://www.simplilearn.com/ice9/assets/IITK_Pricing_Banner.png&apos;);\n            --caltech-header-pattern:url(&apos;https://www.simplilearn.com/ice9/assets/headerpattern.svgz&apos;);\n            --mql-certificate-bg:url(&apos;https://www.simplilearn.com/ice9/assets/mql-certificates.jpg&apos;);\n            --bootcamp-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/home/sprite.svgz&apos;);\n            --mql-sprite-blue:url(&apos;https://www.simplilearn.com/ice9/assets/mql-sprite-blue.svgz&apos;);\n            --mql-sprite-orange-black:url(&apos;https://www.simplilearn.com/ice9/assets/mql-sprite-orange_v2_1.svgz&apos;);\n            --umass-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/mql-sprite-UMass-4.svgz&apos;);\n            --mql-umass-success:url(&apos;https://www.simplilearn.com/ice9/assets/umass-success.svgz&apos;);\n            --wharton-sticky:url(&apos;https://www.simplilearn.com/ice9/assets/wharton-sticky.svgz&apos;);\n            --twit:url(&apos;https://www.simplilearn.com/ice9/assets/twit.svgz&apos;);\n            --link:url(&apos;https://www.simplilearn.com/ice9/assets/link.svgz&apos;);\n            --uci-sticky:url(&apos;https://www.simplilearn.com/ice9/assets/uci-footer.svgz&apos;);\n            --uci-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/mql-sprite-uci-theme.svgz&apos;);\n            --uminn-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/mql-sprite-uminn-red.svgz&apos;);\n            --spjimr-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/mql-sprite-spjimr.svgz&apos;);\n            --mitxpro-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/mql-sprite-mit.svgz&apos;);\n            --usc-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/mql-sprite-usc-2.svgz&apos;);\n            --university-sprite:url(&apos;https://www.simplilearn.com/ice9/assets/pg-page/pg-sprite.svgz&apos;);\n            --mql-caltech-success: url(&apos;https://www.simplilearn.com/ice9/assets/caltech-success.svgz&apos;);\n            --mql-sprite: url(&apos;https://www.simplilearn.com/ice9/assets/mql-sprint.svgz&apos;);\n            --b-arrow: url(&apos;https://www.simplilearn.com/ice9/assets/b-arrow.svgz&apos;);\n            --new-footer-chat-icon: url(&apos;https://www.simplilearn.com/ice9/assets/footer_new_chat.svgz&apos;);\n            \n        }\n    \n\t@font-face{\n\tfont-family:jw-icons;\n\tsrc:url(&apos;https://www.simplilearn.com/ice9/assets/fonts/jw-icons.woff&apos;) format(\&quot;woff\&quot;);\n\t}\n\t.jw-icon{\n\tfont-family: jw-icons !important;\n\t}\n\t\n\t@font-face {\n\tfont-family: &apos;Roboto&apos;;\n\tsrc: url(&apos;https://www.simplilearn.com/ice9/assets/fonts/Roboto-Light_v1.woff2&apos;) format(&apos;woff2&apos;),\n\turl(&apos;https://www.simplilearn.com/ice9/assets/fonts/Roboto-Light.woff&apos;) format(&apos;woff&apos;);\n\tfont-weight: 300;\n\tfont-display: swap;\n\t}\n\t@font-face {\n\tfont-family: &apos;Roboto&apos;;\n\tsrc: url(&apos;https://www.simplilearn.com/ice9/assets/fonts/Roboto-Bold_v1.woff2&apos;) format(&apos;woff2&apos;),\n\turl(&apos;https://www.simplilearn.com/ice9/assets/fonts/Roboto-Bold_v1.woff&apos;) format(&apos;woff&apos;);\n\tfont-weight: 700;\n\tfont-display: swap;\n\t}&quot;,77,3,76,[19,20],78,3,77,[348],&quot;*,*::before,*::after{box-sizing:border-box}*,body{-webkit-overflow-scrolling:touch;font-family:\&quot;Roboto\&quot;,sans-serif !important;font-weight:normal;font-style:normal}html{-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;-ms-overflow-style:scrollbar;-webkit-tap-highlight-color:rgba(0,0,0,0)}@-ms-viewport{width:device-width}article,footer,header,nav,section{display:block}body{margin:0;font-size:16px;font-weight:normal;line-height:26px;letter-spacing:normal;color:#51565e;text-align:left;background-color:#fff}[tabindex=\&quot;-1\&quot;]:focus{outline:0 !important}hr{box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:0}p{margin-top:0;margin-bottom:0}ol,ul,dl{margin-top:0;margin-bottom:1rem;padding:0;list-style:none}ol ol,ul ul,ol ul,ul ol{margin-bottom:0}b,strong{font-weight:500}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{vertical-align:middle;border-style:none}label{display:inline-block;margin-bottom:.5rem}textarea{overflow:auto;resize:vertical}[hidden],.hide{display:none !important}.container:after,.container:before{content:\&quot; \&quot;;display:table}a{text-decoration:none}.p-t-b-80{padding-top:80px;padding-bottom:80px}h2{font-size:18px;font-weight:500;line-height:28px;letter-spacing:normal;color:#272c37}.caret{display:inline-block;width:0;height:0;margin-left:6px;vertical-align:middle;border-top:5px dashed #fff;border-top:5px solid #fff \\9 ;border-right:5px solid rgba(0,0,0,0);border-left:5px solid rgba(0,0,0,0)}input:focus,textarea:focus,select:focus{outline-offset:-2px}:focus{outline:-webkit-focus-ring-color auto 5px}.btn,input,select,textarea{outline:0;-webkit-appearance:none;-moz-appearance:none;appearance:none}button.btn{box-shadow:none;border:0;cursor:pointer}.border-btn{cursor:pointer}button,input,optgroup,select,textarea{font:inherit;margin:0}input:not([type]),input[type=email],input[type=number],input[type=password],input[type=tel],input[type=url],input[type=text]{padding:1px 0px}input{-webkit-appearance:textfield;background-color:#fff;-webkit-rtl-ordering:logical;cursor:text;padding:1px;border-width:2px;border-style:inset;border-color:initial;border-image:initial}input,textarea,select,button{text-rendering:auto;color:initial;letter-spacing:normal;word-spacing:normal;text-transform:none;text-indent:0px;text-shadow:none;display:inline-block;text-align:start;margin:0em}input,textarea,select,button,meter,progress{-webkit-writing-mode:horizontal-tb}.visible-hidden{visibility:hidden}.query_success{position:absolute;top:0;bottom:0;background:#fff;left:0;right:0;z-index:22222;border-radius:4px}.query_success::before{display:inline-block;vertical-align:middle;content:\&quot;\&quot;;width:0px;height:100%}.query_success p{display:inline-block;vertical-align:middle;text-align:center;width:calc(100% - 4px);padding:0 15px}.query_success p::before{width:60px;height:61px;content:\&quot;\&quot;;display:block;background:var(--frs-sprite) no-repeat;background-position:-219px -152px;margin:0 auto 42px auto}.query_success p b{color:#272c37;font-size:22px;display:block;font-weight:500;margin-bottom:20px}.query_success p span{font-size:14px;display:block;font-weight:400;color:#51565e}.error-message p:before{background-position:-289px -152px}@media(min-width: 768px){.p-t-b-80{padding-top:88px;padding-bottom:88px}h2{font-size:24px;line-height:34px}.query_success p::before{width:71px;height:73px;background-position:-145px -120px}}@media(max-width: 767px){.hidden-mobile{display:none}}.ipod-browser{width:100%;height:100%;position:fixed;overflow:hidden}.lazy,.lazy::before,.lazy::after,.lazy a,.lazy a::before,.lazy a::after,.lazy div,.lazy div::before,.lazy div::after{background-image:none !important}.container{width:100%;display:inline-block;padding-left:15px;padding-right:15px}@media(min-width: 768px){.container{width:750px;display:block;margin-left:auto;margin-right:auto}}@media(min-width: 992px){.container{width:970px}}@media(min-width: 1200px){.container{width:1170px}}#disclaimers{pointer-events:none}#disclaimers .disclam-container ul li a{pointer-events:all !important}.courses-mega-menu{display:none}.strike-line{text-decoration:line-through !important}.top-sub-menu{display:none}img.lazy{width:16px !important;height:9px !important;padding:0 !important;border:0 !important}.searchDropdown::-webkit-scrollbar{width:4px !important}.searchDropdown::-webkit-scrollbar-track{background:rgba(0,0,0,0) !important}.searchDropdown::-webkit-scrollbar-thumb{background:#a5b8cd;border-radius:20px !important}.searchDropdown{position:absolute;width:100%;border-radius:8px;border:1px solid #b8d6ff;background:#fff;box-shadow:0px 0px 8px 0px rgba(0,0,0,.16);top:52px;padding:0;display:none}.searchDropdown .search-result-title{color:#424242;font-size:14px;font-style:italic;font-weight:400;line-height:normal;padding:16px 16px 8px 16px}.searchDropdown .search-heading{font-size:14px;font-style:normal;font-weight:500;line-height:normal;color:#424242;padding:16px 16px 8px}.searchDropdown .search-recently-view .recently-view-list{padding:0 6px}.searchDropdown .search-recently-view .recently-view-list .recently-view-item{padding:12px;display:block;transition:all .15s ease}.searchDropdown .search-recently-view .recently-view-list .recently-view-item img{margin-bottom:12px;height:24px}.searchDropdown .search-recently-view .recently-view-list .recently-view-item h5{color:#202020;font-size:14px;font-style:normal;font-weight:400;line-height:normal;transition:all .15s ease}.searchDropdown .search-recently-view .recently-view-list .recently-view-item:hover{border-radius:4px;background:#ebf1f8}.searchDropdown .search-recently-view .recently-view-list .recently-view-item:hover h5{color:#1179ef}.searchDropdown .popular-search{padding-bottom:16px}.searchDropdown .popular-search .popular-search-list{padding:0 16px}.searchDropdown .popular-search .popular-search-list .popular-list-item{padding:4px 8px;display:flex;align-items:center;margin-top:8px;transition:all .15s ease}.searchDropdown .popular-search .popular-search-list .popular-list-item span{width:25px;height:23px;display:inline-block;background:url(https://www.simplilearn.com/ice9/assets/new_search-thin.svgz) no-repeat;background-position:0 0 !important;margin:0 8px 0 0;background-size:contain}.searchDropdown .popular-search .popular-search-list .popular-list-item h5{color:#646464;font-size:14px;font-style:normal;font-weight:400;line-height:normal;transition:all .15s ease}.searchDropdown .popular-search .popular-search-list .popular-list-item:hover{border-radius:4px;background:#ebf1f8}.searchDropdown .popular-search .popular-search-list .popular-list-item:hover h5{color:#1179ef}.searchDropdown .search-program-list{padding:8px 16px 16px}.searchDropdown .search-program-list .search-program-item{display:block;margin-bottom:16px;padding:4px 8px;transition:all .15s ease;position:relative}.searchDropdown .search-program-list .search-program-item img{height:24px;margin-bottom:12px}.searchDropdown .search-program-list .search-program-item h5{color:#202020;font-size:14px;font-style:normal;font-weight:400;line-height:normal;transition:all .15s ease}.searchDropdown .search-program-list .search-program-item:hover{border-radius:4px;background:#ebf1f8}.searchDropdown .search-program-list .search-program-item:hover h5{color:#1179ef}.searchDropdown .search-program-list .search-program-item:after{content:\&quot;\&quot;;position:absolute;width:100%;height:1px;background:#f5f5f5;bottom:-8px;left:0}.searchDropdown .search-program-list .viewProgramBtn{color:#1179ef;text-align:center;font-size:14px;font-style:normal;font-weight:400;line-height:normal;position:relative;width:100%;transition:all .15s ease}.searchDropdown .search-program-list .viewProgramBtn:hover{background:#ebf1f8;border-radius:4px}.searchDropdown.active{display:block}header .search_topbar .search form button.input-search-btn{left:auto !important;height:36px !important;width:36px !important;right:0;background:#ebf1f8;margin:1px;padding:6px;border-radius:0px 2px 2px 0;transition:all .25s ease}header .search_topbar .search form button.input-search-btn span{width:23px;display:inline-block;background-position:3px 3px !important;margin:0;background:url(https://www.simplilearn.com/ice9/assets/newSearch_icon.svgz) no-repeat !important;top:0;position:relative;left:0}header .search_topbar .search form button.input-search-btn:hover{background-color:#1179ef}header .search_topbar .search form button.input-search-btn:hover span{background:url(https://www.simplilearn.com/ice9/assets/new-search-white-icon.svgz) no-repeat !important;display:inline-block;margin:0;background-position:2px 2px !important}header .search_topbar .search form input{padding:10px 64px 10px 8px !important}@media(min-width: 1200px){header .search_topbar button.input-clear-btn{background:url(https://www.simplilearn.com/ice9/assets/search--new-cross.svgz) !important;height:18px !important;width:18px !important;background-color:#fff !important;background-position:0 0 !important;margin-top:10px !important;border-radius:24px;left:auto;right:48px !important}header .search_topbar button.input-clear-btn:focus{outline:none}}@media(max-width: 991px){#HeaderMenu .container nav.links-left .mega-menu-button{float:right;margin-top:12px;position:absolute;right:90px}#HeaderMenu .container nav.links-left .mega-menu-button span.courses-mega-menu{width:120px;height:31px;cursor:pointer;display:block;float:left;padding:0 0 0 42px;background:#1179ef;color:#fff;border-radius:4px;line-height:30px;font-size:12px;font-weight:500;position:relative;margin:0 0 12px 0}#HeaderMenu .container nav.links-left .mega-menu-button span.courses-mega-menu::before{content:\&quot;\&quot;;width:20px;height:18px;display:inline-block;background:url(https://www.simplilearn.com/ice9/assets/header-new.svgz) no-repeat;background-position:-110px -22px;position:absolute;left:16px;top:5px}#HeaderMenu .container nav.links-left .mega-menu-button span.courses-mega-menu span{font-weight:500}}header.newTopHeader{padding:14px 0}header.newTopHeader .container .NewHeaderWrap{display:flex;align-items:center;justify-content:space-between}header.newTopHeader .container .NewHeaderWrap .header-link-left{display:flex;align-items:center}header.newTopHeader .container .NewHeaderWrap .header-link-left a.logo{margin:0 24px 0 0;height:36px}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left{display:flex;align-items:center}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left #menu-button{margin-top:0}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left #menu-button span.courses-menu{padding:0px 36px 0px 16px;width:132px;height:36px;margin-bottom:0;display:flex;align-items:center;transition:all .25s ease}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left #menu-button span.courses-menu:before{display:none}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left #menu-button span.courses-menu:after{content:\&quot;\&quot;;width:24px;height:24px;display:inline-block;background:url(https://www.simplilearn.com/ice9/assets/course_sprite_7.svgz) no-repeat;background-position:-123px -193px;position:absolute;right:12px;top:6px;transform:rotate(-179deg);transition:all .25s ease}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left #menu-button span.courses-menu span{line-height:36px}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left #menu-button:hover span.courses-menu{background:#025cc3}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left #menu-button:hover span.courses-menu:after{transform:rotate(1deg)}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar{margin-left:16px;width:386px}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .search{display:flex}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .search form{margin-top:0}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .search form input{height:36px}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .search form button.input-search-btn{height:34px !important;width:34px !important}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .searchDropdown{top:37px}header.newTopHeader .container .NewHeaderWrap .links-right{margin-top:0;display:flex;align-items:center}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link{display:flex;align-items:center;margin:0 12px 0 0}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link li{padding:10px 12px;display:flex;align-items:center;position:relative}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link li a{color:#4f4f4f;text-align:right;font-size:14px;font-style:normal;font-weight:500;line-height:normal;transition:all .25s ease}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link li:hover a{color:#1179ef}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link .nav-subMenu-list a.moreLink{min-width:53px;text-align:left;position:relative}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link .nav-subMenu-list a.moreLink:after{content:\&quot; \&quot;;position:absolute;right:0;top:6px;border-top:4px solid #4f4f4f;border-right:4px solid rgba(0,0,0,0);border-left:4px solid rgba(0,0,0,0);transition:all .25s ease}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link .nav-subMenu-list ul.navSub-menu-links{position:absolute;top:36px;right:0;border-radius:0px 0px 8px 8px;background:#fff;box-shadow:0px 4px 4px 0px rgba(0,0,0,.16);display:inline-flex;padding:8px;flex-direction:column;align-items:flex-start;gap:4px;width:176px;display:none}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link .nav-subMenu-list ul.navSub-menu-links li{width:100%;border-bottom:1px solid #e0e0e0;line-height:normal}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link .nav-subMenu-list ul.navSub-menu-links li a{color:#4f4f4f;text-align:right;font-size:14px;font-style:normal;font-weight:400;line-height:normal}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link .nav-subMenu-list ul.navSub-menu-links li:hover a{color:#1179ef}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link .nav-subMenu-list ul.navSub-menu-links li:last-child{border-bottom:0}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link .nav-subMenu-list:hover ul.navSub-menu-links{display:block}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link .nav-subMenu-list:hover .moreLink:after{border-top:4px solid #1179ef;border-right:4px solid rgba(0,0,0,0);border-left:4px solid rgba(0,0,0,0)}header.newTopHeader .container .NewHeaderWrap .links-right .nav-right-link .nav-subMenu-list:hover a.moreLink:after{transform:rotate(180deg)}header.newTopHeader .container .NewHeaderWrap .links-right .login-wrap .login{top:auto;line-height:34px}header.newTopHeader .container .NewHeaderWrap .links-right .login-wrap .logout-wrap{position:relative;min-width:52px}header.newTopHeader .container .NewHeaderWrap .links-right .login-wrap .logout-wrap .logout-cta{border-radius:18px;border:1px solid #fff;background:url(https://www.simplilearn.com/ice9/assets/profile-icon.svgz);box-shadow:0px 4px 4px 0px rgba(0,0,0,.08);width:36px;height:36px;display:flex;transition:all .25s ease}header.newTopHeader .container .NewHeaderWrap .links-right .login-wrap .logout-wrap:after{content:\&quot; \&quot;;position:absolute;right:0;top:16px;border-top:4px solid #272c37;border-right:4px solid rgba(0,0,0,0);border-left:4px solid rgba(0,0,0,0);transition:all .25s ease}header.newTopHeader .container .NewHeaderWrap .links-right .login-wrap .logout-wrap ul.navSub-menu-links{position:absolute;top:36px;right:0;border-radius:0px 0px 8px 8px;background:#fff;box-shadow:0px 4px 4px 0px rgba(0,0,0,.16);display:inline-flex;padding:8px;flex-direction:column;align-items:flex-start;gap:4px;width:176px;display:none}header.newTopHeader .container .NewHeaderWrap .links-right .login-wrap .logout-wrap ul.navSub-menu-links li{width:100%;border-bottom:1px solid #e0e0e0;line-height:normal;padding:10px 8px}header.newTopHeader .container .NewHeaderWrap .links-right .login-wrap .logout-wrap ul.navSub-menu-links li a{color:#4f4f4f;text-align:right;font-size:14px;font-style:normal;font-weight:400;line-height:normal}header.newTopHeader .container .NewHeaderWrap .links-right .login-wrap .logout-wrap ul.navSub-menu-links li:hover a{color:#1179ef}header.newTopHeader .container .NewHeaderWrap .links-right .login-wrap .logout-wrap ul.navSub-menu-links li:last-child{border-bottom:0}header.newTopHeader .container .NewHeaderWrap .links-right .login-wrap .logout-wrap:hover .logout-cta{border:1px solid #1179ef}header.newTopHeader .container .NewHeaderWrap .links-right .login-wrap .logout-wrap:hover ul.navSub-menu-links{display:flex}header.newTopHeader .container .NewHeaderWrap .links-right .login-wrap .logout-wrap:hover:after{transform:rotate(180deg);border-top:4px solid #1179ef}@media(min-width: 992px){.top-sub-menu{display:inline-block;width:100%;text-align:right;background:#e6ecef;min-height:38px}.top-sub-menu a{margin-left:44px;font-size:14px;font-weight:400;display:inline-block;line-height:36px;color:#293031}.top-sub-menu a:hover{color:#118aef}header .search_topbar input{margin-bottom:0}header .logo img{width:auto;height:auto}}header{object-fit:contain;background:#fff;position:relative;box-shadow:0 10px 20px 0 rgba(197,208,216,.2);display:inline-block;width:100%;float:left}header .logo{float:left;width:150px;height:40px;margin-top:13px;margin-right:40px;overflow:hidden;color:#fff}header .logo img{color:#fff}header span.courses-menu{width:146px;cursor:pointer;display:block;float:left;height:38px;padding:0 0 0 52px;background:#118aef;color:#fff;border-radius:4px;line-height:38px;font-size:14px;font-weight:500;position:relative;margin:12px 0}header span.courses-menu::before{content:\&quot;\&quot;;width:20px;height:20px;display:inline-block;background:url(https://www.simplilearn.com/ice9/assets/header-new.svgz) no-repeat;background-position:-110px -21px;position:absolute;left:20px;top:8px}header span.courses-menu span{font-weight:500}header .search_topbar{display:inline-block;width:445px;position:relative;float:left;margin-left:32px;top:6px;top:0}header .search_topbar form{box-shadow:none;margin-top:13px;position:relative;background-clip:padding-box;display:inline-block;width:100%}header .search_topbar input{border-radius:4px;border:1px solid #118aef;height:38px;font-size:14px;color:#118aef;font-weight:400;padding-left:64px;background:0 0;width:100%;float:left;outline:0}header .search_topbar input::placeholder{font-size:14px;color:#118aef;font-weight:400}header .search_topbar input:focus::placeholder{color:rgba(0,0,0,0)}header .search_topbar input[type=search]::-webkit-search-cancel-button{-webkit-appearance:none;height:0px;width:0px}header .search_topbar button{position:absolute;left:0;height:38px;background:0 0;border:0;box-shadow:none;width:52px;cursor:pointer;padding:4px 8px;user-select:none}header .search_topbar button span{text-indent:-9999px;width:25px;height:23px;display:inline-block;background:url(https://www.simplilearn.com/ice9/assets/header-new.svgz) no-repeat;background-position:-66px -20px !important;margin:-1px 5px}header .search_topbar button:focus{outline:0;border:0}header .search_topbar .mobile-close-search{display:none}header .links-right{float:right;margin-top:10px;display:inline-block}header .login{width:100px;line-height:36px;border-radius:4px;border:1px solid #808890;text-align:center;font-size:14px;font-weight:500;color:#808890;float:right;position:relative;top:3px}header .login:hover{border-color:#118aef;color:#118aef}header .after-login{display:inline-block;margin-left:64px;font-size:14px;font-weight:500;line-height:40px;color:#808890;cursor:pointer}header .after-login:hover{color:#118aef}.search-page div#HeaderMenu{z-index:999;position:sticky;top:0}@media(max-width: 1199px){.search-page div#HeaderMenu{position:relative}}@media(max-width: 991px){.hide-sm{display:none}header .logo{height:24px;position:absolute;top:0;right:0;bottom:0;left:0;width:100px;margin:auto}header span.courses-menu{text-indent:-9999px;width:25px;height:23px;display:inline-block;background:url(https://www.simplilearn.com/ice9/assets/header-new.svgz) no-repeat;background-position:-22px -20px;margin:16px 0;padding:0 5px 0 0}header span.courses-menu::before{display:none}header .container{position:initial}header .container::after{content:\&quot; \&quot;;display:block;clear:both}header .links-right{display:none}header .search_topbar{float:right;width:auto;position:static;margin-top:15px}header .search_topbar form{box-shadow:#ccc 0 0 15px;margin-top:0}header .search_topbar form input{color:#000;height:55px;float:left;width:calc(100% - 52px);background-color:#fff;border-radius:2px 0 0px 2px;border:1px solid #d8d8d8;padding:6px 12px;font-weight:300;margin:0}header .search_topbar form input::placeholder{color:#999;font-weight:300}header .search_topbar form button{height:55px;float:left;width:52px;box-shadow:none;background:#118aef;border-color:#118aef;position:inherit;border-radius:0;top:0px;margin:0}header .search_topbar form button span{height:22px;width:22px;display:inline-block;vertical-align:middle;background:url(https://www.simplilearn.com/ice9/assets/header-new.svgz) no-repeat;margin-left:5px;filter:brightness(0) invert(1);-webkit-filter:brightness(0) invert(1);position:relative;top:-2px}header .search_topbar form .mobile-close-search{display:block}header .search_topbar .search.search-enabled form{padding:6px 15px;background:#fff}header .search_topbar .search.search-enabled form input{padding:10px 10px 8px 44px !important;border:1px solid #1179ef;border-radius:8px;color:#1179ef;font-size:16px;height:45px;width:calc(100% - 35px)}header .search_topbar .search.search-enabled form input::placeholder{color:#1179ef;font-size:16px}header .search_topbar .search.search-enabled form button.input-search-btn{left:15px !important;right:auto !important;background:rgba(0,0,0,0) !important;position:absolute;top:8px;padding:0}header .search_topbar .search.search-enabled form button.input-search-btn span{width:23px;display:inline-block;background-position:0 0px !important;margin:0;background:url(https://www.simplilearn.com/ice9/assets/newSearch_icon.svgz) no-repeat !important;filter:none}header .search_topbar .search.search-enabled form button.input-clear-btn{background:url(https://www.simplilearn.com/ice9/assets/search--new-cross.svgz) no-repeat !important;height:18px !important;width:18px !important;background-color:#fff !important;background-position:0 0 !important;margin-top:-1px !important;border-radius:24px;left:auto;right:25px !important;background-repeat:no-repeat;top:14px}header .search_topbar .search.search-enabled form button.input-clear-btn:focus{outline:none}header .search_topbar .search.search-enabled form button.mobile-close-search{background:url(https://www.simplilearn.com/ice9/assets/frs-sprite_4.svgz) !important;height:22px !important;width:22px !important;background-color:#fff !important;background-position:-57px -50px !important;margin-top:0 !important;border-radius:24px;left:auto !important;right:15px !important;top:18px;position:absolute}header .search_topbar .search.search-enabled form button.mobile-close-search:focus{outline:none}header .search_topbar .search.search-enabled .searchDropdown{width:calc(100% - 30px);left:15px;top:63px;z-index:99;display:none}header .search_topbar .search-enabled+.searchDropdown{width:calc(100% - 30px);left:15px;top:53px;z-index:99}header .search_topbar .searchDropdown.active{display:none}header .search_topbar .searchDropdown.active{display:block}header .search_topbar .s_icon{width:24px;height:24px;display:inline-block;background-position:0 0 !important;margin:0;background:url(https://www.simplilearn.com/ice9/assets/newSearch_icon.svgz) no-repeat !important}header .search_topbar .search{position:absolute;top:0px;left:0;right:0;width:100%;z-index:22}header .search_topbar .search form{display:none}header .search_topbar .s_icon+.search-enabled form{display:inline-block;box-shadow:#ccc 0 0 15px;background-clip:padding-box;width:100%}header .search_topbar .search.search-enabled form input#header_srch_default{padding:10px 10px 8px 44px !important}}@media(max-width: 767px){#HeaderMenu .container a.logo{left:56px;right:unset}#HeaderMenu .container nav.links-left .mega-menu-button{right:60px !important}}@media(max-width: 767px){header{display:block;float:none;height:55px}}@media(min-width: 992px)and (max-width: 1199px){header .search_topbar{width:324px}}@media(max-device-width: 1366px){header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar{width:340px}}@media(max-device-width: 1280px){header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar{width:280px}}@media(max-width: 991px){#HeaderMenu .container nav.links-left .mega-menu-button{float:right;margin-top:12px;position:absolute;right:90px}#HeaderMenu .container nav.links-left .mega-menu-button span.courses-mega-menu{width:120px;height:31px;cursor:pointer;display:block;float:left;padding:0 0 0 42px;background:#1179ef;color:#fff;border-radius:4px;line-height:30px;font-size:12px;font-weight:500;position:relative;margin:0 0 12px 0}#HeaderMenu .container nav.links-left .mega-menu-button span.courses-mega-menu::before{content:\&quot;\&quot;;width:20px;height:18px;display:inline-block;background:url(https://www.simplilearn.com/ice9/assets/header-new.svgz) no-repeat;background-position:-110px -22px;position:absolute;left:16px;top:5px}#HeaderMenu .container nav.links-left .mega-menu-button span.courses-mega-menu span{font-weight:500}#HeaderMenu .container .search_topbar .search+.searchDropdown.active{display:none}#HeaderMenu .container .search_topbar .search.search-enabled+.searchDropdown.active{display:block}header.newTopHeader{padding:12px 0}header.newTopHeader .container .NewHeaderWrap .links-right{display:none}header.newTopHeader .container .NewHeaderWrap .header-link-left a.logo{margin:0 24px 0 0;height:36px}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left{order:1}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left #menu-button{right:63px}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left #menu-button span.courses-menu{padding:0px;width:20px;height:20px;margin:0}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .mega-menu-button{right:auto;left:190px}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left div#mega-menu-button{margin:0}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left div#mega-menu-button span.courses-mega-menu{width:100px;padding:0 0 0;margin:0;text-align:center}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left div#mega-menu-button span.courses-mega-menu:before{display:none}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar{width:auto;margin-left:0}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar span.s_icon.toogle-search-icon{position:absolute;right:14px;top:16px}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .search.search-enabled form{padding:10px 15px}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .search.search-enabled form button.input-search-btn{height:30px !important;width:30px !important}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .search.search-enabled form button.input-clear-btn{top:9px !important}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .search.search-enabled form input{padding:0 10px 0 44px !important}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .search-enabled+.searchDropdown.active{top:53px !important}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .search+.searchDropdown.active{display:none}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .search.search-enabled+.searchDropdown.active{display:block}header.newTopHeader .container .NewHeaderWrap .header-link-left a.logo{order:2;position:relative;margin:0 0 0 24px;height:32px;top:3px}}@media(max-width: 767px){#HeaderMenu .newTopHeader .container .header-link-left a.logo{left:auto;right:unset}#HeaderMenu .newTopHeader .container .header-link-left nav.links-left .mega-menu-button{right:52px;left:auto}#HeaderMenu .newTopHeader .container .header-link-left nav.links-left .search_topbar .search.search-enabled button.input-clear-btn{top:9px !important}#HeaderMenu .newTopHeader .container .header-link-left nav.links-left .search_topbar .search.search-enabled button.mobile-close-search{display:block}}@media screen and (max-device-width: 480px){.search.search-enabled .searchDropdown{top:53px !important}header.newTopHeader .container .NewHeaderWrap .header-link-left nav.links-left .search_topbar .search-enabled+.searchDropdown.active{top:53px !important}}.mega-menu-overlay{background:rgba(0,0,0,.6);position:fixed;left:0;height:100%;z-index:999999999;width:100%;margin-top:0}.mega-menu-overlay .mega-menu{width:100%;height:100vh;background:linear-gradient(0deg, rgba(248, 250, 252, 0.35), rgba(248, 250, 252, 0.35)),#fff;border:1px solid rgba(187,187,187,.2);left:0 !important;margin:auto;background:#e9eff5;overflow:hidden;position:absolute;z-index:9999999999;display:flex;top:0;flex-direction:column}.mega-menu-overlay .mega-menu .menu-header{height:48px;display:flex;flex-direction:row;justify-content:space-between;align-items:center;background:#ebf1f8;border:1px solid #dde6ed;box-shadow:0px 2px 5px rgba(0,0,0,.08);padding:0 18px 0 16px}.mega-menu-overlay .mega-menu .menu-header .menu-head-back{min-width:40px;height:40px;background:url(https://www.simplilearn.com/ice9/assets/megamenu_1.svgz) no-repeat;background-position:-14px -11px;margin-top:8px}.mega-menu-overlay .mega-menu .menu-header .menu-head-title{font-weight:500;font-size:14px;color:#272c37;position:relative;left:-24px}@media(max-width: 767px){.mega-menu-overlay{top:0px}}@media(max-width: 991px){.safari.body-fixed-menu{position:inherit !important;overflow:inherit !important}}@media(min-width: 768px)and (max-width: 991px){.mega-menu-overlay{position:fixed;top:0;height:100%}.mega-menu-overlay .mega-menu.isMain{width:calc(100% - 25px)}#MegaMenuLatest .mega-menu-overlay .container .mega-menu.isMain{width:calc(100% - 0px)}}@media(min-width: 768px){.mega-menu-overlay .mega-menu .menu-header .menu-head-title{position:relative;left:-15px}}@media(min-width: 390px)and (max-width: 844px){.mega-menu-overlay .mega-menu.isMain{width:100%}}@media(min-width: 414px)and (max-width: 896px){.mega-menu-overlay .mega-menu.isMain{width:100%}}@media(min-width: 393px)and (max-width: 873px){.mega-menu-overlay .mega-menu.isMain{width:100%}}@media(min-width: 992px){.mega-menu-overlay{position:absolute;margin-top:63px;height:100%}.mega-menu-overlay .mega-menu{flex-direction:row;max-height:540px;height:calc(100vh - 100px);width:868px;position:inherit;min-height:410px;border-left:0}.mega-menu-overlay .mega-menu .menu-header{display:none}.mega-menu-overlay .mega-menu.is-banner{height:410px}.sub-category-menu{position:fixed;top:0;padding-top:0;margin-top:63px;height:100%}}.mega-menu-category::-webkit-scrollbar{width:4px !important}.mega-menu-category::-webkit-scrollbar-track{background:rgba(0,0,0,0) !important}.mega-menu-category::-webkit-scrollbar-thumb{background:#a5b8cd;border-radius:20px !important}.top-sub-menu{position:relative;z-index:99}#HeaderMenu{position:relative;z-index:99}.w-33{max-width:33%;width:100%}.w-66{max-width:66%;width:100%}.w-100{max-width:100%;width:100%}.mr-7{margin-right:7px !important}.d-none{display:none !important}.mb-20{margin-bottom:20px !important}.border-bottom{border-bottom:1px solid #e0e0e0}.trendingNowTag{background:linear-gradient(90deg, #90D736 0%, #119837 100%)}.newLaunchTag{background:linear-gradient(90deg, #36B1D7 0%, #214384 100%)}.mostPopularTag{background:linear-gradient(93deg, #F8AB33 7.97%, #F26D24 99.7%)}.menu-blue-gradient{background:linear-gradient(170deg, rgba(0, 167, 220, 0.2) 0.12%, rgba(121, 221, 253, 0.1) 108.08%),linear-gradient(180deg, #F8FBFF -1.68%, #FFF 48.29%) !important}.menu-yellow-gradient{background:linear-gradient(213deg, rgba(255, 219, 168, 0.2) 46.31%, rgba(245, 171, 64, 0.11) 77.27%),linear-gradient(180deg, #FFF8EE 0%, #FFF 45.27%) !important}.title-blue-gradient{position:relative;z-index:1}.title-blue-gradient:before{width:100%;height:50px;content:\&quot;\&quot;;position:absolute;background:var(--role-gradients, linear-gradient(161deg, rgba(0, 167, 220, 0.2) 1.82%, rgba(121, 221, 253, 0) 7.82%), linear-gradient(180deg, rgba(121, 221, 253, 0.16) -1.68%, #FFF 50%));z-index:-1;top:0;left:0;border-radius:8px 8px 0 0}.title-blue-gradient:after{position:absolute;content:\&quot;\&quot;;width:100%;height:15px;background:#fff;top:-10px;left:0;z-index:-2;right:0}.title-yellow-gradient{position:relative;z-index:1}.title-yellow-gradient:before{width:100%;height:100%;content:\&quot;\&quot;;position:absolute;background:var(--certificate-Gradients, linear-gradient(161deg, rgba(255, 219, 168, 0.2) 1.82%, rgba(245, 171, 64, 0) 7.94%), linear-gradient(180deg, #FFF8EE 0%, #FFF 45.27%));left:0;z-index:-1;top:0;border-radius:8px 8px 0 0}.title-yellow-gradient:after{position:absolute;content:\&quot;\&quot;;width:100%;height:15px;background:#fff;top:-10px;left:0;z-index:-2;right:0}#MegaMenuNew .mega-menu-overlay{z-index:15}div#MegaMenuLatest .mega-menu-overlay{margin-top:62px;z-index:15}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain{background:#ebf1f8;padding:4px 4px 4px 0;border-radius:0 0 8px 8px;box-shadow:0px 0px 8px 0px rgba(0,0,0,.08)}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category{width:280px;box-shadow:none;background:rgba(0,0,0,0);overflow:hidden;overflow-y:auto;position:relative;height:auto}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category:after{content:\&quot;\&quot;;position:sticky;bottom:-3px;left:0;right:0;width:100%;min-height:30px;background:#fff;background:linear-gradient(180deg, rgba(235, 241, 248, 0.19) 0%, rgb(235, 241, 248) 100%)}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category .menu-heading{padding:16px 0 8px 16px;width:100%}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category .category-list{overflow-y:initial !important;padding-bottom:16px;margin-bottom:0;width:100%}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category .category-list ul.objective-list{display:block}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category .category-list li.menu-list{margin-bottom:2px;padding:8px 8px 8px 20px;position:relative}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category .category-list li.menu-list a{font-weight:400;font-size:14px}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category .category-list li.menu-list:after{content:\&quot;\&quot;;display:inline-block;width:8px;height:8px;background:none;opacity:0;border-left:2px solid #272c37;border-bottom:2px solid #272c37;transform:rotate(-135deg);cursor:pointer;right:12px;top:16px;position:absolute;transition:all .2s linear}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category .category-list li.menu-list:hover:after{opacity:1;transform:rotate(-135deg) translate(0px, 2px);border-left:1px solid #1179ef;border-bottom:1px solid #1179ef}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category .category-list li.menu-list.active{background:#fff;padding:8px 8px 8px 16px}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category .category-list li.menu-list.active a{color:#1179ef;font-weight:500 !important}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category .category-list li.menu-list.active:after{opacity:1;border-left:1px solid #1179ef;border-bottom:1px solid #1179ef;transform:rotate(-135deg) translate(0px, 2px)}div#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category .objective-list{margin-bottom:0px;overflow-y:inherit;padding-bottom:8px}div#MegaMenuLatest .mega-menu-overlay .mega-menu{position:relative;animation:animatebottom .4s;max-height:600px;height:600px}div#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner{overflow:hidden;border-radius:8px;height:auto}div#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner{height:calc(100% - 0px)}@keyframes animatebottom{from{top:-300px;opacity:0}to{bottom:0;opacity:1}}.new-mega-menu-program{width:100%;padding:8px 0 8px 8px;display:flex;flex-flow:wrap;min-height:520px}.new-mega-menu-program .new-menu-list{padding:0 0 8px 0;border-radius:8px;overflow:visible;z-index:1}.new-mega-menu-program .new-menu-list .new-megamenu-heading{min-height:44px;width:100%;padding:8px;position:sticky;top:8px;z-index:99;background:#fff}.new-mega-menu-program .new-menu-list .new-megamenu-heading h3{color:#272c37;font-size:14px;font-weight:500;margin:0 0 4px !important;line-height:16px;width:100%;text-transform:initial !important}.new-mega-menu-program .new-menu-list .new-megamenu-heading p{font-size:12px;color:#828282;line-height:14px;margin-bottom:10px;width:100%}.mobile-cate-list{display:none;width:100%;position:sticky;z-index:9;top:0;background:#fff}.mobile-cate-list:after{content:\&quot;\&quot;;display:flex;width:20px;height:30px;background:url(https://www.simplilearn.com/ice9/assets/megamenu_1.svgz) no-repeat;background-position:-140px -12px;position:absolute;right:15px;top:17px;bottom:0;transform:rotate(90deg)}.mobile-cate-list .mobile-select-cate{-webkit-appearance:none;appearance:none;border:1px solid #646464;border-radius:30px;padding:9px 12px;position:relative;height:auto;font-size:12px;color:#646464;font-weight:400;line-height:16px;margin-bottom:0}.mobile-objective-btns{display:none;margin-bottom:13px}.mobile-objective-btns button{padding:10px 12px;font-size:12px;color:#646464;background:#fff;border:1px solid #eee;border-radius:24px;line-height:12px;margin-left:8px;box-shadow:0px 2px 4px 0px rgba(0,0,0,.08);display:inline-block}.mobile-objective-btns button:focus{outline:none}.mobile-objective-btns .cert-active{color:#fff;background:#1179ef;transition:all 250ms cubic-bezier(0.4, 0, 0.23, 1);border:1px solid #1179ef}.new-menu-tagcard{border:1px solid #eee;box-shadow:0px 0px 8px 0px rgba(0,0,0,.1);display:block;padding:8px;max-width:250px;width:100%;border-radius:8px;margin-bottom:8px;transition:all .25s ease;overflow:hidden;background:#fff}.new-menu-tagcard:hover{border:1px solid var(--blue-border, #B8D6FF);box-shadow:0px 2px 2px 0px rgba(0,0,0,.16),0px 0px 4px 0px rgba(0,0,0,.16)}.new-menu-tagcard .program-head img{height:30px;min-height:30px;margin-bottom:12px}.program-card h4{font-size:14px;font-weight:400;color:#202020;min-height:48px;margin-bottom:8px;line-height:16px}.pg-card-bottom{display:flex;align-items:baseline;position:relative;justify-content:space-between}.pg-card-bottom h5{line-height:14px;color:#646464;font-size:12px;text-transform:capitalize}.popular-wrapper-main{position:absolute;bottom:-8px;right:-12px;width:122px;height:24px;overflow:hidden}.popular-wrapper-main .popular-wrap{width:102px;height:24px;transform:skew(-20deg);-webkit-transform:skew(-20deg);-moz-transform:skew(-20deg);-o-transform:skew(-20deg);margin-left:20px;border-top-left-radius:8px;text-align:center;padding:0px;font-size:12px;color:#fff;box-shadow:inset 0 2px 4px rgba(0,0,0,.4)}.popular-wrapper-main .popular-wrap::before{content:\&quot;\&quot;;position:absolute;top:0;width:100%;height:100%;background:var(--Newshine-effect);left:0;z-index:9}.popular-wrapper-main .popular-wrap span{color:#fff;font-weight:500;text-align:center;margin-top:0px;font-size:12px;transform:skew(20deg);-webkit-transform:skew(20deg);-moz-transform:skew(20deg);-o-transform:skew(20deg);text-shadow:0px 0px 4px rgba(0,0,0,.2);display:flex;align-items:center;justify-content:center}.popular-wrapper-main .popular-wrap span.popular-wrap-name{display:none}.popular-wrapper-main .popular-wrap img{position:absolute;height:24px}.w-33 .new-mega-coloum{padding:4px 8px 0}.w-66 .new-mega-coloum{display:flex;flex-flow:wrap;padding:4px 8px 0}.w-66 .new-mega-coloum a.new-menu-tagcard{max-width:250px;width:100%}.w-66 .new-mega-coloum a.new-menu-tagcard:nth-child(2n+1){margin-right:16px}.w-100 .new-mega-coloum{display:flex;flex-flow:wrap;width:100%;border-radius:8px;overflow:hidden;padding:4px 8px 0}.w-100 .new-mega-coloum a.new-menu-tagcard{max-width:250px;width:100%;margin-right:16px}.w-100 .new-mega-coloum a.new-menu-tagcard:nth-child(3n+0){margin-right:0px}.w-100.partner-menu .title-blue-gradient:before{height:40px}.w-100.partner-menu .new-mega-coloum{background:rgba(0,0,0,0)}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard{max-width:23%;margin-right:16px;min-width:185px;padding:8px 0 0}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard:nth-child(4n+0){margin-right:0px}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard .program-card{text-align:center}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard .program-card .program-head{width:100%;min-height:40px;margin-bottom:8px}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard .program-card .program-head img{height:40px;min-height:40px;width:100%;object-fit:contain;margin:0;max-width:calc(100% - 16px)}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard .program-card h4{width:100%;margin:0;min-height:40px;height:40px;display:flex;align-items:center;justify-content:center;background:#f8fbff;font-size:13px;padding:8px}.menu-explore-btn{background:rgba(0,0,0,0);width:100%;display:flex;align-items:center;justify-content:flex-end;padding:12px}.menu-explore-btn a{color:#2f80ed;border:1px solid #2f80ed;padding:14px 40px;border-radius:4px;font-size:14px;line-height:14px;font-size:14px;line-height:14px;font-weight:normal;transition:all .25s ease;text-align:center}.menu-explore-btn a:hover{background:#1179ef;color:#fff !important}.menu-explore-btn a:focus{outline:none}.blue-gradient .new-mega-menu-rowhead h4:before{background:#1179ef}.og-gradient .new-mega-menu-rowhead h4:before{background:#ff8000}.new-megamenu-row{display:flex;flex-flow:wrap;width:100%;padding:12px 0}.new-megamenu-row .new-mega-menu-rowhead{width:calc(100% - 30px);display:flex;align-items:center;justify-content:space-between;margin-bottom:12px}.new-megamenu-row .new-mega-menu-rowhead h4{color:#424242;font-size:14px;font-weight:500;line-height:16px;position:relative}.new-megamenu-row .new-mega-menu-rowhead h4:before{content:\&quot;\&quot;;width:2px;height:18px;position:absolute;left:-6px;z-index:9;top:0;bottom:0}.new-megamenu-row .new-mega-menu-rowhead a{font-size:12px;color:#4f4f4f;line-height:14px}.new-megamenu-row .new-mega-menu-rowhead a:hover{color:#1179ef}.new-megamenu-row .new-megamenu-row-content{display:flex;align-items:center;width:100%;flex-flow:wrap}.new-megamenu-row .new-megamenu-row-content a.new-menu-tagcard{margin-right:9px}.new-megamenu-row .new-mega-menu-rowbottom{display:none;width:100%;text-align:center}.new-megamenu-row .new-mega-menu-rowbottom a{font-size:12px;color:#4f4f4f;line-height:14px;padding:8px;display:block}.new-megamenu-row .new-mega-menu-rowbottom a:hover{color:#1179ef}.new-megamenu-row.remove-extra-padding{padding:0}:root{--Newshine-degree: 120deg;--Newshine-color: rgba(255, 255, 255, 0.5);--Newshine-effect: linear-gradient( var(--Newshine-degree), transparent, var(--Newshine-color), transparent );--Newshine-transition: all 1s ease-in-out}.btn-anim::before{animation:Newshine 5s ease-in-out infinite}@-webkit-keyframes Newshine{0%{left:-100%;transition-property:left}11.5044247788%,100%{left:100%;transition-property:left}}@keyframes Newshine{0%{left:-100%;transition-property:left}11.5044247788%,100%{left:100%;transition-property:left}}@media screen and (min-width: 1400px){.w-66{max-width:65%}.w-33{max-width:32%}#HeaderMenu #topHeader .container{width:1370px;max-width:1370px}#MegaMenuLatest .mega-menu-overlay .container{width:1370px;max-width:1370px}.new-mega-menu-program .new-menu-list.w-33 .new-mega-coloum{padding:4px 8px 0}.new-mega-menu-program .new-menu-list.w-33 .new-mega-coloum .new-menu-tagcard{max-width:307px;margin-right:0}.new-mega-menu-program .new-menu-list.w-33.mr-7{margin-right:24px !important}.new-mega-menu-program .new-menu-list.w-66.mr-7{margin-right:24px !important}.new-mega-menu-program .new-menu-list.w-66.mr-7 .new-menu-tagcard{margin-right:0}.new-mega-menu-program .new-menu-list.w-66 .new-menu-tagcard{max-width:307px}.new-mega-menu-program .new-menu-list.w-66 .new-menu-tagcard:nth-child(2n+1){margin-right:16px}.new-mega-menu-program .new-menu-list .new-menu-tagcard{max-width:307px;min-width:307px;min-height:fit-content}.new-mega-menu-program .new-megamenu-row .new-mega-menu-rowhead{width:calc(100% - 50px)}.pg-card-bottom{display:flex;align-items:flex-start;position:relative;width:100%}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard{max-width:23%;margin:0 16px 16px 0;min-width:230px;padding:8px 0 0}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard:nth-child(4n+0){margin-right:0px}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard .program-card{text-align:center}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard .program-card .program-head{width:100%}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard .program-card .program-head img{height:40px;min-height:40px;width:100%;object-fit:contain;margin:0 0 8px;max-width:calc(100% - 16px)}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard .program-card h4{width:100%;margin:0;min-height:40px;display:flex;align-items:center;justify-content:center;background:#f8fbff;font-size:14px}.new-menu-tagcard{border:1px solid #eee;box-shadow:0px 0px 8px 0px rgba(0,0,0,.1)}.new-menu-tagcard .program-card h4{font-size:16px;line-height:20px;min-height:60px}}@media screen and (min-width: 992px){.border-top{border-top:1px solid #e0e0e0}.refer-earn{position:relative;z-index:99;background:#fff}footer .foot-socials a.refer-earn{background:rgba(0,0,0,0)}div#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner{height:calc(100% - 0px);display:flex;flex-flow:wrap}.resource-page div#MegaMenuLatest .mega-menu-overlay{margin-top:62px !important}div#MegaMenuLatest .mega-menu-overlay.sub-category-menu{margin-top:62px !important}.master-page-new div#MegaMenuLatest .mega-menu-overlay,.shedule-page div#MegaMenuLatest .mega-menu-overlay{margin-top:0 !important}.new-mega-menu-program .new-menu-list{min-height:85%}}@media(min-width: 1280px)and (max-width: 1366px){.w-66 .new-mega-coloum a.new-menu-tagcard:nth-child(2n+1){margin-right:8px}.w-100.partner-menu .new-mega-coloum,.w-100 .new-mega-coloum,.w-66 .new-mega-coloum,.w-33 .new-mega-coloum{padding-top:8px}.new-mega-menu-program .new-menu-list .new-megamenu-heading p{margin-bottom:0px}.w-100 .new-mega-coloum a.new-menu-tagcard,.w-66 .new-mega-coloum a.new-menu-tagcard,.w-33 .new-mega-coloum a.new-menu-tagcard{max-width:260px}.new-mega-menu-program{min-height:470px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu{width:100% !important;max-height:550px;height:550px}.new-menu-list.mr-7{margin-right:16px !important}.new-mega-menu-program .new-menu-list.w-66{max-width:65%}}@media(min-width: 992px)and (max-width: 1180px){div#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner{display:block}.w-33{max-width:100%}.w-66{max-width:100%}.w-66 .new-mega-coloum a.new-menu-tagcard{max-width:49%;width:100%}.w-100 .new-mega-coloum a.new-menu-tagcard{width:100%;max-width:49%}.new-mega-menu-program{min-height:520px}.new-mega-menu-program .new-menu-list{display:block;margin-right:0 !important}.new-mega-menu-program .new-menu-list .new-mega-coloum{width:100%;display:flex;align-items:center;flex-flow:wrap}.new-mega-menu-program .new-menu-list .new-mega-coloum .new-menu-tagcard{max-width:49%;width:100%;margin-right:9px}.new-mega-menu-program .new-menu-list .new-mega-coloum .new-menu-tagcard:nth-child(2n+1){margin-right:9px}.new-mega-menu-program .new-menu-list .new-mega-coloum .new-menu-tagcard:nth-child(2n+0){margin-right:0}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard{max-width:49%}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard:nth-child(4n+0){margin-right:0px}}@media(min-width: 992px){#MegaMenuLatest .mega-menu-overlay .container .mega-menu{width:97%}}@media(max-width: 991px){.w-33{max-width:100%;width:100%;margin-right:0 !important}.w-33 .new-mega-coloum{display:flex;flex-flow:wrap;padding:0 8px}.w-33 .new-mega-coloum a.new-menu-tagcard{max-width:49%;width:100%;margin-right:9px}.w-33 .new-mega-coloum a.new-menu-tagcard:nth-child(2n+0){margin-right:0px}.w-66{max-width:100%;margin-right:0 !important}.w-66 .new-mega-coloum a.new-menu-tagcard{max-width:49%;width:100%}.w-66 .new-mega-coloum a.new-menu-tagcard:nth-child(2n+1){margin-right:9px}.w-100 .new-mega-coloum{overflow:visible}.w-100 .new-mega-coloum a.new-menu-tagcard{max-width:49%}.w-100 .new-mega-coloum a.new-menu-tagcard:nth-child(2n+0){margin-right:0px}.w-100 .new-mega-coloum a.new-menu-tagcard:nth-child(2n+1){margin-right:9px}.w-100 .new-mega-coloum a.new-menu-tagcard:nth-child(4n+0){margin-right:0px}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard{max-width:49%;margin-right:9px;padding:0px}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard:nth-child(2n+0){margin-right:0px}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard:nth-child(4n+0){margin-right:0px}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard .program-card .program-head{padding:8px}.w-100.partner-menu .new-mega-coloum a.new-menu-tagcard .program-card h4{padding:0 8px;font-size:10px;line-height:14px;min-height:36px;background-color:#f8fbff}.new-menu-list.w-100.blue-gradient:before,.new-menu-list.w-100.og-gradient:before{background:rgba(0,0,0,0)}.new-mega-coloum a.new-menu-tagcard .program-head img{height:24px;min-height:24px;margin-bottom:8px}#MegaMenuLatest .mega-menu-overlay{margin-top:0px !important;z-index:99999999 !important}#MegaMenuLatest .mega-menu-overlay .container{width:100%;padding:0}#MegaMenuLatest .mega-menu-overlay .container .mega-menu.isMain{padding:0;background-color:#fff}#MegaMenuLatest .mega-menu-overlay .container .mega-menu.isMain ul.objective-list{display:none}#MegaMenuLatest .mega-menu-overlay .container .mega-menu{background:#fff;padding:0;position:relative;animation:none;max-height:initial;height:100vh;border:0}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .menu-header{margin:4px 8px 0px;border-radius:6px;border:0;box-shadow:none;padding:2px 0px;height:44px;position:relative}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .menu-header:after{content:\&quot;\&quot;;position:absolute;height:8px;z-index:99999999;background:#fff;width:100%;bottom:-8px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .menu-header .menu-head-back{background-position:-120px -6px;margin-top:0;transform:rotate(180deg)}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .menu-header .menu-head-title{color:#202020;left:auto}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .menu-header .menu-head-title .menu-objective-title{display:flex;align-items:center;flex-flow:wrap;justify-content:center;width:100%;font-size:10px;line-height:12px;text-align:center}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .menu-header .menu-head-title .menu-objective-title b{width:100%;font-size:14px;font-weight:500;color:#202020;line-height:16px;margin-bottom:2px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .menu-header span.menu-head-close{width:40px;height:40px;background:url(https://www.simplilearn.com/ice9/assets/megamenu_1.svgz) no-repeat;background-position:-87px -9px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .menu-header.menu-yellow-gradient:after{display:none}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .menu-header.menu-blue-gradient:after{display:none}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category{width:100% !important;box-shadow:none;padding:0 8px 40px;z-index:9}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category:after{display:none}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category .menu-heading{padding:12px 0 12px 8px;line-height:16px;width:100%;margin:8px 0 8px;text-align:left}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.category-list{padding-bottom:0px;margin:0 0 24px;border-bottom:0}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.category-list li.menu-list.menu-list-program:after{opacity:1;width:10px;height:10px;top:15px;right:24px;border-left:1px solid #313131;border-bottom:1px solid #313131}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.category-list li.menu-list.menu-list-program.active:after{border-left:1px solid #1179ef;border-bottom:1px solid #1179ef}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.category-list li.menu-list{padding:8px 8px 8px 20px;margin-bottom:8px;height:32px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.category-list li.menu-list a{font-weight:400 !important}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.category-list li.menu-list:last-child{margin-bottom:0px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.category-list li.menu-list.active{padding:8px 8px 8px 16px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.category-list li.menu-list-cate::after{content:\&quot;\&quot;;display:inline-block;width:10px;height:10px;background:none;opacity:1;border-left:1px solid #272c37;border-bottom:1px solid #272c37;transform:rotate(-135deg);cursor:pointer;right:10px;top:13px;position:absolute;transition:all .2s linear}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.category-list li.menu-list.menu-list-main{padding:12px 8px 12px 20px;margin-bottom:16px;height:40px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.category-list li.menu-list.menu-list-main:nth-child(1){margin-top:16px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.category-list li.menu-list.menu-list-main:nth-child(1):before{content:\&quot;\&quot;;position:absolute;height:1px;background:#f4f4f4;width:100%;left:-3px;right:0;bottom:-16px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.category-list li.menu-list.menu-list-main.active{padding-left:16px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-program-main-conatiner{border-radius:0;border:0;height:100%}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner{height:calc(100% - 0px)}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program{padding:0 8px 8px;display:block;min-height:initial}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .partner-menu{margin-top:10px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .new-menu-list .new-megamenu-heading{position:relative;top:auto}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .new-menu-list.hideCta .new-megamenu-heading{top:8px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .new-menu-list.hideCta .new-mega-coloum{z-index:99;position:relative}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mobile-cate-list{display:block;padding:8px 8px 8px 8px;margin-bottom:0px;background:#fff;top:0px;z-index:999999999}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mobile-objective-btns{display:block;width:100%;position:sticky;z-index:999999999;background:#fff;padding:8px 0;top:0px;margin:4px 0 5px 0}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner.mega-menu-bottom-padding{padding-bottom:65vh}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner.mega-menu-space-issue{padding-bottom:25vh}@keyframes fadeInUp{from{transform:translate3d(0, 30px, 0)}to{transform:translate3d(0, 0, 0);opacity:1}}@keyframes fadeInDown{from{transform:translate3d(0, 0, 0);opacity:1}to{transform:translate3d(0, 20px, 0);opacity:0}}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .select-menu{position:relative;display:block}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .select-menu .select-btn{display:flex;border:1px solid #646464;border-radius:24px;background:#fff;color:#646464;padding:6px 12px;font-size:12px;line-height:20px;align-items:center;cursor:pointer;justify-content:space-between;box-shadow:0px 0px 4px 0px rgba(0,0,0,.08)}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .select-menu .options{position:absolute;width:100%;overflow-y:auto;max-height:70vh;padding:12px 8px;margin:4px 0 0;border-radius:16px;background:#fff;box-shadow:0px 0px 8px 0px rgba(0,0,0,.08);animation-name:fadeInDown;-webkit-animation-name:fadeInDown;animation-duration:.35s;animation-fill-mode:both;-webkit-animation-duration:.35s;-webkit-animation-fill-mode:both;display:none}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .select-menu .options .option{display:flex;cursor:pointer;padding:8px;align-items:center;background:#fff;margin-bottom:8px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .select-menu .options .option .option-text{font-size:12px;color:#313131;line-height:14px}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .select-menu.active .options{display:block;opacity:1;z-index:10;animation-name:fadeInUp;-webkit-animation-name:fadeInUp;animation-duration:.4s;animation-fill-mode:both;-webkit-animation-duration:.4s;-webkit-animation-fill-mode:both}#MegaMenuLatest .w-100.partner-menu .new-mega-coloum,#MegaMenuLatest .w-100 .new-mega-coloum,#MegaMenuLatest .w-66 .new-mega-coloum,#MegaMenuLatest .w-33 .new-mega-coloum{padding-top:8px}}@media only screen and (min-device-width: 567px)and (max-device-width: 991px)and (-webkit-min-device-pixel-ratio: 2)and (orientation: landscape){#MegaMenuLatest .mega-menu-overlay .container .mega-menu{flex-flow:wrap;min-height:100%}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category{height:100% !important}#MegaMenuLatest .mega-menu-overlay .container .mega-menu .mega-menu-category ul.objective-list{display:block}}@media(max-width: 767px){.w-33{max-width:100%}.w-66{max-width:100%}.mr-7{margin-right:0px !important}#MegaMenuLatest .mega-menu-overlay .mega-menu{background:#fff;padding:0;position:relative;animation:none;max-height:initial;height:100vh}#MegaMenuLatest .mega-menu-overlay .mega-menu .menu-header{margin:4px 8px 0px;border-radius:6px;border:0;box-shadow:none;padding:2px 0px;height:44px}#MegaMenuLatest .mega-menu-overlay .mega-menu .menu-header .menu-head-back{background-position:-120px -6px;margin-top:0;transform:rotate(180deg)}#MegaMenuLatest .mega-menu-overlay .mega-menu .menu-header .menu-head-title{color:#202020}#MegaMenuLatest .mega-menu-overlay .mega-menu .menu-header span.menu-head-close{min-width:40px;height:40px;background:url(https://www.simplilearn.com/ice9/assets/megamenu_1.svgz) no-repeat;background-position:-87px -9px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-category{width:100%;overflow-y:auto}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-category ul.category-list{margin-top:0px;overflow-y:visible;margin-bottom:0;padding-bottom:16px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-category ul.category-list li.menu-list-cate{padding:8px 26px 8px 24px;margin-bottom:8px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-category ul.category-list li.menu-list-cate:after{height:32px;background:url(https://www.simplilearn.com/ice9/assets/megamenu_1.svgz) no-repeat;background-position:-128px -11px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-category ul.category-list .menu-list-main{height:40px;margin-bottom:16px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-category ul.category-list .menu-list-program.menu-list-main{position:relative}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner{border:0px;padding:0px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mobile-cate-list{display:block;padding:0 8px 8px 8px;margin-bottom:10px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mobile-objective-btns{display:block}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program{padding:0 8px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .new-menu-list .new-mega-coloum a.new-menu-tagcard .program-card h4{min-height:32px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .w-33 .new-mega-coloum .new-menu-tagcard{margin-right:0px !important;max-width:100%}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .w-66 .new-mega-coloum a.new-menu-tagcard{max-width:100%}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .w-66 .new-mega-coloum a.new-menu-tagcard:nth-child(2n+1){margin-right:0px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .w-100 .new-mega-coloum a.new-menu-tagcard{max-width:100%;margin-right:0px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .w-100 .new-mega-coloum a.new-menu-tagcard:nth-child(2n+1){margin-right:0px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .new-megamenu-row{width:100%}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .new-megamenu-row .new-mega-menu-rowhead{width:100%}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .new-megamenu-row .new-mega-menu-rowhead a{display:none}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .new-megamenu-row .new-mega-menu-rowbottom{display:block}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .w-100.partner-menu .new-mega-coloum a.new-menu-tagcard{max-width:48%;min-width:150px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .w-100.partner-menu .new-mega-coloum a.new-menu-tagcard:nth-child(2n+1){margin-right:9px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .w-100.partner-menu .new-mega-coloum a.new-menu-tagcard .program-card .program-head img{height:32px;min-height:32px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .select-menu{position:relative;display:block}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .select-menu .select-btn{display:flex;border:1px solid #646464;border-radius:24px;background:#fff;color:#313131;padding:6px 12px;font-size:12px;line-height:20px;align-items:center;cursor:pointer;justify-content:space-between;box-shadow:0 0 5px rgba(0,0,0,.1)}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .select-menu .options{position:absolute;width:100%;overflow-y:auto;max-height:70vh;padding:12px 8px;margin:4px 0 0;border-radius:16px;background:#fff;box-shadow:0 0 10px rgba(0,0,0,.1);animation-name:fadeInDown;-webkit-animation-name:fadeInDown;animation-duration:.35s;animation-fill-mode:both;-webkit-animation-duration:.35s;-webkit-animation-fill-mode:both;display:none}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .select-menu .options .option{display:flex;cursor:pointer;padding:8px;align-items:center;background:#fff;margin-bottom:8px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .select-menu .options .option .option-text{font-size:12px;color:#313131;line-height:14px}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .new-mega-menu-program .select-menu.active .options{display:block;opacity:0;z-index:10;animation-name:fadeInUp;-webkit-animation-name:fadeInUp;animation-duration:.4s;animation-fill-mode:both;-webkit-animation-duration:.4s;-webkit-animation-fill-mode:both}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .menu-explore-btn a{color:#2f80ed;width:100%}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner.mega-menu-bottom-padding{padding-bottom:45vh}#MegaMenuLatest .mega-menu-overlay .mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner.mega-menu-space-issue{padding-bottom:20vh}#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain{border-radius:0 !important;background-color:#fff !important}#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .mega-menu-category{padding:0}#MegaMenuLatest .mega-menu-overlay .mega-menu.isMain .menu-header span.menu-head-close{background:none}#MegaMenuLatest .mega-menu ul.objective-list{display:block}#MegaMenuLatest .mega-menu.isMain ul.objective-list{display:none}}.mega-menu .mega-menu-category{background:#fff;width:auto;height:100%;box-shadow:0px 4px 8px rgba(0,0,0,.16);display:flex;flex-direction:column;align-items:flex-start;padding:0px 0px 0px;z-index:999999999}.mega-menu .mega-menu-category .menu-heading{color:#272c37;text-transform:uppercase;padding:21px 0 8px 24px;font-weight:500;font-size:16px;line-height:20px}.mega-menu .mega-menu-category ul.category-list{width:100%;margin-top:22px;overflow-y:auto;padding-bottom:24px}.mega-menu .mega-menu-category ul.category-list::-webkit-scrollbar{width:4px}.mega-menu .mega-menu-category ul.category-list::-webkit-scrollbar-track{background:rgba(0,0,0,0)}.mega-menu .mega-menu-category ul.category-list::-webkit-scrollbar-thumb{background:#a5b8cd;border-radius:20px}.mega-menu .mega-menu-category ul.category-list li.menu-list{padding:0px 26px 24px;font-size:12px;cursor:pointer;box-sizing:border-box;display:flex;flex-direction:row;align-items:center;color:#272c37 !important}.mega-menu .mega-menu-category ul.category-list li.menu-list a{font-weight:400;font-size:12px;line-height:20px;color:inherit}.mega-menu .mega-menu-category ul.category-list li.menu-list-main{padding:8px 24px;height:36px}.mega-menu .mega-menu-category ul.category-list li.menu-list-main a{font-weight:500;font-size:14px;line-height:16px}.mega-menu .mega-menu-category ul.category-list li.menu-list-cate{position:relative}.mega-menu .mega-menu-category ul.category-list li.menu-list-cate a{font-size:14px;line-height:16px}.mega-menu .mega-menu-category ul.category-list li.menu-list-cate::after{content:\&quot;\&quot;;display:inline-block;width:20px;height:20px;background:url(https://www.simplilearn.com/ice9/assets/megamenu_1.svgz) no-repeat;background-position:-128px -18px;position:absolute;right:20px;top:0px}.mega-menu .mega-menu-category ul.category-list li.menu-list-program{position:relative}.mega-menu .mega-menu-category ul.category-list li.menu-list-program::after{content:\&quot;\&quot;;display:inline-block;width:20px;height:20px;background:url(https://www.simplilearn.com/ice9/assets/megamenu_1.svgz) no-repeat;background-position:-128px -18px;position:absolute;right:20px;top:11px}.mega-menu .mega-menu-category ul.category-list li.menu-list.active{padding:8px 20px;background:#f1f7fd;border-left:4px solid #1179ef;position:relative}.mega-menu .mega-menu-category ul.category-list li.menu-list.active::after{content:\&quot;\&quot;;display:inline-block;width:20px;height:20px;background:url(https://www.simplilearn.com/ice9/assets/megamenu_1.svgz) no-repeat;background-position:-128px -18px;position:absolute;right:9px;top:9px}@media(min-width: 768px){.mega-menu .mega-menu-category ul.category-list li.menu-list{padding:0px 24px 24px}.mega-menu .mega-menu-category ul.category-list li.menu-list-program::after{top:0px}}@media(min-width: 992px){.mega-menu .mega-menu-category{width:250px}.mega-menu .mega-menu-category ul.category-list{width:inherit;margin-top:0px}.mega-menu .mega-menu-category ul.category-list li.menu-list{padding:8px 24px;height:36px}.mega-menu .mega-menu-category ul.category-list li.menu-list:hover{color:#1179ef !important}}.mega-menu .mega-menu-program-main-conatiner{width:100%;height:100%;padding-right:2px;background:#fff;border:1px solid rgba(187,187,187,.2)}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner{height:calc(100% - 64px);overflow-y:auto}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner::-webkit-scrollbar{width:4px}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner::-webkit-scrollbar-track{background:rgba(0,0,0,0)}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner::-webkit-scrollbar-thumb{background:#a5b8cd;border-radius:20px}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program{display:grid;grid-template-columns:100%;column-gap:10px;row-gap:10px;padding:21px 16px 60px 16px}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program .program-card{box-sizing:border-box;display:flex;flex-direction:column;padding:15px;height:131px;background:#fff;box-shadow:0px 3px 11px rgba(0,0,0,.08);border-radius:6px;position:relative;border:1px solid rgba(181,209,241,.4)}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program .program-card .program-head{display:flex;width:100%;height:32px}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program .program-card .program-head img{width:auto;max-height:32px;height:fit-content}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program .program-card .program-head .program-tags{width:100%;display:flex;justify-content:end;align-items:baseline}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program .program-card .program-head .program-tags .program-tag{display:flex;flex-direction:row;justify-content:center;align-items:center;padding:4px 8px;gap:10px;width:auto;height:18px;left:194px;top:0px;text-transform:capitalize;border-radius:2px;font-weight:700;font-size:10px;line-height:10px;color:#fff;text-shadow:0px 1px 2px rgba(37,43,46,.36)}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program .program-card h2{width:auto;height:32px;font-weight:500;font-size:14px;line-height:16px;margin-top:12px;letter-spacing:normal}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program .program-card .cohort-wrap{font-weight:500;font-size:12px;line-height:16px;margin-top:12px;color:#272c37;position:absolute;margin-bottom:12px;bottom:0}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program .program-card .cohort-wrap .cohort-split{margin-left:5px;color:#d2d6de;font-size:14px;margin-right:5px}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program .program-card .cohort-wrap .cohort-month{text-transform:capitalize}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program .program-card:hover{border:1px solid rgba(17,121,239,.4);box-shadow:-2px 3px 11px 0px rgba(0,0,0,.12)}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program .program-card:active{border:1px solid rgba(17,121,239,.4);box-shadow:-2px 3px 11px 0px rgba(0,0,0,.12)}.mega-menu .mega-menu-program-main-conatiner .explore-btn{height:62px;width:100%;position:absolute;bottom:0;background:#f4fbff;box-shadow:0px -2px 4px rgba(0,0,0,.25);display:flex;justify-content:center;align-items:center;padding:10px 15px}.mega-menu .mega-menu-program-main-conatiner .explore-btn a{background:#fff;border:1px solid #1179ef;border-radius:4px;border-radius:4px;color:#1179ef;font-weight:500;font-size:16px;padding:0 15px;text-align:center;line-height:40px}@media(max-width: 767px){.mega-menu .mega-menu-program-main-conatiner .explore-btn a{font-size:14px}}@media(max-width: 991px){.mega-menu .mega-menu-program-main-conatiner .explore-btn{position:fixed}.mega-menu-overlay{top:0px;bottom:0px;right:0px}#MegaMenuNew{position:relative;z-index:999999999}}@media(min-width: 768px){.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program{grid-template-columns:50% 50%}.mega-menu .mega-menu-program-main-conatiner .explore-btn{position:absolute;box-shadow:0px -2px 6px rgba(0,0,0,.08)}}@media(min-width: 992px){.mega-menu .mega-menu-program-main-conatiner{position:relative;width:calc(100% - 250px)}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner{height:calc(100% - 56px)}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program{grid-template-columns:50% 50%;row-gap:15px;padding:21px 16px}.mega-menu .mega-menu-program-main-conatiner .mega-menu-program-conatiner .mega-menu-program .program-card{width:283px;padding:12px}.mega-menu .mega-menu-program-main-conatiner .explore-btn{background:#f4fbff;box-shadow:0px -2px 6px rgba(0,0,0,.08)}.mega-menu .mega-menu-program-main-conatiner .explore-btn a{font-weight:600;font-size:12px;line-height:14px;padding:9px 15px}.mega-menu .mega-menu-program-main-conatiner .explore-btn a:hover{background:#1179ef;border:1px solid #1179ef;color:#fff}}.mega-menu .widget-main{width:272px;background:#fff;height:100%;box-shadow:2px 6px 18px rgba(0,0,0,.1);padding:21px 16px 14px}.footer_date{font-size:5px;text-align:center;color:rgba(255,255,255,.5);margin-bottom:35px}footer{background:#1a1a1a;width:100%;color:#fff}footer .brand-courses{display:inline-block;width:100%;border-top:1px solid #969696;margin-top:48px;margin-bottom:56px !important;color:#969696;letter-spacing:.02em}footer .brand-courses p{color:#fff;font-size:16px;font-weight:400;margin-top:48px;margin-bottom:16px}footer .brand-courses a{color:#969696;font-size:14px;display:inline !important;margin:0 4px}footer .brand-courses p+a{margin-left:0}footer .follow-us{margin-bottom:11px;font-size:16px;color:#fff;font-weight:400}footer a{color:rgba(255,255,255,.5);font-size:14px;line-height:20px;padding-bottom:10px;display:block}footer .col-md-2{padding:0 15px}footer .foot_company,footer .footer_workus{width:50%;float:left}footer .footer_discover{display:inline-block;width:100%;padding-bottom:20px}footer .footer_discover div{width:50%;float:left}footer .footer_discover div:last-child{padding-left:15px}.mobile-footer{background:#000;text-align:center;padding:10px 0;cursor:pointer;display:none}.mobile-footer p{margin-bottom:2px}.mobile-footer p:after{content:\&quot;\&quot;;display:inline-block;width:24px;height:24px;background:var(--home-sprite) no-repeat -392px -231px;margin-left:25px;position:relative;margin-bottom:-8px}.footer-container{padding-top:60px;padding-bottom:15px}footer .foot-socials{text-align:center;padding-bottom:40px}footer .foot-socials a.refer-earn{color:#ccc;font-size:14px;font-weight:500;width:120px;display:block;margin:0 auto 20px;line-height:36px;border:1px solid #777;border-radius:5px;padding:0}footer .foot-socials a.refer-earn:hover{background:#000}footer .foot-socials a.share{margin:0 6px 4px 0;display:inline-block;height:33px;width:33px;vertical-align:top;background:#353535 var(--footer-sprite) no-repeat;border-radius:50%}footer .foot-socials a.lazy{background-image:none !important}footer .foot-socials a.facebook{background-position:-8px -52px}footer .foot-socials a.facebook:hover{background-color:#4c67a1}footer .foot-socials a.twitter{background-position:-76px -50px}footer .foot-socials a.twitter:hover{background-color:#55acee}footer .foot-socials a.youtube{background-position:-115px -50px}footer .foot-socials a.youtube:hover{background-color:#de2925}footer .foot-socials a.linkedin{background-position:-38px -50px}footer .foot-socials a.linkedin:hover{background-color:#1b86bd}footer .foot-socials a.telegram{background:#353535 var(--footer-telegram-sprite) no-repeat;background-position:6px 9px;border-radius:50%}footer .foot-socials a.telegram:hover{background-color:#1b86bd}footer .foot-socials a.insta{background-image:none}footer .foot-socials a.insta span{display:inline-block;width:20px;height:20px;background:var(--footer-sprite) no-repeat;background-position:-92px -18px;position:relative;top:6px;left:6px}footer .foot-socials a.insta:hover{background-image:radial-gradient(circle at 23% 84%, #f9ed32, #f8d939 5%, #f5a54d 17%, #f0536c 33%, #ee2a7b 40%, #9e2aa7 56%, #5b2acd 72%, #2a2ae8 85%, #0b2af9 95%, #002aff)}footer .footer-disc{text-align:center;padding-bottom:15px}footer .footer-disc a{width:185px;display:block;color:#ccc;margin:0 auto;font-size:14px;font-weight:300;border:1px solid #777;line-height:32px;border-radius:5px 5px 0px 0px;padding:7px 0}footer .footer-disc a:hover{background:#000}footer .footer-disc a:before{content:\&quot;\&quot;;width:24px;height:24px;display:inline-block;background:var(--footer-sprite) no-repeat;float:left;position:relative;left:12px;top:5px;background-position:-18px -19px}footer .footer-disc a.ios-app{border-top:0;border-radius:0 0 5px 5px}footer .footer-disc a.ios-app:before{background-position:-54px -19px}.simpli_terms{padding:0;text-align:center}.simpli_terms li{padding:0;list-style:none;display:inline-block}.simpli_terms li a{padding:0 3px;font-size:14px;color:rgba(255,255,255,.5)}.simpli_terms li h2{color:rgba(255,255,255,.5);font-size:12px;font-weight:400;margin-top:0}.simpli_terms .copy_rights{display:block;color:rgba(255,255,255,.5);font-size:12px;font-weight:400}.resource-page .simpli_terms li:nth-of-type(4)::after{display:none}.resource-page .simpli_terms li:nth-of-type(3)::after{display:none}.resource-page .simpli_terms li#footer-country{display:block}.disc-section#disclaimers{background:#1a1a1a;border-top:0}.container.disclam-container{padding-top:30px;padding-bottom:70px}.container.disclam-container ul{margin-left:20px;margin-right:20px;list-style:none;padding:0}.disc-section#disclaimers ul li{color:#6d6d6d;font-size:10px;line-height:normal;margin-bottom:10px;padding-left:10px;position:relative}.disc-section#disclaimers ul li a{pointer-events:all;color:#6d6d6d;text-decoration:underline}.disc-section#disclaimers ul li:before{content:\&quot;\&quot;;width:4px;height:4px;background:#777;border-radius:100%;margin:4px 0 0;position:absolute;left:0}.disc-section#disclaimers ul li:first-child{color:#fff;font-size:14px;margin:0 0 12px;padding-left:0}.disc-section#disclaimers ul li:first-child:before{display:none}.footer-end{width:100%;display:inline-block}.sticky-footer-gdpr{background:#0b0b0b;bottom:-150px;display:inline-block;position:fixed;right:0;width:100%;z-index:2;height:43px;transition:all .2s ease;-webkit-transition:all .2s ease;-moz-transition:all .2s ease;-o-transition:all .2s ease}.sticky-footer-gdpr a{color:#fff}.active-sticky-footer{bottom:-1px}#sticky-footer-gdpr{bottom:43px}.footer_sticky_bar{position:relative}.footer_sticky_bar a{display:inline-block;font-weight:400;line-height:17px;padding:4px 18px 0;position:relative;width:auto;font-size:13px}.footer_sticky_bar .how_it_works{padding:10px 8px 5px;cursor:pointer;line-height:25px}.footer_sticky_bar .how_it_works:before{background:var(--home-sprite) no-repeat;background-position:-245px -161px;background-color:rgba(0,0,0,0);content:\&quot;\&quot;;display:inline-block;height:28px;margin-right:10px;vertical-align:middle;width:28px}.footer_sticky_bar .form-checkbox a{padding:0 4px 0;font-size:14px}.footer_sticky_wrapper a:hover,.footer_sticky_bar .how_it_works:hover{border-bottom:2px solid #00a7dc}.footer_sticky_wrapper .live_chat_div li.call_no_stiky a:hover{border-bottom:0}.footer_sticky_bar .live_chat_div{width:875px}.aap_icon{background:var(--home-sprite) no-repeat;display:inline-block}.aap_icon.call_us_on{background-position:-313px -163px;width:25px}.live_chat_div li{vertical-align:middle;color:#fff;float:left;font-size:13px;margin-right:0}.live_chat_div li.callback_link{width:auto}.live_chat_div .call_no_stiky{padding-right:10px;display:none}.live_chat_div li.btn_active_green{width:133px}.live_chat_div li.live_chat_icon{background:#00a7dc;border-bottom:2px solid #00a7dc}.live_chat_div li.live_chat_icon a{padding:12px 18px 6px 0}.live_chat_div .chat_icon_footer{background-position:-348px -166px;width:40px}.live_chat_div .live_text_chat{display:inline-block}.live_chat_div span{float:left;height:21px;margin:2px 0 0 10px;vertical-align:middle;display:inline-block}.live_chat_div a.sticky_request_call{padding:15px 18px 6px 0;border-bottom:2px solid rgba(0,0,0,0)}.live_chat_div a.sticky_request_call:hover{border-bottom:2px solid #00a7dc}.live_chat_div .call_back_footer{background-position:-282px -165px;width:25px;height:22px;margin-top:-3px}.callbackleadform{border-top-left-radius:5px;border-top-right-radius:5px;z-index:1}#footer-country{position:relative;font-size:14px;color:rgba(255,255,255,.5)}#footer-country a.country-flg{border:1px solid #494440;border-radius:3px;display:inline-block;line-height:20px;padding:5px;margin:0 10px}#footer-country a.country-flg img{width:auto}#footer-country .dropdown_country{border:0px solid #e6ecef;position:absolute;right:15px;top:-279px;width:250px;background:#fff;z-index:1;height:279px;overflow-x:hidden}#footer-country .dropdown_country a{padding:4px 10px;font-size:14px;color:#000;white-space:normal;display:block;clear:both;font-weight:300;line-height:1.42857143;text-align:left}#footer-country .dropdown_country a:nth-child(10){border-bottom:1px dotted #222}#footer-country .dropdown_country a:hover{background:#fff4ca}footer .footer-links .simpli_certification ul.simpli_terms li:nth-child(4)::after{display:none}footer .footer-links .simpli_certification ul.simpli_terms li:nth-child(3)::after{display:none}@media(max-width: 767px){#footer-country .dropdown_country{right:-15px}footer .foot-socials a.insta span{left:-1px}footer .footer_discover{margin-top:50px}footer .brand-courses{border-top:0px;margin:0 15px;width:auto}footer .brand-courses p{margin-top:64px;margin-bottom:24px}.mobile-footer{display:block}}@media(max-width: 991px){footer a{padding-bottom:15px}footer .foot-socials a.desktop{display:none}}@media(max-width: 991px){footer .brand-courses{margin:0 15px;width:auto}footer .brand-courses p{margin-top:64px}}@media(min-width: 992px){.closeFooterCallBackForm{display:inline-block;background:#1e1e1e;width:100%;position:relative;border-top-left-radius:5px;border-top-right-radius:5px}.closeFooterCallBackForm a{border-bottom:2px solid #0892c2;display:block;padding:10px 0;text-align:left;width:100%;color:#fff;padding-left:35px;font-size:13px;font-weight:300}.closeFooterCallBackForm a::after{content:\&quot;\&quot;;border:none;height:3px;background:#fff;padding:0;position:absolute;right:9px;top:19px;width:14px}.footer-end-top{margin-top:32px}}.eu-container+.active-sticky-footer{bottom:65px}.simpli_terms #footer-country a.country-flg:focus+div.dropdown_country{display:block}ul.simpli_terms li#footer-country:after{display:none}ul.simpli_terms li.country-address{width:100%}ul.simpli_terms li.country-address h2{display:block;font-size:12px;color:rgba(255,255,255,.5);margin-bottom:0;padding:0 25px;line-height:24px;margin-top:15px}@media(min-width: 768px){.eu-container+.active-sticky-footer{bottom:43px}.col-md-2{width:33.333%;float:left}.simpli_terms{width:100%;display:inline-block;margin-bottom:0}.simpli_terms li a{display:inline-block}.simpli_terms li:after{content:\&quot;\&quot;;width:5px;height:5px;background:#b3b3b3;border-radius:100%;display:inline-block;margin-right:10px;margin-left:15px}.simpli_terms li:nth-last-child(1):after,.simpli_terms li:nth-last-child(2):after{display:none}footer .foot-socials{text-align:left;max-width:155px}footer .foot-socials a.refer-earn{text-align:center}footer .foot_company{width:33%;margin-left:9%}footer .footer_workus{margin-left:0;width:30%}footer .footer_discover{width:62%}.disc-section#disclaimers{border-top:1px solid rgba(70,69,69,.45)}footer .simpli_terms #footer-country{position:relative;padding-left:34px}footer .simpli_terms #footer-country::before{content:\&quot;\&quot;;width:5px;height:5px;background:#b3b3b3;border-radius:100%;display:inline-block;margin-right:10px;margin-left:15px;position:absolute;left:0;top:16px;vertical-align:middle}}@media(min-width: 992px){footer .simpli_terms li a{color:rgba(253,253,253,.9)}footer .simpli_terms #footer-country{color:rgba(253,253,253,.9)}footer .foot_company{width:18%;margin-left:5%}footer .footer_workus{width:18%}footer .footer_discover{width:18%}footer .footer_discover div{width:100%}footer .footer_discover div:last-child{padding-left:0}footer .footer-disc{width:23%}footer .footer-container a{display:table}.footer_sticky_bar .live_chat_div{width:615px}.live_chat_div{float:right;list-style:none;margin:0 -3px 0 0;padding:0}.live_chat_div li{vertical-align:middle;color:#fff;float:left;font-size:13px;margin-left:75px}.live_chat_div li.live_chat_icon{float:right}.live_chat_div li.live_chat_icon a img{margin-left:10px;margin-right:16px;height:21px}.footer_sticky_bar .mobile_lead_wrapper{display:none !important}footer .foot-socials a.mobile{display:none}}.footer_date{font-size:16px;text-align:center;margin-bottom:45px;color:rgba(0,0,0,0);visibility:hidden}@media(min-width: 1200px){footer .foot_company{width:14%;margin-left:3%}footer .footer_workus{width:18%}footer .footer_discover{width:32%}footer .footer_discover div{width:50%}footer .footer-disc{width:19%;padding-right:0}footer .footer-disc a{margin-right:0}.footer_sticky_bar .live_chat_div{width:875px}.footer_sticky_bar .live_chat_div li{margin-left:90px}.footer_sticky_bar .live_chat_div li:first-child{margin-left:0}.call_no_stiky{line-height:33px;padding:7px 20px 0 0}.live_chat_div .call_no_stiky{padding-right:20px;display:block}footer .foot-socials{padding-left:0}footer .foot-socials a.refer-earn{margin-left:0}}.g_id_onload{position:fixed;top:213px;right:11px;z-index:99999999}#google_onetap_appened{position:fixed;top:110px;height:109px;width:375px;border-radius:8px;z-index:99999999;right:19px;background:#fff;padding:10px 15px;border:1px solid #e1e6ea}#google_onetap_appened h3{font-style:normal;font-weight:700;font-size:20px;line-height:30px;color:#202124}#google_onetap_appened p{text-align:left;float:left;margin-right:15px;margin-left:6px;font-style:normal;font-weight:400;font-size:13px;line-height:15px;padding:5px 0px}#google_onetap_appened .ml-12{margin-left:12px}#google_onetap_appened p::before{content:\&quot;\&quot;;width:14px;height:14px;display:inline-block;position:relative;top:3px;left:-6px;background:var(--home-sprite-new) no-repeat;background-position:-150px -21px}@media(max-width: 767px){#google_onetap_appened{right:0px;top:unset;width:100%;bottom:242px}.g_id_onload{right:-7px}}.home-page #offerbanner{display:none}.home-page h2{font-size:24px;font-weight:300;line-height:1.42;letter-spacing:1px;color:#272c37;max-width:280px}.home-page .subtext{margin-top:12px;font-size:14px;line-height:1.71;color:#51565e;padding-right:20px}.home-page .ul-iners{overflow:hidden;width:100%}.home-page .ul-iners ul{min-width:45000px;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-bottom:4px}.home-page .ul-iners ul li{width:330px;padding-right:20px;position:relative;float:left;padding-bottom:12px}.c_arrow{display:none}.view-more-btn-fixed{text-align:center;margin-left:auto;margin-right:auto;margin-top:12px;display:block;width:80px;margin-bottom:24px}.view-more-btn-fixed .view-more-btn{display:table;width:80px;border-radius:4px;overflow:hidden;background-color:#d8d8d8;table-layout:fixed}.view-more-btn-fixed .view-more-btn span{display:table-cell;min-width:1px;height:4px;cursor:default;vertical-align:middle;pointer-events:none;border-radius:4px;border:0;margin:0;padding:0;background:rgba(0,0,0,0);font-size:0;color:rgba(0,0,0,0);line-height:0}.view-more-btn-fixed .view-more-btn span.active_tab{width:36px;height:4px;background-color:#1179ef;border-radius:4px}#homepageitemslider{margin-top:32px}@media(min-width: 768px){.home-page h2{max-width:100%;font-size:28px}.home-page .subtext{margin-top:16px}.home-page .ul-iners ul li{width:340px;padding-right:30px}.no-slider-tab .view-more-btn-fixed{display:none}}@media(min-width: 992px){.no-slider-desk .view-more-btn-fixed{display:none}.home-page h2{font-size:32px;line-height:normal}.home-page .subtext{font-size:16px}.c_arrow{display:block}.view-more-btn-fixed{position:relative;overflow:visible;margin-top:24px}.view-more-btn-fixed span.c_arrow{position:absolute;width:38px;height:38px;display:inline-block;border-radius:50%;cursor:pointer;color:rgba(0,0,0,0);font-size:0;top:0;bottom:0;margin:auto;background:var(--home-sprite-new) no-repeat}.view-more-btn-fixed span.c_prev{background-position:-109px -231px;left:-58px}.view-more-btn-fixed span.c_prev:hover{background-position:-197px -164px;-ms-transform:rotate(180deg);-webkit-transform:rotate(180deg);transform:rotate(180deg)}.view-more-btn-fixed span.c_prev.hide-btn{background-position:-209px -232px;pointer-events:none;cursor:default;-ms-transform:rotate(180deg);-webkit-transform:rotate(180deg);transform:rotate(180deg)}.view-more-btn-fixed span.c_next{right:-58px;background-position:-168px -232px}.view-more-btn-fixed span.c_next:hover{background-position:-199px -164px}.view-more-btn-fixed span.c_next.hide-btn{background-position:-211px -232px;pointer-events:none;cursor:default}}a.play-anim{display:block;width:100%;max-width:344px;height:216px;cursor:pointer;background:url(https://www.simplilearn.com/ice9/assets/home/laptop_3.png) no-repeat;background-position:0 0;background-size:100%;margin:0 auto;position:relative}a.play-anim:focus,a.play-anim:active,a.play-anim:visited,a.play-anim:hover{border:0;outline:rgba(0,0,0,0);outline:0 none !important}a.play-anim::before,a.play-anim::after{content:\&quot;\&quot;;display:inline-block;background:var(--home-sprite-new) no-repeat;position:absolute;left:0;right:0;top:0;bottom:0;margin:auto}a.play-anim::before{width:50px;height:50px;background-position:-32px -67px;border-radius:50%;z-index:1;box-shadow:0 2px 6px 0 rgba(0,0,0,.25)}a.play-anim::after{content:\&quot;\&quot;;width:90px;height:90px;background-position:-12px -47px;-webkit-animation:intro 2s infinite;animation:intro 2s infinite;-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}@keyframes intro{from{-webkit-transform:scale(0.5);transform:scale(0.5)}50%{-webkit-transform:scale(0.9);transform:scale(0.9)}to{-webkit-transform:scale(0.5);transform:scale(0.5)}}a.play-anim::-moz-focus-inner{border:0;outline:0;border-color:rgba(0,0,0,0)}@media(min-width: 992px)and (max-width: 1199px){.home-page .ul-iners ul li{width:316px;padding-right:15px}}@media(min-width: 1200px){.home-page .ul-iners ul li{width:389px}#HeaderMenu{display:inline-block;min-height:62px;width:100%;float:left}#HeaderMenu header.sticky-top{position:fixed;top:0;animation:smoothScroll .3s forwards;-webkit-animation:smoothScroll .3s forwards;z-index:99}#HeaderMenu header.sticky-top .search_topbar input[type=search]{font-size:14px;color:#118aef;font-weight:400}#HeaderMenu header.sticky-top .search_topbar::placeholder{font-size:14px;color:#118aef;font-weight:400}#HeaderMenu header.sticky-top .search_topbar:focus::placeholder{color:rgba(0,0,0,0)}#HeaderMenu.sticky-minimize+#MegaMenu #megamenu-box{position:fixed;margin-top:0;top:63px}}@keyframes smoothScroll{0%{top:-100px}100%{top:0}}@media(max-width: 767px){.pgp-slider+.Slider .sliderh4{margin-top:56px}.no-slider .view-more-btn-fixed{display:none}div.banner a.play-anim{bottom:0}}.banner{background:#8b5338 url(https://www.simplilearn.com/ice9/assets/home/banner_v1.jpg) no-repeat;padding-top:56px;color:#fff;background-size:cover}.banner a.play-anim{background-position:0 3px;position:relative;bottom:-1px}.banner h1{font-size:34px;line-height:1.35;letter-spacing:1.59px;text-shadow:0 2px 6px rgba(0,0,0,.4);font-weight:700}.banner ul{margin-top:16px;margin-bottom:0}.banner li{line-height:1.86;font-size:14px;text-shadow:0 2px 4px rgba(0,0,0,.3);font-weight:300}.banner li b{font-weight:700}.banner .jwp{width:100%;height:100%;padding:23px 16px 2px 16px}.banner .jwp .jwplayer{width:100% !important;height:100% !important;z-index:1;float:left}.right-clm{text-align:center}.btn{display:block;margin:48px auto 48px auto;width:274px;line-height:44px;box-shadow:0 4px 5px 2px rgba(0,0,0,.2);background:#1179ef;color:#fff;border-radius:6px;text-align:center;font-size:16px;font-weight:500}.btn:hover{background:#0a5dc9}@media(min-width: 768px){.banner{display:inline-block;width:100%;padding-top:64px}.banner h1{font-size:44px;line-height:1.32;letter-spacing:1.5px;padding-left:15px}.banner ul{padding-left:15px}.banner li{font-size:16px;line-height:1.88}.banner .jwp{padding:39px 29px 2px 29px}.btn{margin-top:56px;width:338px;line-height:48px;font-size:18px}.right-clm a{width:583px;height:382px;max-width:100%}}@media(min-width: 992px){.banner{padding-top:80px;background-position:center top}.banner .jwp{padding:30px 23px 2px 23px}.banner h1,.banner ul{padding-left:0}.banner h1{font-size:50px;line-height:1.28}.banner li{font-size:18px;line-height:1.67}.banner .left-clm{width:475px;display:inline-block;margin-right:0px}.banner .left-clm .btn{margin-bottom:56px;margin-top:40px}.banner .right-clm{width:calc(100% - 475px);vertical-align:bottom;display:inline-block}.banner .right-clm a{height:305px;width:465px}.btn{width:260px;margin-left:0}}@media(min-width: 1200px){.banner .jwp{padding:39px 29px 2px 29px}.banner .left-clm{width:495px}.banner .right-clm{width:calc(100% - 495px)}.banner .right-clm a{height:382px;width:583px;margin-right:0}}.partner{text-align:center;padding-top:24px;padding-bottom:40px;min-height:276px}.partner p{padding-left:40px;padding-right:40px;font-size:14px;color:#51565e;line-height:1.57;margin-bottom:32px}.partner img{max-width:100%;height:auto;width:auto}.partner .tab,.partner .desktop{display:none}@media(min-width: 768px){.partner{padding-top:32px;min-height:210px}.partner p{padding:0;line-height:normal;font-size:16px;margin-bottom:34px}.partner .mobile{display:none}.partner .tab{display:inline-block}}@media(min-width: 992px){.partner{padding-bottom:44px;min-height:162px}.partner .tab{display:none}.partner .desktop{display:inline-block}}#partner-image{display:inline-block;height:32px;width:1135px}@media(max-width: 991px){#partner-image{height:85px;width:591px}}@media(max-width: 767px){#partner-image{height:141px;width:338px}}.bg-clr{background:#f8fbff;padding-top:56px;padding-bottom:32px;background-image:linear-gradient(to bottom, #f8fbff 10%, #ffffff 100%)}.bg-clr .container{padding-right:0}.sliderh4{margin-top:32px;font-size:18px;letter-spacing:.5px;color:#272c37;font-weight:700}.pgp-slider ul.key-list{margin-bottom:0;margin-top:16px}.pgp-slider ul.key-list li{position:relative;padding-left:22px;margin-bottom:12px;font-size:14px;color:#51565e;line-height:normal}.pgp-slider ul.key-list li::before{content:\&quot;\&quot;;width:14px;height:14px;display:inline-block;position:absolute;top:1px;left:0;background:var(--home-sprite-new) no-repeat;background-position:-150px -21px}.pgp-slider ul.key-list li:last-child{margin-bottom:0}.university-slider{margin-top:32px}.university-slider .review-list{height:100%}@media(min-width: 768px){.bg-clr{padding-top:64px;padding-bottom:40px}.pgp-slider ul.key-list{margin-top:20px}.pgp-slider ul.key-list li{margin-bottom:10px}.pgp-slider ul.key-list li:last-child{margin-bottom:0}.Slider+.Slider .sliderh4{margin-top:64px}}@media(min-width: 768px)and (max-width: 991px){.bg-clr .container{width:100%;padding-left:30px}}@media(min-width: 992px){.sliderh4{font-size:24px;margin-top:40px}.Slider+.Slider .sliderh4{margin-top:72px}.pgp-slider ul.key-list{margin-top:24px}.pgp-slider ul.key-list li{margin-bottom:0;display:inline-block;margin-right:25px}.pgp-slider ul.key-list li:last-child{margin-right:0}.university-slider{margin-top:40px}.bg-clr .container{padding-right:15px}}.review-list{width:100%;box-shadow:0 2px 5px 0 rgba(17,121,239,.15);border-radius:6px;border:1px solid #e6ecef;background:#fff;transition:all .5s ease}.review-list a{display:inline-block;width:100%;height:100%;padding-bottom:86px;position:relative}.review-list:hover{box-shadow:0 2px 20px 0 rgba(17,121,239,.2)}.review-list .slider-img{height:174px;text-align:center;background:rgba(0,66,141,.3);border-radius:6px;overflow:hidden}.review-list img{max-width:100%;width:100%;height:auto}.review-list .slider-info{margin:-24px 10px 0 10px;background:#fff;position:relative;border-radius:6px;padding:24px 10px 0 10px}.review-list .slider-info h4{font-size:16px;line-height:1.5;color:#272c37;font-weight:700}.review-list .slider-info h4 div{font-size:16px;line-height:1.5;color:#272c37;font-weight:700}.review-list .info-list{margin-top:16px}.review-list .info-list span{display:block;position:relative;padding-left:26px;font-size:14px;font-weight:500;color:#51565e;margin-bottom:14px;line-height:normal}.review-list .info-list span::before{content:\&quot;\&quot;;width:14px;height:14px;display:inline-block;position:absolute;top:1px;left:0;background:var(--home-sprite-new) no-repeat;background-position:-84px -21px}.review-list .info-list span:last-child{margin-bottom:0}.review-list .info-list span:last-child::before{background-position:-117px -21px}.review-list .pgp-info{position:absolute;bottom:24px;left:20px}.review-list .pgp-info img{max-height:30px;width:auto}@media(min-width: 1200px){.review-list a{padding-bottom:94px}.review-list .slider-img{height:202px}.review-list .slider-info{padding-left:15px;padding-right:15px}.review-list .slider-info h4{font-size:18px;line-height:1.44}.review-list .slider-info h4 div{font-size:18px;line-height:1.44}.review-list .info-list{margin-top:24px}.review-list .info-list span{font-size:16px}.review-list .pgp-info{left:25px}}.master-card{display:inline-block;width:100%;height:100%;border-radius:6px;box-shadow:0 2px 5px 0 rgba(17,121,239,.15);border:1px solid #e6ecef;overflow:hidden;background:#fff;transition:all .5s ease}.master-card:hover{box-shadow:0 2px 20px 0 rgba(17,121,239,.2)}.grd-1{background:#ff5d63;background-image:radial-gradient(circle at 28% 36%, #ff9195, #ff5d63 66%)}.grd-2{background:#0099c3;background-image:radial-gradient(circle at 28% 36%, #00c5e3, #0099c3 99%)}.grd-3{background:#d2ac00;background-image:radial-gradient(circle at 38% 32%, #f4c652, #d2ac00 92%)}.grd-4{background:#00bba6;background-image:radial-gradient(circle at 28% 36%, #00dcc3, #00bba6 66%)}.grd-5{background:#8661df;background-image:radial-gradient(circle at 28% 36%, #a889f2, #8661df 66%)}.grd-6{background:#d550ab;background-image:radial-gradient(circle at 29% 37%, #ed82cb, #d550ab 68%)}.img_th_bundle{height:70px;padding-left:15px}.img_th_bundle span{width:75px;height:80px;display:inline-block;background:var(--home-sprite-new) no-repeat;background-position:-113px -53px;position:relative;top:16px}.bundle-info{padding:32px 15px 16px 15px}.bundle-info h4{font-size:16px;font-weight:700;line-height:1.5;color:#272c37}.bundle-info h4 div{font-size:16px;font-weight:700;line-height:1.5;color:#272c37}.bundle-info .info{margin-top:16px;color:#51565e;margin-bottom:10px;display:inline-block;width:100%}.bundle-info .info span{display:inline-block;line-height:normal;padding-left:25px;position:relative;font-size:14px}.bundle-info .info span::before{content:\&quot;\&quot;;width:14px;height:14px;display:inline-block;position:absolute;top:1px;left:0;background:var(--home-sprite-new) no-repeat;background-position:-84px -21px}.bundle-info .info span:nth-child(2){margin-left:15px;padding-left:40px}.bundle-info .info span:nth-child(2)::before{background-position:-50px -20px;left:15px}.bundle-info .info span:nth-child(2)::after{display:inline-block;content:\&quot;\&quot;;width:1px;height:16px;position:absolute;left:0;background:#d2d6de}.bundle-info p{font-size:14px;color:#51565e;margin-top:14px;padding-left:25px;line-height:normal;position:relative}.bundle-info p b{font-weight:700}.bundle-info p::before{content:\&quot;\&quot;;width:14px;height:14px;display:inline-block;position:absolute;top:1px;left:0;background:var(--home-sprite-new) no-repeat;background-position:-18px -21px}@media(min-width: 1200px){.bundle-info{padding:32px 25px;padding-bottom:16px}.bundle-info h4{font-size:18px;line-height:1.44}.bundle-info h4 div{font-size:18px;line-height:1.44}.bundle-info .info{margin-bottom:8px}.bundle-info .info span{font-size:16px}.bundle-info p{margin-top:16px;font-size:14px}}.course-wrap .sliderh4{margin-top:56px}.course-wrap .slid-detail{margin-top:32px}.course-list a{display:inline-block;width:100%;border-radius:6px;box-shadow:0 2px 5px 0 rgba(17,121,239,.15);border:1px solid #e6ecef;background:#fff;padding:12px 20px;position:relative;margin-bottom:16px;transition:all .5s ease;min-height:146px}.course-list a:hover{box-shadow:0 2px 20px 0 rgba(17,121,239,.2)}.course-list a::before{content:\&quot;\&quot;;width:5px;height:35px;display:inline-block;position:absolute;top:15px;left:0}.course-list a:last-child{margin-bottom:0}.course-list .cr-1::before,.course-list .cr-4::before{background:#ff8c90}.course-list .cr-1:nth-last-child(odd)::before,.course-list .cr-4:nth-last-child(odd)::before{background:#00d8c0}.course-list .cr-2::before,.course-list .cr-5::before{background:#00c3e1}.course-list .cr-2:nth-last-child(odd)::before,.course-list .cr-5:nth-last-child(odd)::before{background:#a686f1}.course-list .cr-3::before,.course-list .cr-6::before{background:#f1c44a}.course-list .cr-3:nth-last-child(odd)::before,.course-list .cr-6:nth-last-child(odd)::before{background:#ed80ca}.course-list h4{font-size:16px;font-weight:700;color:#272c37;line-height:1.5;min-height:48px}.course-list h4 div{font-size:16px;font-weight:700;color:#272c37;line-height:1.5;min-height:48px}.course-list span.type{display:inline-block;margin-top:14px;background:#e2edf9;line-height:22px;padding:0px 10px;font-size:12px;color:#6c7480;text-transform:uppercase;position:relative}.course-list span.type::after{content:\&quot;\&quot;;display:inline-block;width:15px;height:22px;background:var(--home-sprite-new) no-repeat;background-position:-309px -57px;position:absolute;right:-15px}.course-list .rating-wrap{display:block;margin-top:16px;line-height:normal}.course-list .rating-wrap span{font-size:12px;color:#636363}.course-list .rating-wrap .rating::before{content:\&quot;\&quot;;display:inline-block;width:14px;height:14px;background:var(--home-sprite-new) no-repeat;background-position:-183px -21px;vertical-align:middle;margin-top:-2px;margin-right:5px}.course-list .rating-wrap .lrns{position:relative}.course-list .rating-wrap .lrns::before{content:\&quot;\&quot;;width:1px;height:14px;background:#d2d6de;position:absolute;left:0;top:0;display:none}.course-list .rating-wrap .rating+.lrns{margin-left:15px;padding-left:15px}.course-list .rating-wrap .rating+.lrns::before{display:inline-block}@media(min-width: 992px){.course-wrap .sliderh4{margin-top:72px}}@media(min-width: 1200px){.course-list a{padding:16px 25px;margin-bottom:24px;min-height:154px}.course-list a:last-child{margin-bottom:0}.course-list h4{font-size:18px;line-height:1.44;min-height:52px}.course-list h4 div{font-size:18px;line-height:1.44;min-height:52px}.course-list span.type{margin-top:12px}.course-list .rating-wrap{margin-top:14px}}@media(max-width: 767px){.course-list .rating-wrap{width:calc(100% + 12px)}}.bg-grad-dn{background:#f8fbff linear-gradient(to top, #f8fbff 10%, #ffffff 100%)}.pad-t-b{padding-top:64px;padding-bottom:80px}#reviews .left-clm{display:inline-block;width:455px;vertical-align:bottom}#reviews .rating li{padding-top:37px}#reviews .rating li a{display:table;text-align:left;color:inherit}#reviews .rating li a&gt;*{display:table-cell;vertical-align:middle}#reviews .rating li a img{width:auto;height:auto;max-width:100%}#reviews .rating li a span.count{display:block;font-size:8px;line-height:normal;color:#272c37;font-weight:700;padding-left:3px}#reviews .rating li a span.count b{font-weight:700;display:inline-block}#reviews .rating .val{font-weight:700;font-size:40px;line-height:50px;width:130px;position:relative;color:#272c37}#reviews .rating .val::before{content:\&quot;\&quot;;position:absolute;right:32px;top:50%;margin-top:-24px;height:48px;border-right:1px solid #bdc6d9}#reviews .rating .val::after{content:\&quot;\&quot;;display:inline-block;background:rgba(0,0,0,0) url(https://www.simplilearn.com/ice9/assets/home/sprite.svgz) no-repeat -183px -21px;width:13px;height:13px}#reviews .right-clm{display:inline-block;width:calc(100% - 455px)}#reviews .right-clm a{background:url(https://www.simplilearn.com/ice9/assets/home/alumni-video_v1.jpg) no-repeat;background-size:100% 100%}#reviews .jwp{width:100%;height:100%}#reviews .jwp .jwplayer{width:100% !important;height:100% !important;z-index:1;float:left}#reviews a.play-anim{width:100%;max-width:344px;height:201px}@media(max-width: 991px){#reviews .left-clm{width:100%}#reviews .left-clm ul{margin-bottom:0}#reviews .left-clm ul li{padding-top:20px}#reviews .right-clm{width:100%;margin-top:48px}#reviews .rating .val{font-size:28px;width:104px}#reviews .rating .val::before{height:40px;top:0;bottom:0;margin:auto}}@media(min-width: 768px)and (max-width: 991px){#reviews h2 br{display:none}#reviews .left-clm ul li{padding-top:0;padding-right:45px;display:inline-block}#reviews .rating{margin-top:40px}#reviews .rating .val{width:auto;padding-right:30px}#reviews .rating .val::before{right:15px}#reviews .rating img{max-height:40px}}@media(max-width: 767px){.pad-t-b{padding-top:56px;padding-bottom:56px}}@media(min-width: 768px){#reviews a.play-anim{width:708px;height:415px;max-width:100%}}@media(min-width: 992px){#reviews a.play-anim{width:485px;height:285px;margin-right:0}}@media(min-width: 1200px){#reviews a.play-anim{width:639px;height:375px}}@media(min-width: 992px)and (max-width: 1199px){#reviews .left-clm{width:360px}#reviews .right-clm{width:calc(100% - 360px)}#reviews .right-clm a.play-anim{width:580px;height:341px}}.reviews{padding-bottom:32px}.reviews h2{margin-bottom:32px}.reviews .container{padding-right:0}.reviews .review-card{width:100%;background:#fff;border-radius:4px;box-shadow:0 2px 8px 0 rgba(0,0,0,.1);position:relative;padding:20px 30px 56px 20px;height:100%}.reviews .review-card::after{width:100%;content:\&quot;\&quot;;height:6px;background-color:#0a5dc9;background-image:linear-gradient(92deg, #128aef, #0a5dc9);position:absolute;bottom:0;left:0;border-radius:0 0 4px 4px}.reviews .review-card .profile{width:80px;height:80px;border:4px solid #fff;box-shadow:0 10px 20px 0 rgba(141,169,188,.2);border-radius:50%;display:block;margin:0 auto;position:relative;margin-left:0}.reviews .review-card .profile img{width:100%;height:100%;border-radius:50%}.reviews .review-card .profile:after{display:inline-block;content:\&quot;\&quot;;width:26px;height:26px;background:var(--sub-course-sprite) no-repeat;background-position:-18px -289px;position:absolute;bottom:0;right:-6px}.reviews .review-card .profile.disableClass{pointer-events:none}.reviews .review-card .profile.disableClass::after{display:none}.reviews .review-card h3{margin-top:20px;letter-spacing:0;font-size:14px;font-weight:400;color:#51565e}.reviews .review-card h3+span{font-size:16px;line-height:normal;display:inline-block;width:100%;margin-top:8px;color:#272c37;font-weight:400}.reviews .review-card h3+span b{font-weight:700}.reviews .review-card p{margin-top:20px;font-size:14px;line-height:1.71;color:#51565e}.reviews .review-card p b{font-weight:700}@media(min-width: 768px){.reviews{padding-bottom:40px}.reviews .ul-iners ul li{width:585px;padding-right:0}.reviews .review-card{width:551px;padding-bottom:40px;padding-right:40px}.reviews .review-card .profile{float:left}.reviews .review-card .info{float:left;width:calc(100% - 80px);text-align:left;padding:0 0px 0 20px}.reviews .review-card .info h3{margin-top:0}.reviews .review-card .info h3+span{margin-top:14px}.reviews .review-card p{display:inline-block;width:100%;text-align:left;font-size:16px;line-height:1.75}}@media(max-width: 991px){.reviews .container{width:100%}}@media(min-width: 992px){.reviews h2{margin-bottom:40px}.reviews .ul-iners ul li{width:490px}.reviews .ul-iners ul li .review-card{width:456px}}@media(min-width: 1200px){.reviews .ul-iners ul li{width:585px}.reviews .ul-iners ul li .review-card{width:551px;padding:24px 30px 66px 30px}}@media(max-width: 1199px)and (min-width: 992px){.reviews .container{width:100%;padding-left:35px}.reviews .ul-iners ul li{width:585px}.reviews .ul-iners ul li .review-card{width:555px}}.home-page div.ey-slide{position:static}.home-page .partner{padding-top:0}.home-page .card{position:relative}.home-page .card .ul-iners ul li.home-bootcamp,.home-page .card .ul-iners ul li.ai-banner{width:100vw !important;height:auto;position:relative;padding-bottom:0;display:inline-block;padding-right:0}.home-page .card .ul-iners ul li.home-bootcamp .main-banner,.home-page .card .ul-iners ul li.ai-banner .main-banner{padding:32px 15px 0 15px}.home-page .card .ul-iners ul li.ai-banner{background:#052a54 url(\&quot;https://www.simplilearn.com/ice9/assets/Ey-banner-bg.jpg\&quot;) no-repeat;background-size:cover;background-attachment:fixed;background-position:center;background-repeat:no-repeat}.home-page .card .ul-iners ul .ai-left-info{text-align:center}.home-page .card .ul-iners ul .ai-left-info&gt;span{font-weight:700;font-size:16px;line-height:19px;color:#fff;text-align:left;display:block}.home-page .card .ul-iners ul .ai-left-info p{font-size:28px;line-height:40px;color:#fff;letter-spacing:-0.5px;text-align:left}.home-page .card .ul-iners ul .ai-left-info p span{color:#ffad72;font-weight:700}.home-page .card .ul-iners ul .ai-left-info .ai-process-home{margin-top:30px;text-align:left;position:relative}.home-page .card .ul-iners ul .ai-left-info .ai-process-home&gt;span{font-weight:400;font-size:14px;line-height:21px;color:#f8fbff}.home-page .card .ul-iners ul .ai-left-info .ai-process-home img{width:auto;height:auto;max-height:40px;margin-left:20px;position:absolute;top:-10px}.home-page .card .ul-iners ul .ai-left-info a.btn{background:#f08633;box-shadow:0px 4px 5px rgba(0,0,0,.2);border-radius:6px;margin:30px auto 0;width:100%;max-width:274px}.home-page .card .ul-iners ul .ai-left-info span.ey-tc{font-weight:400;font-size:12px;line-height:14px;text-align:center;margin-top:16px;display:block}.home-page .card .ul-iners ul .ai-left-info span.ey-tc a{text-decoration:underline;color:#fff}.home-page .card .ul-iners ul .ai-right-img{margin-top:24px;text-align:center}.home-page .card .ul-iners ul .ai-right-img img{width:auto;max-height:199px}.home-page .card .ul-iners ul li.home-bootcamp .banner .left-clm h1+ul{width:100%;min-width:auto}.home-page .card .ul-iners ul li.home-bootcamp .banner .left-clm a.btn{margin:40px auto 44px auto}.home-page .card .view-more-btn-fixed.banner-arrows{position:relative;bottom:56px;margin:24px auto 0}.home-page div.card div.ul-iners ul li.ai-banner{background:#01020d}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner{padding:56px 20px 0 20px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info p{color:#fff;font-size:16px;font-weight:normal;line-height:24px;text-align:center}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info p span{color:#faa61a;font-weight:normal}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home{margin-top:24px;position:relative}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home span,.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home p{color:#fff;font-size:24px;font-weight:400;line-height:36px;display:block;text-align:center;font-size:22px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home span::after,.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home p::after{content:\&quot;\&quot;;width:136px;height:5px;background:linear-gradient(90deg, #0092D1 0%, rgba(0, 141, 202, 0.97) 10%, rgba(0, 128, 185, 0.87) 25%, rgba(0, 106, 158, 0.72) 42%, rgba(0, 76, 119, 0.51) 62%, rgba(1, 38, 70, 0.25) 83%, rgba(2, 3, 25, 0) 100%);display:inline-block;vertical-align:middle;margin-left:10px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home p::after{display:none}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info a.btn{font-size:18px;font-weight:500;color:#202020;background:linear-gradient(0deg, #EA8500 10%, #F49B11 51%, #FAA61A 81%);box-shadow:3px 5px 14px rgba(12,46,82,.3);border-radius:6px;margin:40px auto 0;width:100%;max-width:280px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img{text-align:center;display:block}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img img{width:auto;height:100%;position:relative;top:-3px;left:0;text-align:center;max-height:100%}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img img.tab-banner,.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img img.web-banner{display:none}@media(max-width: 767px){.home-page .card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home span::after{content:none !important}.home-page .card .view-more-btn-fixed.banner-arrows{position:relative;bottom:46px;margin:24px auto 0}}@media(min-width: 768px){.home-page .card{position:relative}.home-page .card .ul-iners ul li.home-bootcamp,.home-page .card .ul-iners ul li.ai-banner{width:768px}.home-page .card .ul-iners ul li.ai-banner .main-banner{padding:64px 40px 0 40px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info span.ey-title{font-size:20px;line-height:23px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info p{font-weight:700;font-size:36px;line-height:49px;margin-top:18px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info .ai-process-home{margin-top:25px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info .ai-process-home span{font-size:16px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info .ai-process-home img{max-height:45px;top:-20px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info a.btn{margin:48px 0 0;max-width:260px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info span.ey-tc{text-align:left}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-right-img{padding:62px 0 0;margin:0}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-right-img img{max-height:282px}.home-page .card .ul-iners ul li.home-bootcamp .banner .left-clm ul li{width:100%}.home-page .card .ul-iners ul li.home-bootcamp .banner .left-clm a.btn{margin:44px auto 50px auto}.home-page div.card div.ul-iners ul li.ai-banner{background:#01020d}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner{padding:48px 50px 0 48px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info p{font-size:28px;text-align:left}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info p span{color:#faa61a;font-weight:normal}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home{margin-top:26px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home span,.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home p{font-size:36px;text-align:left}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home span::after,.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home p::after{content:none}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home p::after{display:none}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info a.btn{font-size:20px;margin:57px auto 0 200px;display:block}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img img.mob-banner,.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img img.web-banner{display:none}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img img.tab-banner{top:-16px;display:block;margin:0 auto;max-height:400px}}@media(max-width: 991px){li.ai-banner div.container{padding:0}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img{width:100%}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info a.btn{font-size:16px;font-weight:400}}@media(min-width: 992px){.home-page .card .ul-iners ul li.home-bootcamp,.home-page .card .ul-iners ul li.ai-banner{width:1024px}.home-page .card .ul-iners ul li.ai-banner .main-banner{padding:56px 40px 0 40px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info{width:515px;display:inline-block;margin-right:0px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info span.ey-title{font-size:24px;line-height:28px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info p{font-size:42px;line-height:57px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info .ai-process-home{margin-top:51px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info span.ey-tc{margin-top:34px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-right-img{width:calc(100% - 517px);vertical-align:bottom;display:inline-block;text-align:left;padding-top:0}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-right-img img{max-height:320px}.home-page .card .ul-iners ul li.home-bootcamp .banner .left-clm a.btn{margin:44px 0 50px 0}.home-page div.card div.ul-iners ul li.ai-banner{background:#01020d}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home span,.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home p{font-size:36px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home span::after,.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home p::after{content:none}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home p::after{display:none}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info a.btn{font-size:18px;font-weight:500;margin:57px 0 57px;display:block;line-height:48px;max-width:260px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img{display:inline-block;position:relative;top:0;left:-51px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img img.mob-banner,.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img img.web-banner{display:none}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img img.tab-banner{display:block;margin:0 auto;max-height:280px;margin-left:0px;top:0}}@media(min-width: 1200px){.home-page .card .ul-iners ul li.ai-banner div.container{margin-left:auto;margin-right:auto}.home-page .partner{padding-top:32px}.home-page .card .ul-iners ul li.home-bootcamp,.home-page .card .ul-iners ul li.ai-banner{width:1351px}.home-page .card .ul-iners ul li.ai-banner .main-banner{padding:48px 40px 50px 0}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-left-info{width:706px;margin-top:8px}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-right-img{width:calc(100% - 721px);position:relative;left:-30px;vertical-align:top}.home-page .card .ul-iners ul li.ai-banner .main-banner .ai-right-img img{max-height:368px}.home-page .card .ul-iners ul li.home-bootcamp .banner .left-clm ul li{padding-right:0}.home-page .card .view-more-btn-fixed.banner-arrows{position:relative;bottom:246px;margin:auto;width:100%}.home-page .card .view-more-btn-fixed.banner-arrows .c_arrow.c_prev{left:32px;width:38px;height:38px;background-color:rgba(0,0,0,.6);background-position:-21px -165px}.home-page .card .view-more-btn-fixed.banner-arrows .c_arrow.c_prev:hover{background-color:#fff;background-position:-167px -232px}.home-page .card .view-more-btn-fixed.banner-arrows .c_arrow.c_next{right:32px;width:38px;height:38px;background-color:rgba(0,0,0,.6);background-position:-212px -233px}.home-page .card .view-more-btn-fixed.banner-arrows .c_arrow.c_next:hover{background-color:#fff;background-position:-168px -232px}.home-page .card .view-more-btn-fixed.banner-arrows .c_arrow.c_next.hide-btn,.home-page .card .view-more-btn-fixed.banner-arrows .c_arrow.c_prev.hide-btn{display:none}.home-page .card .view-more-btn-fixed.banner-arrows .view-more-btn{display:none}.home-page div.card div.ul-iners ul li.ai-banner{background:#01020d}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner{padding:0px 50px 0 48px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info{margin-top:86px;position:relative;z-index:9999}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info p{font-size:30px;margin-top:0;line-height:40px;font-weight:300;text-align:left}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info p span{color:#faa61a;font-weight:300}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info p+p{line-height:40px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home{margin-top:20px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home span,.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home p{font-size:40px;line-height:48px;font-weight:400;text-align:left}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home span::after,.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home p::after{content:\&quot;\&quot;;width:280px;background:linear-gradient(90deg, #0092D1 0%, rgba(0, 141, 202, 0.97) 10%, rgba(0, 128, 185, 0.87) 25%, rgba(0, 106, 158, 0.72) 42%, rgba(0, 76, 119, 0.51) 62%, rgba(1, 38, 70, 0.25) 83%, rgba(2, 3, 25, 0) 100%)}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info .ai-process-home p::after{display:none}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info a.btn{font-size:18px;margin:74px 0 0;line-height:48px;max-width:260px}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-left-info a.btn:hover{background:linear-gradient(0deg, #FAA61A 16.15%, #F49B11 51%, #EA8500 78.65%);box-shadow:3px 5px 14px rgba(12,46,82,.3)}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img{display:inline-block}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img img.mob-banner,.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img img.tab-banner{display:none}.home-page div.card div.ul-iners ul li.ai-banner div.main-banner .container .ai-right-img img.web-banner{width:auto;display:block;height:492px;max-height:100%;margin-left:0;top:0;left:-280px}}.home-page .home-bootcamp.home-advocacy .banner{background:url(\&quot;https://www.simplilearn.com/ice9/assets/Advocacy-mob-bg.jpg\&quot;) no-repeat;padding-top:88px;background-size:cover;background-attachment:fixed;background-position:center;background-repeat:no-repeat}.home-page .home-bootcamp.home-advocacy .banner .container{padding:0 27px}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm h1{font-size:35px;line-height:42.5px;font-weight:400;color:#faa61a}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm h1 span{color:#faa61a;display:block;font-weight:700}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm p{margin-top:36px;font-size:23px;color:#fff;padding-right:30px;line-height:29.5px;display:inline-block;font-weight:300}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm p span{font-weight:500}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm p+p{margin-top:32px;font-size:21.5px;color:#0097d6;line-height:28px;display:inline-block;font-weight:500}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm p+p span{position:relative;display:block}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm p+p span img{width:20px;height:16px;display:inline-block}.home-page .home-bootcamp.home-advocacy .banner .container .right-clm{margin-top:32px}.home-page .home-bootcamp.home-advocacy .banner .container .right-clm a.play-anim{width:100%;max-width:344px;height:216px;cursor:pointer;background-position:0 0;background-size:100% 216px;margin:0 auto;position:relative}.home-page .home-bootcamp.home-advocacy .banner .jwp{padding:7px 11px 2px 11px}@media(min-width: 768px){.home-page .home-bootcamp.home-advocacy .banner{padding-top:100px;background:url(\&quot;https://www.simplilearn.com/ice9/assets/Advocacy-tab-bg.jpg\&quot;) no-repeat;background-size:cover}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm{padding:0 39px}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm h1{padding-left:0;width:100%;max-width:489px}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm h1 span{display:inline}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm p{margin-top:56px;font-size:33px;width:100%;max-width:445px;line-height:43px}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm p+p{font-size:31px;line-height:40px;max-width:556px}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm p+p span{display:inline}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm p+p span img{width:30px;height:24px;display:inline}.home-page .home-bootcamp.home-advocacy .banner .container .right-clm a.play-anim{width:583px;height:414px;max-width:100%;background-size:100% 414px}}@media(min-width: 992px){.home-page .home-bootcamp.home-advocacy .banner{padding-top:80px;background:url(\&quot;https://www.simplilearn.com/ice9/assets/Advocacy-tab-land-bg.jpg\&quot;) no-repeat}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm{vertical-align:top}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm h1{font-size:32px}.home-page .home-bootcamp.home-advocacy .banner .container .right-clm a.play-anim{height:411px;max-width:100%;background-size:100% 409px}}@media(min-width: 1200px){.home-page .home-bootcamp.home-advocacy .banner{padding-top:80px;background:url(\&quot;https://www.simplilearn.com/ice9/assets/Advocacy-desktop-bg.jpg\&quot;) no-repeat;background-position:center top;background-repeat:no-repeat;background-size:cover;display:inline-block;width:100%}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm{vertical-align:top;padding:0;margin-top:29px}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm h1{font-size:37.5px;line-height:45px;font-weight:400;max-width:489px}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm p{font-size:32px;margin-top:45px;line-height:40px;width:100%;max-width:458px}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm p+p{font-size:26px;margin-top:45px;line-height:40px;font-weight:500}.home-page .home-bootcamp.home-advocacy .banner .container .left-clm p+p span img{width:28px;height:20px}.home-page .home-bootcamp.home-advocacy .banner .container .right-clm a.play-anim{height:380px;max-width:100%;background-size:100% 378px}.home-page .home-bootcamp.home-advocacy .banner .container .right-clm a.play-anim .jwp .jwplayer{border-radius:10px}}#certification-banner-li{background:url(https://www.simplilearn.com/ice9/assets/banner_third_desktop_background.png) no-repeat !important;background-size:cover !important}#certification-banner-li .main-banner .container .ai-left-info{margin-top:65px}#certification-banner-li .main-banner .container .ai-left-info h2{color:#fff;font-size:40px;font-style:normal;font-weight:500;line-height:58px;text-align:left;letter-spacing:0}#certification-banner-li .main-banner .container .ai-left-info h3{text-align:left}#certification-banner-li .main-banner .container .ai-left-info h3 span{color:#f9a418;font-size:32px;font-style:normal;font-weight:700;line-height:normal}#certification-banner-li .main-banner .container .ai-left-info .ai-process-home{margin-top:24px}#certification-banner-li .main-banner .container .ai-left-info .ai-process-home ul{width:100%;margin:0;padding:0;flex-flow:wrap;gap:16px;min-width:100%}#certification-banner-li .main-banner .container .ai-left-info .ai-process-home ul li{width:100%;display:flex;align-items:center;padding:0}#certification-banner-li .main-banner .container .ai-left-info .ai-process-home ul li img{width:32px;height:32px;margin:0 8px 0 0;position:relative;top:auto;left:auto}#certification-banner-li .main-banner .container .ai-left-info .ai-process-home ul li span{width:auto;color:#fff;font-size:24px;font-style:normal;font-weight:400;line-height:normal}#certification-banner-li .main-banner .container .ai-left-info .ai-process-home ul li span:after{display:none}#certification-banner-li .main-banner .container .ai-left-info a.btn{margin-top:60px}#certification-banner-li .main-banner .container .ai-right-img{top:35px}#certification-banner-li .main-banner .container .ai-right-img img.web-banner{left:0;height:auto;width:434px}@media screen and (max-width: 1024px){#certification-banner-li{background:url(https://www.simplilearn.com/ice9/assets/banner_third_tablet_background.png) no-repeat !important;background-size:cover !important}#certification-banner-li .main-banner{padding:56px 15px 0}#certification-banner-li .main-banner .container .ai-left-info{margin-top:0}#certification-banner-li .main-banner .container .ai-left-info h2{font-size:40px;text-align:left}#certification-banner-li .main-banner .container .ai-left-info h3{text-align:left}#certification-banner-li .main-banner .container .ai-left-info h3 span{font-size:24px}#certification-banner-li .main-banner .container .ai-left-info .ai-process-home ul li span{font-size:20px}#certification-banner-li .main-banner .container .ai-left-info a.btn{margin-top:32px;line-height:48px}#certification-banner-li .main-banner .container .ai-right-img{margin-top:0;padding:0;left:auto;top:0}#certification-banner-li .main-banner .container .ai-right-img img.tab-banner{max-width:370px;width:100%;max-height:max-content;margin:0}}@media(max-width: 991px){#certification-banner-li{background:url(https://www.simplilearn.com/ice9/assets/banner_third_tablet_background_portrait.png) no-repeat !important;background-size:cover !important}#certification-banner-li .main-banner{padding:56px 48px 0}#certification-banner-li .main-banner .container{width:100%}#certification-banner-li .main-banner .container .ai-left-info{margin-top:0}#certification-banner-li .main-banner .container .ai-left-info h2{font-size:40px;text-align:left}#certification-banner-li .main-banner .container .ai-left-info h3{text-align:left}#certification-banner-li .main-banner .container .ai-left-info h3 span{font-size:24px}#certification-banner-li .main-banner .container .ai-left-info .ai-process-home ul li span{font-size:20px}#certification-banner-li .main-banner .container .ai-left-info a.btn{margin-top:32px;line-height:48px}#certification-banner-li .main-banner .container .ai-right-img{margin-top:30px;padding:0;display:flex;justify-content:center}#certification-banner-li .main-banner .container .ai-right-img img.mob-banner{max-width:370px;width:100%;margin:0 auto}}@media(max-width: 767px){#certification-banner-li{background:url(https://www.simplilearn.com/ice9/assets/banner_third_mobile_background.png) no-repeat !important;background-size:cover !important}#certification-banner-li .main-banner{padding:56px 15px 0}#certification-banner-li .main-banner .container .ai-left-info{margin-top:0}#certification-banner-li .main-banner .container .ai-left-info h2{font-size:26px;text-align:center;max-width:100%}#certification-banner-li .main-banner .container .ai-left-info h3{text-align:center}#certification-banner-li .main-banner .container .ai-left-info h3 span{font-size:24px}#certification-banner-li .main-banner .container .ai-left-info .ai-process-home{display:none}#certification-banner-li .main-banner .container .ai-left-info a.btn{margin-top:56px;line-height:48px}#certification-banner-li .main-banner .container .ai-right-img{margin-top:44px}#certification-banner-li .main-banner .container .ai-right-img img.mob-banner{max-width:266px;width:100%}}.bootcamp{background:#f8fbff;padding-bottom:48px}.bootcamp span{font-size:14px;font-weight:500;color:#272c37;line-height:normal;margin-top:32px;display:inline-block}.bootcamp h2{margin-top:8px}.bootcamp ul{margin-top:40px;margin-bottom:0;padding-left:15px}.bootcamp ul li{margin-top:32px;position:relative}.bootcamp ul li h4{margin-top:0;color:#343434;font-size:16px;font-weight:700;line-height:1.5;width:100%;max-width:262px}.bootcamp ul li p{margin-top:8px;font-size:14px;color:#51565e;line-height:1.57}.bootcamp ul li img{vertical-align:top;width:40px;height:auto}.bootcamp ul li .bootcamp-info{width:calc(100% - 45px);display:inline-block;padding-left:30px}.bootcamp ul li .bootcamp-img{display:inline-block;vertical-align:top}.bootcamp ul li:first-child{margin-top:0}@media(min-width: 768px){.bootcamp h2{font-size:32px;max-width:540px;line-height:normal;margin-top:8px}.bootcamp ul{max-width:540px}.bootcamp ul li{margin-top:40px}}@media(min-width: 992px){.bootcamp span{margin-top:48px}.bootcamp h2{margin-top:12px}.bootcamp ul{margin-top:48px;padding-left:0;max-width:100%}.bootcamp ul li{width:calc(100% - 705px);display:inline-block;vertical-align:top;margin-top:0}.bootcamp ul li .bootcamp-info{display:block;padding-left:0;width:calc(100% - 30px)}.bootcamp ul li h4{font-size:16px}.bootcamp ul li p{color:#6c7480;line-height:1.43;margin-top:16px}.bootcamp ul li .bootcamp-img{height:82px}.bootcamp ul li img{width:50px}}@media(min-width: 1200px){.bootcamp ul li{width:calc(100% - 855px)}.bootcamp ul li:last-child .bootcamp-info{max-width:258px;display:block}}.support-enter-main{padding-bottom:32px}.support-enter-main .container{padding-right:0}.support-enter-main .support-enter{margin-top:60px}.support-enter-main .support-enter .map-bg{margin-bottom:0;text-align:center}.support-enter-main .support-enter .map-bg h3{font-size:16px;font-weight:500;display:inline-block;color:#51565e;line-height:normal;float:left;margin-top:-18px}.support-enter-main .support-enter .map-bg div.support-span{background:url(https://www.simplilearn.com/ice9/assets/home/map.jpg) no-repeat;background-size:100%;display:inline-block;width:100%;background-position:top}.support-enter-main .support-enter .map-bg .Enterprises-logo{text-align:center;padding-top:24px;display:inline-block}.support-enter-main .support-enter .map-bg .Enterprises-logo .map-company-logo{width:103px;height:44px;vertical-align:top;border-radius:4px;box-shadow:1px 2px 9px 2px rgba(0,61,130,.18);display:inline-block;margin-right:17px;margin-bottom:15px;background:#fff;text-align:center}.support-enter-main .support-enter .map-bg .Enterprises-logo .map-company-logo img.show-mobile{max-height:17px;max-width:90%;display:inline-block;vertical-align:middle;margin-top:0;width:auto;height:auto}.support-enter-main .support-enter .map-bg .Enterprises-logo .map-company-logo:before{width:0;height:44px;content:\&quot;\&quot;;display:inline-block;vertical-align:middle}.support-enter-main .team-training h2{margin-top:70px}.support-enter-main .team-training p{color:#51565e;font-size:14px;line-height:1.71;margin-top:16px;padding-right:24px}.support-enter-main .team-training .terms-btn{display:none}a.explore{text-align:center;margin-top:40px;width:274px;line-height:44px;border-radius:6px;display:inline-block;font-size:16px;font-weight:500;transition:all .5s ease;text-transform:capitalize;background:#1179ef;color:#fff}a.explore:hover{background:#0a5dc9}@media(min-width: 768px){a.explore{font-size:18px}.support-enter-main{padding-bottom:44px}.support-enter-main .team-training h2{max-width:540px;margin-top:64px}.support-enter-main .team-training p{font-size:16px}.support-enter-main .support-enter{margin-top:48px}.support-enter-main .support-enter .map-bg h3{margin:0;padding-top:24px;width:100%;text-align:left}.support-enter-main .support-enter .map-bg .Enterprises-logo{margin-top:32px;padding:0 35px}.support-enter-main .support-enter .map-bg .Enterprises-logo .map-company-logo{width:193px;height:80px;margin-right:28px;margin-bottom:24px}.support-enter-main .support-enter .map-bg .Enterprises-logo .map-company-logo::before{height:100%}.support-enter-main .support-enter .map-bg .Enterprises-logo .map-company-logo img.show-mobile{max-height:40px}.support-enter-main .support-enter .map-bg a.explore{line-height:48px}}@media(max-width: 1199px)and (min-width: 992px){.support-enter-main .support-enter .map-bg div.support-span{background-size:100% 100%}.support-enter-main .support-enter .map-bg .Enterprises-logo .map-company-logo:last-of-type{display:none}}@media(min-width: 1200px){.support-enter-main{margin-top:64px}.support-enter-main .team-training{width:388px;display:inline-block;vertical-align:top;margin-top:32px}.support-enter-main .team-training h2{margin-top:0;line-height:1.5}.support-enter-main .team-training p{margin-top:32px;line-height:1.63}.support-enter-main .team-training .terms-btn{display:block;margin-top:112px;line-height:48px}.support-enter-main .support-enter{width:calc(100% - 418px);display:inline-block;margin-top:0;margin-left:30px}.support-enter-main .support-enter .map-bg .Enterprises-logo{padding:0;text-align:left}.support-enter-main .support-enter .map-bg h3{padding-top:8px;font-size:20px}.support-enter-main .support-enter .map-bg a.explore{display:none}}@media(min-width: 1200px){.support-enter-main .support-enter .map-bg div.support-span{background-position:0 24px;padding:32px 0 32px 74px;background-size:795px 420px}}.trusted_by{text-align:left;padding-bottom:16px}.trusted_by span{color:#272c37;font-size:16px;font-weight:700;line-height:normal;text-align:left;margin-top:40px;display:inline-block}.trusted_by .trust-logos{margin-top:32px}.trusted_by .trust-logos a{width:50%;display:inline-block;vertical-align:top;text-align:left;padding-right:44px;margin-bottom:40px}.trusted_by .trust-logos a .award-img{height:122px}.trusted_by .trust-logos a .award-img img{width:auto;height:auto}.trusted_by .trust-logos a .award-img img.gold-winner0,.trusted_by .trust-logos a .award-img img.gold-winner1{max-height:80px}.trusted_by .trust-logos a .award-img img.gold-winner2{max-height:60px;max-width:calc(100% - 1px)}.trusted_by .trust-logos a .award-img img.gold-winner3,.trusted_by .trust-logos a .award-img img.gold-winner4{max-height:98px}.trusted_by .trust-logos a .award-img::before{width:0;height:100%;content:\&quot;\&quot;;display:inline-block;vertical-align:middle}.trusted_by .trust-logos a span{margin-top:0}.trusted_by .trust-logos a p{line-height:1.5;letter-spacing:normal;color:#51565e;font-size:12px;margin-top:12px}@media(min-width: 768px){.trusted_by{padding-bottom:24px}.trusted_by span{margin-top:24px}.trusted_by .trust-logos a{width:124px;margin-right:20px;padding-right:0;text-align:center}.trusted_by .trust-logos a span{display:block;text-align:center;font-size:14px;margin-top:0}.trusted_by .trust-logos a:last-child{margin-right:0}.trusted_by .trust-logos a p{padding:0;margin-top:20px;line-height:1.43;font-size:14px}.trusted_by .trust-logos a .award-img{height:130px}.trusted_by .trust-logos a .award-img img.gold-winner0,.trusted_by .trust-logos a .award-img img.gold-winner1{max-height:74px}.trusted_by .trust-logos a .award-img img.gold-winner2{max-height:50px}.trusted_by .trust-logos a .award-img img.gold-winner3,.trusted_by .trust-logos a .award-img img.gold-winner4{max-height:84px}}@media(min-width: 992px){.trusted_by .trust-logos{margin-top:0}.trusted_by .trust-logos a{width:170px}.trusted_by .trust-logos a .award-img img.gold-winner0,.trusted_by .trust-logos a .award-img img.gold-winner1{max-height:100px}.trusted_by .trust-logos a .award-img img.gold-winner2{max-height:76px}.trusted_by .trust-logos a .award-img img.gold-winner3,.trusted_by .trust-logos a .award-img img.gold-winner4{max-height:124px}.trusted_by .trust-logos a .award-img{height:188px}.trusted_by .trust-logos a p{padding:0 16px}.trusted_by span{font-size:20px}}@media(min-width: 1200px){.trusted_by .trust-logos a{width:212px}}.free-app{background-color:#f8fbff;padding-bottom:56px}.free-app img{width:auto;height:auto}.free-app .left-app{margin-top:56px}.free-app .left-app p{font-size:14px;line-height:1.71;color:#51565e;margin-top:24px;display:inline-block}.free-app .left-app .free-app-img{display:none}.free-app .right-app .qr-code{display:none}.free-app .right-app .google-play-app{margin-top:48px}.free-app .right-app .google-play-app a:last-child{margin-left:24px}.free-app .right-app .google-play-app h3{display:none}@media(min-width: 768px){.free-app{padding-bottom:64px}.free-app .left-app{margin-top:64px}.free-app .left-app h2{font-size:32px;max-width:342px}.free-app .left-app p{font-size:16px;line-height:1.5;max-width:476px;margin-top:16px}.free-app .right-app .google-play-app{margin-top:64px}.free-app .right-app .google-play-app a img{height:58px}}@media(min-width: 992px){.free-app{padding-bottom:0;padding-top:64px}.free-app .left-app,.free-app .right-app{width:50%;display:inline-block;vertical-align:top}.free-app .left-app{margin-top:0}.free-app .left-app .free-app-img{display:block;margin-top:40px}.free-app .left-app h2{line-height:1.5;letter-spacing:1px}.free-app .left-app p{line-height:1.63}.free-app .right-app{margin-top:72px;padding-left:60px;text-align:center}.free-app .right-app .qr-code{display:block}.free-app .right-app .qr-code p{color:#51565e;line-height:1.43;font-size:14px;font-weight:500;max-width:230px;margin:0 auto;text-align:left}.free-app .right-app .qr-code img{max-height:230px;margin-top:16px}.free-app .right-app div.google-play-app{width:350px;padding-top:40px;border-top:1px solid #d2d6de;position:relative;margin:32px auto 0 auto}.free-app .right-app div.google-play-app::before{content:\&quot;Or\&quot;;font-size:14px;font-weight:500;color:#51565e;display:inline-block;width:30px;height:20px;background:#f8fbff;position:absolute;top:-13px;left:0;right:0;margin:auto}.free-app .right-app div.google-play-app h3{display:block}.free-app .right-app div.google-play-app a img{height:43px}}.future-proof{background:linear-gradient(180deg, #f8fbff 0%, #fff 100%)}.future-proof .future-proof-inner{margin:66px 0;background:#fff;mix-blend-mode:normal;opacity:.99;border:1px solid #d2d6de;box-shadow:0 2px 5px 0 rgba(17,121,239,.15);border-radius:4px;display:inline-block;height:100%;width:100%}.future-proof .future-proof-inner .inner-left{width:66%;float:left;padding:35px 0 35px 45px}.future-proof .future-proof-inner .inner-left .future-proof-title{margin-top:10px;font-weight:400;font-size:34px;line-height:50px;color:#272c37}.future-proof .future-proof-inner .inner-left .future-proof-title::after{content:\&quot;\&quot;;width:86px;right:80px;display:inline-block;height:8px;position:relative;bottom:-16px;background:url(\&quot;https://www.simplilearn.com/ice9/assets/freemium-sprite_v7.svgz\&quot;) no-repeat;background-position:-45px -207px}.future-proof .future-proof-inner .inner-left .future-proof-title span{font-weight:700}.future-proof .future-proof-inner .inner-left .sub-title{font-weight:400;font-size:18px;line-height:21px;color:#51565e;margin-top:16px}.future-proof .future-proof-inner .inner-left .career-tags{margin-top:20px}.future-proof .future-proof-inner .inner-left .career-tags ul{margin-bottom:0}.future-proof .future-proof-inner .inner-left .career-tags ul li{font-weight:400;font-size:14px;line-height:16px;color:#272c37;margin-right:20px;display:inline-block;position:relative;padding-left:20px}.future-proof .future-proof-inner .inner-left .career-tags ul li::before{content:\&quot;\&quot;;width:14px;height:14px;display:inline-block;position:absolute;top:0;left:0;background:url(\&quot;https://www.simplilearn.com/ice9/assets/home/sprite_v2.svgz\&quot;) no-repeat;background-position:-150px -21px}.future-proof .future-proof-inner .inner-left .courses{margin-top:12px}.future-proof .future-proof-inner .inner-left .courses ul li{margin-top:20px;background:#fff;mix-blend-mode:normal;opacity:.99;border:1px solid #d2d6de;box-shadow:0 2px 5px 0 rgba(17,121,239,.15);border-radius:50px;font-weight:500;font-size:18px;line-height:24px;color:#1179ef;margin-right:30px;display:inline-block}.future-proof .future-proof-inner .inner-left .courses ul li a{color:#1179ef;font-weight:500;font-size:18px;line-height:24px;display:inline-block;padding:17px 20px}.future-proof .future-proof-inner .inner-left .explore-free-courses{margin-top:24px}.future-proof .future-proof-inner .inner-left .explore-free-courses .explore-free-courses-button{padding:15px 48px;background:#1179ef;border-radius:6px;font-weight:500;font-size:16px;line-height:19px;text-align:center;color:#fff;border:none;display:inline-block}.future-proof .future-proof-inner .inner-right{width:34%;float:left}.future-proof .future-proof-inner .inner-right img{width:100%;margin-top:35px;height:auto}@media(max-width: 991px){.future-proof .future-proof-inner{margin:42px 0;position:relative}.future-proof .future-proof-inner .inner-left{width:100%}.future-proof .future-proof-inner .inner-left .future-proof-title{font-size:28px}.future-proof .future-proof-inner .inner-left .future-proof-title::after{right:66px;background-position:-56px -207px}.future-proof .future-proof-inner .inner-left .career-tags{margin-top:24px}.future-proof .future-proof-inner .inner-left .explore-free-courses{margin-bottom:115px;margin-top:50px}.future-proof .future-proof-inner .inner-right{position:absolute;right:0;bottom:0;margin-bottom:18px}.future-proof .future-proof-inner .inner-right img{margin-top:0px}}@media(max-width: 767px){.future-proof .future-proof-inner{margin:42px 0;position:relative}.future-proof .future-proof-inner .inner-left{width:100%;padding:24px 20px}.future-proof .future-proof-inner .inner-left .future-proof-title{font-size:24px;line-height:34px}.future-proof .future-proof-inner .inner-left .future-proof-title::after{right:56px;background-position:-66px -207px}.future-proof .future-proof-inner .inner-left .sub-title{margin-top:27px}.future-proof .future-proof-inner .inner-left .career-tags{margin-top:24px}.future-proof .future-proof-inner .inner-left .career-tags ul li{display:block;margin-bottom:12px}.future-proof .future-proof-inner .inner-left .courses ul li{font-size:14px;margin-right:15px}.future-proof .future-proof-inner .inner-left .courses ul li a{font-size:14px;padding:9px 14px;display:inline-block}.future-proof .future-proof-inner .inner-left .explore-free-courses{text-align:center;margin-bottom:0;margin-top:30px}.future-proof .future-proof-inner .inner-left .explore-free-courses .explore-free-courses-button{padding:14px 49px}.future-proof .future-proof-inner .inner-right{width:100%;position:relative;padding:0 15%;margin-bottom:20px}.future-proof .future-proof-inner .inner-right img{margin-top:0px}}#homepageuniversitysliderbanner{background:#fff}.new-partner{background:#fff;padding-top:20px;padding-bottom:40px}.new-partner .container{padding-right:0}.new-partner .container p{font-size:14px;color:#272c37;font-weight:400;line-height:24px;text-align:center;padding:0 20px 0 5px;display:inline-block}.new-partner .container .partners-info{overflow-x:scroll;overflow-y:hidden}.new-partner .container .partners-info .partner-wrap1,.new-partner .container .partners-info .partner-wrap2{width:100%;display:flex;margin-top:16px}.new-partner .container .partners-info .partner-wrap2{margin-top:8px}.new-partner .container .partners-info .partner-head{width:auto;height:56px;background:#fff;text-align:center;vertical-align:top;border-radius:6px;display:inline-block;margin-right:8px;padding:0 8px}.new-partner .container .partners-info .partner-head a{width:100%;height:auto;display:inline-block}.new-partner .container .partners-info .partner-head::before{content:\&quot;\&quot;;width:0;height:60px;display:inline-block;vertical-align:middle}.new-partner .container .partners-info .partner-head{width:auto}.new-partner .container .partners-info .partner-head a img{width:auto;height:100%;max-height:56px}.new-partner .container .partners-info::-webkit-scrollbar{display:none;scrollbar-width:none}.new-partner .container .partners-info ::-moz-scrollbar{display:none;scrollbar-width:none}.new-partner .container .partners-info{overflow:auto;overflow-y:hidden;-ms-overflow-style:none;scrollbar-color:rgba(0,0,0,0) rgba(0,0,0,0)}.new-partner .container .partners-info.partner-desk{display:none}.new-partner .container .view-more-btn-fixed.mob-arrows{margin:24px auto 0}.new-partner .container div.slider-bar .partner-bar{background:#cedbe9;position:relative;width:80px;height:4px;margin:24px auto 0;border-radius:4px}.new-partner .container div.slider-bar .partner-bar .active-bar{width:36px;height:4px;background-color:#1179ef;border-radius:4px}@media(min-width: 768px){.new-partner{text-align:center;padding:18px 0 24px}.new-partner .container .partners-info .partner-wrap1{margin-top:24px}.new-partner .container .partners-info .partner-head{margin-right:16px}.new-partner .container .view-more-btn-fixed.mob-arrows{margin:40px auto 0}.new-partner .container div.slider-bar .partner-bar{margin:40px auto 0}.new-partner .container ul.category{margin-top:40px}}@media(min-width: 992px)and (max-width: 1199px){.new-partner .container{padding:0 15px}}@media(min-width: 768px)and (max-width: 1024px){.new-partner .container{margin-right:0;margin-left:15px;padding-left:10px;width:auto}}@media(min-width: 810px)and (max-width: 1080px){.new-partner .container{margin-right:0;margin-left:15px;padding-left:10px;width:auto}}@media(min-width: 800px)and (max-width: 1280px){.new-partner .container{margin-right:0;margin-left:15px;padding-left:10px;width:auto}}@media(min-width: 992px){.new-partner{padding:20px 0 40px}.new-partner .container{padding:0;margin-left:auto;margin-right:auto;width:970px}.new-partner .container p{padding:0}.new-partner .container .partners-info.partner-desk{display:block;margin-top:24px;position:relative}.new-partner .container .partners-info.partner-desk::after{content:\&quot;\&quot;;width:30px;height:60px;background:linear-gradient(to right, rgba(255, 255, 255, 0), #fff 60%);position:absolute;right:0px;top:0}.new-partner .container .partners-info.partner-desk .part-card{width:auto;overflow:hidden;overflow-x:auto;display:flex}.new-partner .container .partners-info.partner-desk .part-card .partner-head{width:auto;height:56px;background:#fff;text-align:center;vertical-align:top;border-radius:6px;display:inline-block;margin-right:8px;padding:0 8px;height:72px;margin-right:24px}.new-partner .container .partners-info.partner-desk .part-card .partner-head a{width:100%;height:auto;display:inline-block}.new-partner .container .partners-info.partner-desk .part-card .partner-head::before{content:\&quot;\&quot;;width:0;height:60px;display:inline-block;vertical-align:middle}.new-partner .container .partners-info.partner-desk .part-card .partner-head a img{max-height:72px}.new-partner .container .part-card::-webkit-scrollbar{display:none;scrollbar-width:none}.new-partner .container .part-card::-ms-overflow-style{display:none;scrollbar-width:none}.mob-arrows{display:none}}@media(min-width: 1200px){.new-partner{padding:35px 0 40px}.new-partner .container{width:1170px;padding-left:15px}.new-partner .container p{font-size:16px}.new-partner .container .partners-info.partner-mob{display:none}.new-partner .container .slider-bar{display:none}}.grd-1,.grd-7{background:#ff5d63;background-image:linear-gradient(90deg, #FF5D63 14%, #FFBABC 100%)}.grd-2,.grd-8{background:#00bba6;background-image:linear-gradient(90deg, #00BBA6 14%, #BAFFF7 100%)}.grd-3,.grd-9{background:#0099c3;background-image:linear-gradient(90deg, #0099C3 14%, #BAF0FF 100%)}.grd-4,.grd-10{background:#8661df;background-image:linear-gradient(90deg, #8661DF 14%, #CEBAFF 100%)}.grd-5{background:#d2ac00;background-image:linear-gradient(90deg, #D2AC00 14%, #FFF3BA 100%)}.grd-6{background:#d550ab;background-image:linear-gradient(90deg, #D550AB 14%, #FFBAE9 100%)}.crd-1,.crd-7{background:#ffcbcd;background-image:radial-gradient(circle, #fffcf3 18%, #FFCBCD 63%, #FFCBCD 100%);background-position:4px -1px;background-size:152% 130%}.crd-2,.crd-8{background:#75ffcd;background-image:radial-gradient(circle, #fffcf3 18%, #75FFCD 63%, #75FFCD 100%);background-position:4px -1px;background-size:152% 130%}.crd-3,.crd-9{background:#ffb1e6;background-image:radial-gradient(circle, #fffcf3 18%, #FFB1E6 63%, #FFB1E6 100%);background-position:4px -1px;background-size:152% 130%}.crd-4,.crd-10{background:#7eecfd;background-image:radial-gradient(circle, #fffcf3 18%, #7EECFD 63%, #7EECFD 100%);background-position:4px -1px;background-size:152% 130%}.crd-5{background:#ffe6a1;background-image:radial-gradient(circle, #fffcf3 18%, #FFE6A1 63%, #FFE6A1 100%);background-position:4px -1px;background-size:152% 130%}.crd-6{background:#d5c3ff;background-image:radial-gradient(circle, #fffcf3 18%, #D5C3FF 63%, #D5C3FF 100%);background-position:4px -1px;background-size:152% 130%}.home-page .bootcamp{clear:both}.new-our-program{margin-top:40px;padding-bottom:40px}.new-our-program .container{padding-right:0}.new-our-program .container h1{color:#272c37;font-size:24px;font-weight:normal;line-height:36px;display:block}.new-our-program .container p{color:#51565e;font-size:14px;font-weight:400;line-height:21px;margin-top:8px;display:block}.new-our-program .container ul.category{margin-top:24px;margin-bottom:0}.new-our-program .container ul.category li{margin:0 0 16px}.new-our-program .container ul.category li .program-card-hd{background:#fff;border-bottom:1px solid #e5e5e5;border-radius:0;padding:8px;margin-right:15px;margin-bottom:16px;position:relative;cursor:pointer}.new-our-program .container ul.category li .program-card-hd span{color:#272c37;font-size:14px;font-weight:400;line-height:24px;display:inline-block;text-transform:none}.new-our-program .container ul.category li .program-card-hd a{pointer-events:none;cursor:default}.new-our-program .container ul.category li .program-card-hd::after{content:\&quot;\&quot;;width:22px;height:22px;background:url(\&quot;https://www.simplilearn.com/ice9/assets/new-home-page-sprite.svgz\&quot;) no-repeat;background-position:-177px -64px;position:absolute;right:10px;top:10px}.new-our-program .container ul.category li .program-card-hd:last-child{margin-bottom:0}.new-our-program .container ul.category li .program-card-hd.active{border-radius:6px;background:#f1f7fd;border:none}.new-our-program .container ul.category li .program-card-hd.active span{color:#118aef;font-weight:500}.new-our-program .container ul.category li .program-card-hd.active a{pointer-events:none;cursor:default}.new-our-program .container ul.category li .program-card-hd.active::after{background-position:-90px -65px !important}.new-our-program .container ul.category li:last-child{margin-bottom:0}.new-our-program .container ul.category li:last-child .program-card-hd{border-bottom:none}.new-our-program .container ul.category li:last-child div.prog-card div.view-more-btn-fixed{margin-bottom:0}.new-our-program .container .prog-card{margin-top:16px}.new-our-program .container .prog-card .ul-iners ul li{width:293px;position:relative;float:left;display:flex;padding:0 16px 0 4px;margin-bottom:0}.new-our-program .container .prog-card .ul-iners ul li .card{border-radius:6px;background:#fff;box-shadow:0px 2px 6px 0px rgba(39,44,55,.27);padding-bottom:52px;position:relative;height:392px}.new-our-program .container .prog-card .ul-iners ul li .card div.card-body{cursor:pointer;height:100%;display:block}.new-our-program .container .prog-card .ul-iners ul li .card div.card-body .card-banner{border-radius:4px 4px 0 0;width:100%;height:122px;overflow:hidden;position:relative}.new-our-program .container .prog-card .ul-iners ul li .card div.card-body .card-banner img{width:100%;height:100%;max-height:122px;height:100%}.new-our-program .container .prog-card .ul-iners ul li .card div.card-body .card-info{position:relative;padding:30px 16px 36px 16px;margin-top:-60px}.new-our-program .container .prog-card .ul-iners ul li .card div.card-body .card-info .card-logo{display:inline-block;background:#fff;width:auto;height:60px;text-align:center;vertical-align:top;border-radius:6px;box-shadow:0px 2px 6px 0px rgba(39,44,55,.27);padding:0 8px;max-width:100%}.new-our-program .container .prog-card .ul-iners ul li .card div.card-body .card-info .card-logo::before{width:0;height:60px;content:\&quot;\&quot;;display:inline-block;vertical-align:middle}.new-our-program .container .prog-card .ul-iners ul li .card div.card-body .card-info .card-logo img{width:100%;height:auto;max-height:40px}.new-our-program .container .prog-card .ul-iners ul li .card div.card-body .card-info h2{font-size:16px;color:#272c37;font-weight:700;line-height:24px;margin-top:16px;display:block;letter-spacing:normal}.new-our-program .container .prog-card .ul-iners ul li .card div.card-body .card-info .card-list p{font-size:12px;font-weight:400;line-height:16px;margin-top:8px;padding-left:20px;position:relative;display:block;color:#4f4f4f}.new-our-program .container .prog-card .ul-iners ul li .card div.card-body .card-info .card-list p::before{content:\&quot;\&quot;;width:12px;height:13px;background:url(\&quot;https://www.simplilearn.com/ice9/assets/new-home-page-sprite.svgz\&quot;) no-repeat;background-position:-2px -67px;display:inline-block;position:absolute;top:0;left:0}.new-our-program .container .prog-card .ul-iners ul li .card .prgram-schedule{margin-top:16px;padding:0 16px;line-height:normal;position:absolute;bottom:16px;width:100%}.new-our-program .container .prog-card .ul-iners ul li .card .prgram-schedule span{color:#4f4f4f;font-size:12px;font-weight:400;line-height:16px;display:block}.new-our-program .container .prog-card .ul-iners ul li .card .prgram-schedule span.months{position:relative;padding-left:20px}.new-our-program .container .prog-card .ul-iners ul li .card .prgram-schedule span.months::before{content:\&quot;\&quot;;width:14px;height:14px;background:url(\&quot;https://www.simplilearn.com/ice9/assets/new-home-page-sprite.svgz\&quot;) no-repeat;display:inline-block;position:absolute;top:0;left:0;background-position:-138px -67px}.new-our-program .container .prog-card .ul-iners ul li .card .prgram-schedule span.rating{position:relative;padding-left:20px;display:inline-block;vertical-align:top;margin-top:4px}.new-our-program .container .prog-card .ul-iners ul li .card .prgram-schedule span.rating::before{content:\&quot;\&quot;;width:14px;height:14px;background:url(\&quot;https://www.simplilearn.com/ice9/assets/new-home-page-sprite.svgz\&quot;) no-repeat;display:inline-block;position:absolute;top:0;left:0;background-position:-225px -67px}.new-our-program .container .prog-card .ul-iners ul li .card .prgram-schedule span.know-more{display:inline-block;margin-top:0;text-align:right}.new-our-program .container .prog-card .ul-iners ul li .card .prgram-schedule span.know-more a{color:#1179ef;font-weight:500;font-size:14px;line-height:16px}.new-our-program .container .prog-card .ul-iners ul li .card .prgram-schedule span.cohort{display:inline-block;vertical-align:top;margin-top:4px}.new-our-program .container .prog-card .ul-iners ul li .card .prgram-schedule span.cohort b{color:#272c37}.new-our-program .container .prog-card .ul-iners ul li .card .prgram-schedule .card-btm{width:calc(100% - 77px);vertical-align:bottom;display:inline-block}.new-our-program .container .prog-card .ul-iners ul li .card.master-card{border:none}.new-our-program .container .prog-card .ul-iners ul li .card.master-card div.card-body .card-banner::before{content:\&quot;\&quot;;display:inline-block;width:100%;height:100%;position:absolute;top:0;right:0;bottom:0;left:0;background-repeat:no-repeat;background-position:0 -18px;opacity:.6;background-image:url(\&quot;https://www.simplilearn.com/ice9/assets/Masters-Card-pattern_1.svgz\&quot;)}.new-our-program .container .prog-card .ul-iners ul li .card.certificate-card div.card-body .card-banner::before{content:\&quot;\&quot;;display:inline-block;width:100%;height:100%;position:absolute;top:0;right:0;bottom:0;left:0;background-repeat:no-repeat;background-position:0 -18px;opacity:.6;background-image:url(\&quot;https://www.simplilearn.com/ice9/assets/Certification-Card-Pattern.svgz\&quot;)}.new-our-program .container .prog-card .ul-iners{padding-bottom:5px}.new-our-program .container .prog-card .view-more-btn-fixed{margin:24px auto 32px}@media(min-width: 768px){.new-our-program{padding-bottom:20px}.new-our-program .container h1{font-size:28px;line-height:42px;font-weight:normal}.new-our-program .container p{margin-top:16px}.new-our-program .container .prog-card .ul-iners ul li{padding:0 16px 0 6px}.new-our-program ul.category{margin-top:40px;margin-bottom:0;padding-left:0}}@media(min-width: 768px){.new-our-program{padding-bottom:20px}}@media(min-width: 768px)and (max-width: 1024px){.new-our-program .container{margin-right:0;margin-left:15px;padding-left:10px;width:auto}.new-our-program .container ul.category li .program-card-hd{margin-right:24px}}@media(min-width: 810px)and (max-width: 1080px){.new-our-program .container{margin-right:0;margin-left:15px;padding-left:10px;width:auto}}@media(min-width: 800px)and (max-width: 1280px){.new-our-program .container{margin-right:0;margin-left:15px;padding-left:10px;width:auto}}@media(max-width: 1199px){.new-our-program{padding-bottom:40px}.new-our-program .container .desk-program{display:none}.new-our-program .container .prog-card .ul-iners ul li .card{width:100%;height:392px}}@media(min-width: 992px){.new-our-program{padding-bottom:40px}.new-our-program .container{padding-right:15px;margin-left:auto;margin-right:auto;width:970px}.new-our-program .container h1{font-size:32px;line-height:40px}.new-our-program .container p{font-size:16px;line-height:28px}.new-our-program .container .desk-program{display:block;margin-top:24px}.new-our-program .container .desk-program nav{border-radius:6px;background:#fff;box-shadow:0px 1px 8px 0px rgba(0,0,0,.2);width:273px;position:sticky;position:-webkit-sticky;display:inline-block;vertical-align:top;top:0;float:left;margin-right:16px;margin-bottom:40px}.new-our-program .container .desk-program nav h2{color:#272c37;padding:8px 16px;border-bottom:1px solid #e5e5e5;font-size:16px;letter-spacing:normal;font-weight:400;line-height:24px}.new-our-program .container .desk-program nav .category-list{padding:8px 4px 8px 8px;max-height:calc(100vh + 320px);position:sticky;position:-webkit-sticky;display:inline-block;vertical-align:top;overflow-y:scroll;-webkit-overflow-scrolling:touch}.new-our-program .container .desk-program nav .category-list::-webkit-scrollbar{width:4px}.new-our-program .container .desk-program nav .category-list::-webkit-scrollbar-track{background:rgba(0,0,0,0)}.new-our-program .container .desk-program nav .category-list::-webkit-scrollbar-thumb{background:#d2d6de;border-radius:2px}.new-our-program .container .desk-program nav .category-list::-webkit-scrollbar-thumb:hover{background:#cbced3}.new-our-program .container .desk-program nav .category-list .show-list div.category-tab{display:block;padding:8px 48px 8px 8px;cursor:pointer}.new-our-program .container .desk-program nav .category-list .show-list div.category-tab span{font-size:14px;font-weight:400;line-height:24px;color:#272c37}.new-our-program .container .desk-program nav .category-list .show-list div.category-tab a{pointer-events:none;cursor:default}.new-our-program .container .desk-program nav .category-list .show-list .category-tab.active-tab{background:#f1f7fd;width:100%;border-radius:6px;position:relative}.new-our-program .container .desk-program nav .category-list .show-list .category-tab.active-tab span{color:#118aef;font-weight:500}.new-our-program .container .desk-program nav .category-list .show-list .category-tab.active-tab a{pointer-events:none;cursor:default}.new-our-program .container .desk-program nav .category-list .show-list .category-tab.active-tab::after{content:\&quot;\&quot;;width:14px;height:25px;background:url(\&quot;https://www.simplilearn.com/ice9/assets/new-home-page-sprite.svgz\&quot;) no-repeat;background-position:-46px -61px;position:absolute;top:0;bottom:0;right:15px;margin:auto}.new-our-program .container .desk-program .card-list-dk{display:flex;width:calc(74% - 105px);margin-left:16px;margin-bottom:0;flex-wrap:wrap;height:100%}.new-our-program .container .desk-program .card-list-dk .card{width:273px;display:inline-block;vertical-align:top;border-radius:6px;background:#fff;box-shadow:0px 2px 6px 0px rgba(39,44,55,.27);padding-bottom:52px;position:relative;height:392px;transition:.1s ease;-webkit-transition:.1s ease;-moz-transition:.1s ease;-o-transition:.1s ease;margin-right:16px;margin-bottom:16px;box-shadow:0px 2px 8px 0px rgba(0,0,0,.16)}.new-our-program .container .desk-program .card-list-dk .card:hover{box-shadow:0px 2px 8px 0px rgba(0,0,0,.32)}.new-our-program .container .desk-program .card-list-dk .card div.card-body{cursor:pointer;height:100%;display:block}.new-our-program .container .desk-program .card-list-dk .card div.card-body .card-banner{border-radius:4px 4px 0 0;width:100%;height:122px;overflow:hidden;position:relative}.new-our-program .container .desk-program .card-list-dk .card div.card-body .card-banner img{width:100%;height:100%;max-height:122px;height:100%}.new-our-program .container .desk-program .card-list-dk .card div.card-body .card-info{position:relative;padding:30px 16px 36px 16px;margin-top:-60px}.new-our-program .container .desk-program .card-list-dk .card div.card-body .card-info .card-logo{display:inline-block;background:#fff;width:auto;height:60px;text-align:center;vertical-align:top;border-radius:6px;box-shadow:0px 2px 6px 0px rgba(39,44,55,.27);padding:0 8px;max-width:100%}.new-our-program .container .desk-program .card-list-dk .card div.card-body .card-info .card-logo::before{width:0;height:60px;content:\&quot;\&quot;;display:inline-block;vertical-align:middle}.new-our-program .container .desk-program .card-list-dk .card div.card-body .card-info .card-logo img{width:100%;height:auto;max-height:40px}.new-our-program .container .desk-program .card-list-dk .card div.card-body .card-info h2{font-size:16px;color:#272c37;font-weight:700;line-height:24px;margin-top:16px;display:block;letter-spacing:normal}.new-our-program .container .desk-program .card-list-dk .card div.card-body .card-info .card-list p{font-size:12px;font-weight:400;line-height:16px;margin-top:8px;padding-left:20px;position:relative;display:block;color:#4f4f4f}.new-our-program .container .desk-program .card-list-dk .card div.card-body .card-info .card-list p::before{content:\&quot;\&quot;;width:12px;height:13px;background:url(\&quot;https://www.simplilearn.com/ice9/assets/new-home-page-sprite.svgz\&quot;) no-repeat;background-position:-2px -67px;display:inline-block;position:absolute;top:0;left:0}.new-our-program .container .desk-program .card-list-dk .card .prgram-schedule{margin-top:16px;padding:0 16px;line-height:normal;position:absolute;bottom:16px;width:100%}.new-our-program .container .desk-program .card-list-dk .card .prgram-schedule span{color:#4f4f4f;font-size:12px;font-weight:400;line-height:16px;display:block}.new-our-program .container .desk-program .card-list-dk .card .prgram-schedule span.months{position:relative;padding-left:20px}.new-our-program .container .desk-program .card-list-dk .card .prgram-schedule span.months::before{content:\&quot;\&quot;;width:14px;height:14px;background:url(\&quot;https://www.simplilearn.com/ice9/assets/new-home-page-sprite.svgz\&quot;) no-repeat;display:inline-block;position:absolute;top:0;left:0;background-position:-138px -67px}.new-our-program .container .desk-program .card-list-dk .card .prgram-schedule span.rating{position:relative;padding-left:20px;display:inline-block;vertical-align:top;margin-top:4px}.new-our-program .container .desk-program .card-list-dk .card .prgram-schedule span.rating::before{content:\&quot;\&quot;;width:14px;height:14px;background:url(\&quot;https://www.simplilearn.com/ice9/assets/new-home-page-sprite.svgz\&quot;) no-repeat;display:inline-block;position:absolute;top:0;left:0;background-position:-225px -67px}.new-our-program .container .desk-program .card-list-dk .card .prgram-schedule span.know-more{display:inline-block;margin-top:0;text-align:right}.new-our-program .container .desk-program .card-list-dk .card .prgram-schedule span.know-more a{color:#1179ef;font-weight:500;font-size:14px;line-height:16px}.new-our-program .container .desk-program .card-list-dk .card .prgram-schedule span.cohort{display:inline-block;vertical-align:top;margin-top:4px}.new-our-program .container .desk-program .card-list-dk .card .prgram-schedule span.cohort b{color:#272c37}.new-our-program .container .desk-program .card-list-dk .card .prgram-schedule .card-btm{width:calc(100% - 77px);vertical-align:bottom;display:inline-block}.new-our-program .container .desk-program .card-list-dk .view-all{text-align:center;width:100%;margin-top:16px}.new-our-program .container .desk-program .card-list-dk .view-all .show{background:none;border:none;font-size:14px;font-weight:700;line-height:24px;color:#118aef;cursor:pointer}.new-our-program .container .desk-program .card-list-dk .view-all .show:focus{border:none}.new-our-program .container .desk-program .card-list-dk .card.master-card{border:none}.new-our-program .container .desk-program .card-list-dk .card.master-card div.card-body .card-banner::before{content:\&quot;\&quot;;display:inline-block;width:100%;height:100%;position:absolute;top:0;right:0;bottom:0;left:0;background-repeat:no-repeat;background-position:0 -18px;opacity:.6;background-image:url(\&quot;https://www.simplilearn.com/ice9/assets/Masters-Card-pattern_1.svgz\&quot;)}.new-our-program .container .desk-program .card-list-dk .card.master-card .prgram-schedule{position:absolute;bottom:16px}.new-our-program .container .desk-program .card-list-dk .card.certificate-card div.card-body .card-banner::before{content:\&quot;\&quot;;display:inline-block;width:100%;height:100%;position:absolute;top:0;right:0;bottom:0;left:0;background-repeat:no-repeat;background-position:0 -18px;opacity:.6;background-image:url(\&quot;https://www.simplilearn.com/ice9/assets/Certification-Card-Pattern.svgz\&quot;)}}@media(min-width: 992px)and (max-width: 1199px){.new-our-program .container{width:100%;padding-left:42px;margin-right:0;padding-right:0}}@media(min-width: 1200px){.new-our-program .container{width:1170px;padding-right:0}.new-our-program .container p{font-size:16px}.new-our-program .container .desk-program .card-list-dk{width:calc(74% - 0px);display:flex}.new-our-program .container .desk-program .card-list-dk .card:nth-child(3n+0){margin-right:0}.new-our-program .container .desk-program nav.sticky-hd{top:64px}.new-our-program .container ul.category{display:none}}&quot;,79,3,78,[19,20],80,3,79,[19],&quot;\n\t\n\t\n\n\t\n\n\t\n\t\n\t\n\t\n\n\n\t\n\t\n\t\t\n\t\n\t&quot;,81,3,80,[348],&quot;id=_6si-shortening&quot;,&quot;/* This stylesheet is created by 6sense */\n            .mktoForm .mktoFormRow:has(._6si_sff_filled) {\n                display: none;\n            }\n            .mktoForm .mktoFormRow ._6si_sff_filled {\n                display: none;\n            }\n            .hs-form .hs-form-field:has(._6si_sff_filled) {\n                display: none;\n            }\n            .hs-form .hs-form-field ._6si_sff_filled {\n                display: none;\n            }\n            form.form .form-field:not(.error):has(._6si_sff_filled) {\n                display: none;\n            }\n            form.form .form-field:not(.error) ._6si_sff_filled {\n                display: none;\n            }\n            .elq-form .row:has(._6si_sff_filled) {\n                display: none;\n            }\n            .elq-form .row ._6si_sff_filled {\n                display: none;\n            }\n            .elq-form .field-wrapper:has(._6si_sff_filled) {\n                display: none;\n            }\n            .elq-form .field-wrapper ._6si_sff_filled {\n                display: none;\n            }&quot;,82,5,&quot;DIV&quot;,&quot;id=root&quot;,&quot;data-path=https://www.simplilearn.com/&quot;,83,5,82,[19],&quot;\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t&quot;,84,5,83,[19,20],85,5,84,[19,20],86,5,85,[19],&quot;\n\t\n\t&quot;,87,5,86,[19],&quot;\n\n\t\n          &quot;,88,5,87,[19],&quot;\n  \n\t\n\t\n    &quot;,89,5,88,[19],&quot;\n  \n\t\n\t\n\t&quot;,90,5,89,[65],&quot;href=/css/home-new-lazy.nn9ogvln57.css&quot;,&quot;rel=stylesheet&quot;,91,5,90,&quot;IFRAME&quot;,&quot;style=position: absolute; top: -999px; left: -999px;&quot;,&quot;aria-hidden=true&quot;,&quot;src=https://xds.gsecondscreen.com/xds2/&quot;,&quot;class=gm-added gm-lazy&quot;,92,5,91,&quot;WEBENGAGEDATA&quot;,93,5,92,[19,260],94,5,93,&quot;NOSCRIPT&quot;,95,5,94,[437],96,5,95,[19],&quot;\n&quot;,97,5,96,[19,446],98,5,97,[19,446],99,5,98,[437],100,5,99,[19,446],101,5,100,[19],&quot;\n      &quot;,102,5,101,[437],103,5,102,[19,446],104,5,103,[19,446],105,5,104,[437],106,5,105,[19,446],107,5,106,[376],&quot;style=width: 0px; height: 0px; display: none; visibility: hidden;&quot;,&quot;id=batBeacon419577978152&quot;,108,12,[19],&quot;Simplilearn | Online Courses - Bootcamp &amp; Certification Platform&quot;,109,82,[19,20],110,82,109,[376],111,92,[348],&quot;type=text/css&quot;,&quot;#webklipper-publisher-widget-container, #webklipper-publisher-widget-container * {overflow:visible; -webkit-box-sizing: content-box; -moz-box-sizing: content-box;  box-sizing: content-box; margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline;}&quot;,112,92,111,[376],&quot;id=webklipper-publisher-widget-container&quot;,113,107,&quot;IMG&quot;,[492],&quot;id=batBeacon824667933341&quot;,&quot;width=0&quot;,&quot;height=0&quot;,&quot;src=https://bat.bing.com/action/0?ti=4002550&amp;Ver=2&amp;mid=a67bb0b3-7669-4a05-85c3-aa8d5dbf0100&amp;sid=1f5684705d7411efab59ebca8046ca7b&amp;vid=1f56ae505d7411ef92d96d6b06bdce59&amp;vids=0&amp;msclkid=N&amp;pi=918639831&amp;lg=en-US&amp;sw=1280&amp;sh=720&amp;sc=24&amp;tl=Simplilearn%20%7C%20Online%20Courses%20-%20Bootcamp%20%26%20Certification%20Platform&amp;p=https%3A%2F%2Fwww.simplilearn.com%2F&amp;r=&amp;lt=1124&amp;evt=pageLoad&amp;sv=1&amp;cdb=AQAQ&amp;rn=597746&quot;,114,110,[376],&quot;class=home-page&quot;,115,112,[421],&quot;name=webengage-engagement-callback-frame&quot;,&quot;id=webengage-engagement-callback-frame&quot;,&quot;frameborder=0&quot;,&quot;marginheight=0&quot;,&quot;marginwidth=0&quot;,&quot;style=position: absolute; background-color: transparent; bottom: 0px; right: 0px; border: medium; overflow: hidden; visibility: hidden; display: none;&quot;,[425],&quot;*O=true&quot;,116,112,115,[421],&quot;name=_we_wk_data_store&quot;,&quot;id=_we_wk_data_store&quot;,[532,533,534,535],&quot;src=https://311c5642.webengage.co/storage-frame-1.18.htm?cdn=y&amp;cbf=webengage-engagement-callback-frame&amp;lc=311c5642&quot;,[425],117,114,[376],&quot;id=offerbanner&quot;,118,114,117,[376],&quot;id=topsubmenu&quot;,&quot;class=top-sub-menu&quot;,&quot;style=display: block;&quot;,119,114,118,[376],&quot;id=HeaderMenu&quot;,120,114,119,[376],&quot;id=MegaMenuLatest&quot;,&quot;class=hide&quot;,121,114,120,[376],&quot;id=MegaMenuNew&quot;,[568],122,114,121,[376],&quot;id=homepageuniversitysliderbanner&quot;,123,114,122,[376],&quot;id=partner&quot;,124,114,123,[376],&quot;id=our-programs&quot;,125,114,124,[376],126,114,125,[376],&quot;id=reviews&quot;,&quot;class=bg-grad-dn&quot;,127,114,126,[376],&quot;id=supporting-enterprise&quot;,128,114,127,[376],&quot;class=trusted_by&quot;,129,114,128,[376],130,114,129,[376],&quot;id=stickyfooter&quot;,131,114,130,&quot;FOOTER&quot;,&quot;id=footer&quot;,132,114,131,[376],&quot;class=disc-section&quot;,&quot;id=disclaimers&quot;,133,117,[376],&quot;id=promotional-banner-inner-container&quot;,&quot;class=offer-pormo&quot;,134,118,[376],&quot;class=container&quot;,135,119,&quot;HEADER&quot;,&quot;id=topHeader&quot;,136,120,[376],&quot;class=mega-menu-overlay  &quot;,137,121,[376,646],138,122,[376],&quot;class=frs-slider   &quot;,139,123,[376],&quot;class=new-partner&quot;,140,124,[376],&quot;class=new-our-program&quot;,141,125,[376],&quot;class=bootcamp&quot;,142,126,[376],&quot;id=reviewRating&quot;,143,126,142,[376],&quot;class=reviews&quot;,144,127,[376],&quot;class=support-enter-main&quot;,145,128,[376,638],146,129,[376],&quot;class=free-app&quot;,147,130,[376],&quot;class=sticky-clear &quot;,148,131,[376],149,132,[376],&quot;class=container disclam-container&quot;,150,115,&quot;iframe:*D&quot;,[4,5,6],151,115,150,&quot;iframe:HTML&quot;,152,134,&quot;A&quot;,&quot;href=https://www.simplilearn.com/resources&quot;,&quot;rel=noreferrer&quot;,&quot;target=_blank&quot;,153,134,152,[707],&quot;href=https://www.simplilearn.com/business&quot;,[709,710],154,134,153,[707],&quot;href=https://www.simplilearn.com/become-our-trainer&quot;,[709,710],155,134,154,[707],&quot;href=https://www.simplilearn.com/simplirecruit-hire-employees-from-us&quot;,[709,710],156,134,155,[707],&quot;href=https://www.simplilearn.com/reviews&quot;,[709,710],157,135,[376,638],158,136,[376,638],159,137,[376,638],160,138,[376],&quot;class=card slid-detail  ey-slide&quot;,&quot;id=home-university-program-banner&quot;,161,139,[376,638],&quot;id=partner-scroll&quot;,162,140,[376,638],163,141,[376,638],164,142,[376],&quot;class=container pad-t-b&quot;,165,143,[376,638],&quot;id=homepagereviewslider&quot;,166,144,[376,638],167,145,&quot;SPAN&quot;,168,145,167,[376],&quot;class=trust-logos&quot;,169,146,[376,638],170,147,[376],&quot;class=sticky-footer-gdpr&quot;,171,147,170,[376,638],172,148,[376],&quot;class=mobile-footer&quot;,173,148,172,[376],&quot;class=hidden-mobile footer-links&quot;,174,149,&quot;UL&quot;,175,151,[14,15],176,151,175,[24],177,152,[19],&quot;Resources&quot;,178,153,[19],&quot;Simplilearn for Business&quot;,179,154,[19],&quot;Become an Instructor&quot;,180,155,[19],&quot;Hire From Us&quot;,181,156,[19],&quot;Reviews&quot;,182,157,[707,215],&quot;class=logo&quot;,183,157,182,&quot;NAV&quot;,&quot;class=links-left&quot;,184,157,183,[835],&quot;class=links-right&quot;,185,158,[376],&quot;class=mega-menu isMain&quot;,186,159,[376,845],187,160,[376],&quot;class=ul-iners&quot;,188,160,187,[376],&quot;class=view-more-btn-fixed banner-arrows&quot;,189,161,&quot;P&quot;,190,161,189,[376],&quot;class=partners-info partner-desk&quot;,191,162,&quot;H1&quot;,192,162,191,[860],193,162,192,[376],&quot;class=desk-program&quot;,194,163,[772],195,163,194,&quot;H2&quot;,196,163,195,[800],197,164,[376],&quot;class=left-clm&quot;,198,164,197,[376],&quot;class=right-clm&quot;,199,165,[376,653],200,166,[376],&quot;class=team-training&quot;,201,166,200,[376],&quot;class=support-enter&quot;,202,167,[19],&quot;Awards and Accolades&quot;,203,168,[707],&quot;rel=noreferrer nofollow&quot;,&quot;class=&quot;,&quot;href=https://trainingindustry.com/top-training-companies/it-and-technical-training/2023-top-it-training-companies/&quot;,[710],204,168,203,[707,917,918],&quot;href=https://stevieawards.com/sales/2024-stevie-award-winners#CustomerServiceSuccess&quot;,[710],205,168,204,[707,917,918,925,710],206,168,205,[707,917,918],&quot;href=https://www.ielassoc.org/past-winners-bd-2022&quot;,[710],207,168,206,[707,917,918,925,710],208,169,[376],&quot;class=left-app&quot;,209,169,208,[376],&quot;class=right-app&quot;,210,170,[376,638],211,171,[376],&quot;class=callbackleadform&quot;,&quot;id=callbackleadform&quot;,212,172,[860,918],213,173,[376],214,173,213,[376],&quot;class=footer-end&quot;,215,174,&quot;LI&quot;,216,174,215,[971],217,174,216,[971],218,174,217,[971],219,174,218,[971],220,174,219,[971],221,174,220,[971],222,174,221,[971],223,174,222,[971],224,174,223,[971],225,174,224,[971],226,174,225,[971],227,174,226,[971],228,174,227,[971],229,174,228,[971],230,174,229,[971],231,174,230,[971],232,174,231,[971],233,174,232,[971],234,182,[517],&quot;src=https://www.simplilearn.com/ice9/new_logo.svgz&quot;,&quot;width=100&quot;,&quot;height=31&quot;,&quot;data-gumlet=false&quot;,&quot;class=gm-lazy&quot;,235,183,[376],&quot;id=menu-button&quot;,236,183,235,[376],&quot;id=mega-menu-button&quot;,&quot;class=mega-menu-button&quot;,237,183,236,[376],&quot;class=search_topbar&quot;,&quot;id=search_topbar&quot;,238,184,[707],&quot;href=https://lms.simplilearn.com&quot;,&quot;class=login&quot;,239,185,[376],&quot;class=mega-menu-category&quot;,240,185,239,[376],&quot;class=mega-menu-program-main-conatiner&quot;,241,186,[376,1076],242,186,241,[376,1081],243,187,[800],&quot;class=c_list&quot;,&quot;style=position: relative; transform: translate3d(-2560px, 0px, 0px); width: 6000px; transition: 0.3s;&quot;,244,188,[772],&quot;class=c_arrow c_prev&quot;,245,188,244,[772],&quot;class=c_arrow c_next hide-btn&quot;,246,188,245,[376],&quot;class=view-more-btn&quot;,247,189,[19],&quot;Partnering with world&apos;s leading universities and companies&quot;,248,190,[376],249,191,[19],&quot;Get Certified, Get Ahead with Our Programs&quot;,250,192,[19],&quot;Learn from global experts and get certified by the world&apos;s leading universities&quot;,251,193,[835,918],252,193,251,[376],&quot;class=card-list-dk&quot;,253,194,[19],&quot; &quot;,254,194,253,[19],&quot;Our Online Bootcamp&quot;,255,195,[19],&quot;An immersive learning experience&quot;,256,196,[971],257,196,256,[971],258,196,257,[971],259,196,258,[971],260,197,[884],261,197,260,[800],&quot;class=rating&quot;,262,198,[707],&quot;class=vid-wrapper play-anim&quot;,&quot;href=&quot;,&quot;rel=noopener&quot;,263,199,[376],&quot;class=card slid-detail  &quot;,&quot;id=home-review&quot;,264,200,[884],265,200,264,[860],266,200,265,[707,715,710],&quot;class=explore terms-btn&quot;,[709],267,201,[376],&quot;class=map-bg&quot;,268,203,[376],&quot;class=award-img&quot;,269,203,268,[772],270,203,269,[860],271,204,[376,1198],272,204,271,[772],273,204,272,[860],274,205,[376,1198],275,205,274,[772],276,205,275,[860],277,206,[376,1198],278,206,277,[772],279,206,278,[860],280,207,[376,1198],281,207,280,[772],282,207,281,[860],283,208,[884],284,208,283,[860],285,208,284,[376],&quot;class=free-app-img&quot;,286,209,[376],&quot;class=qr-code&quot;,287,209,286,[376],&quot;class=google-play-app&quot;,288,210,[376],&quot;class=footer_sticky_bar&quot;,289,211,[376],&quot;class=mobile-sticky-form query-success-form &quot;,290,212,[19],&quot;© ▫▫▫▫ -&quot;,291,212,290,[19],&quot;▫▫▫▫&quot;,292,212,291,[19],&quot;- &quot;,293,212,292,[19],&quot;Simplilearn Solutions&quot;,294,212,293,[19],&quot;.&quot;,295,213,[376],&quot;class=container footer-container&quot;,296,214,[376],&quot;class=simpli_certification container&quot;,297,215,[19],&quot;Disclaimer&quot;,298,216,[19],&quot;PMP, PMI, PMBOK, CAPM, PgMP, PfMP, ACP, PBA, RMP, SP, and ▪▪▪▫ are registered marks of the Project Management Institute, Inc.&quot;,299,217,[19],&quot;ITIL® is a registered trade mark of AXELOS Limited, used under permission of AXELOS Limited. All rights reserved.&quot;,300,218,[19],&quot;IT Infrastructure Library is a [registered] trade mark of AXELOS Limited used, under permission of AXELOS Limited. All rights reserved.&quot;,301,219,[19],&quot;The Swirl logo™ is a trade mark of AXELOS Limited, used under permission of AXELOS Limited. All rights reserved.&quot;,302,220,[19],&quot;▪▪▪▪▪▪▫® is a [registered] trade mark of AXELOS Limited, used under permission of AXELOS Limited. All rights reserved.&quot;,303,221,[19],&quot;MSP® is a [registered] trade mark of AXELOS Limited, used under permission of AXELOS Limited. All rights reserved.&quot;,304,222,[19],&quot;Certified ScrumMaster® (CSM) and Certified Scrum Trainer® (CST) are registered trademarks of SCRUM ALLIANCE®&quot;,305,223,[19],&quot;Professional Scrum Master is a registered trademark of Scrum.org&quot;,306,224,[19],&quot;The APMG-International Finance for Non-Financial Managers and Swirl Device logo is a trade mark of The APM Group Limited.&quot;,307,225,[19],&quot;The Open Group®, TOGAF® are trademarks of The Open Group.&quot;,308,226,[19],&quot;IIBA®, the IIBA® logo, BABOK® and Business Analysis Body of Knowledge® are registered trademarks owned by International Institute of Business Analysis. &quot;,309,227,[19],&quot;CBAP® is a registered certification mark owned by International Institute of Business Analysis. Certified Business Analysis Professional, EEP and the EEP logo are trademarks owned by International Institute of Business Analysis.&quot;,310,228,[19],&quot;COBIT® is a trademark of ISACA® registered in the United States and other countries.&quot;,311,229,[19],&quot;CISA® is a Registered Trade Mark of the Information Systems Audit and Control Association (ISACA) and the IT Governance Institute.&quot;,312,230,[19],&quot;CISSP® is a registered mark of The International Information Systems Security Certification Consortium ((▪▪▪)▫). &quot;,313,231,[19],&quot;CISCO®, CCNA®, and CCNP® are trademarks of Cisco and registered trademarks in the United States and certain other countries.&quot;,314,232,[19],&quot;Simplilearn and its affiliates, predecessors, successors and assigns are in no way associated, sponsored or promoted by SAP SE and neither do they provide any SAP based online or real-time courses or trainings&quot;,315,233,[19],&quot;The KPMG name and logo are trademarks used under license by the independent member firms of the KPMG global organization. KPMG International’s Trademarks are the sole property of KPMG International and their use here does not imply auditing by or endorsement of KPMG International or any of its member firms.&quot;,316,235,[772],&quot;class=courses-menu&quot;,317,236,[772],&quot;class=courses-mega-menu&quot;,318,237,[772],&quot;class=s_icon toogle-search-icon&quot;,319,237,318,[376],&quot;class=search&quot;,&quot;id=homepage-search-form&quot;,320,237,319,[376],&quot;class=searchDropdown false&quot;,&quot;id=searchDropdown&quot;,321,238,[19],&quot; Log in&quot;,322,239,[868],&quot;class=menu-heading&quot;,323,239,322,[800],&quot;class=category-list objective-list&quot;,324,239,323,[868],&quot;class=menu-heading border-top&quot;,325,239,324,[800],&quot;class=category-list  hide-btm-border&quot;,326,240,[376],&quot;class=mega-menu-program-conatiner mega-menu-bottom-padding&quot;,327,241,[868,1419],328,241,327,[800],&quot;class=category-list&quot;,329,242,[376],&quot;class=mega-menu-program-conatiner&quot;,330,242,329,[376],&quot;class=explore-btn&quot;,331,243,[971],&quot;id=ey-banner-li&quot;,&quot;class=ai-banner&quot;,&quot;style=width: 1280px;&quot;,332,243,331,[971],&quot;class=home-bootcamp&quot;,&quot;id=home-banner-li&quot;,[1461],333,243,332,[971],&quot;id=certification-banner-li&quot;,&quot;class=certification-banner ai-banner&quot;,&quot;style=background:linear-gradient(99deg, #0092D1 1.55%, #000 26.98%, #000506 29.29%, #00080B 64.42%, #0092D1 102.02%);&quot;,334,244,[19],&quot;prev&quot;,335,245,[19],&quot;Next&quot;,336,246,[772],&quot;class=c_bullet_mobile_home-university-program-banner_0&quot;,&quot;data-slider-index=0&quot;,337,246,336,[772],&quot;class=c_bullet_mobile_home-university-program-banner_1&quot;,&quot;data-slider-index=1&quot;,338,246,337,[772],&quot;class=c_bullet_mobile_home-university-program-banner_2 active_tab&quot;,&quot;data-slider-index=2&quot;,339,248,[376],&quot;class=part-card&quot;,340,251,[884],341,251,340,[376,1446],342,252,[707],&quot;class=card certificate-card&quot;,&quot;href=/project-management/pmp-certification-training&quot;,[710],343,252,342,[707],&quot;class=card &quot;,&quot;href=/pgp-advanced-executive-program-in-cyber-security&quot;,[710],344,252,343,[707,1522],&quot;href=/artificial-intelligence-masters-program-training-course&quot;,[710],345,252,344,[707,1515],&quot;href=/agile-and-scrum/csm-certification-training&quot;,[710],346,252,345,[707,1522],&quot;href=/iitk-professional-certificate-course-ai-machine-learning&quot;,[710],347,252,346,[707],&quot;class=card master-card&quot;,&quot;href=/data-analyst-masters-certification-training-course&quot;,[710],348,252,347,[707,1547],&quot;href=/business-analyst-certification-training-course&quot;,[710],349,252,348,[707,1522],&quot;href=/iitk-professional-certificate-course-data-analytics&quot;,[710],350,252,349,[707,1515],&quot;href=/it-service-management/itil-foundation-training&quot;,[710],351,252,350,[707,1522],&quot;href=/iitk-professional-certificate-course-data-science&quot;,[710],352,252,351,[707,1522],&quot;href=/product-management-certification-training-course&quot;,[710],353,252,352,[707,1547],&quot;href=/big-data-and-analytics/senior-data-scientist-masters-program-training&quot;,[710],354,252,353,[707,1547],&quot;href=/azure-cloud-architect-certification-training-course&quot;,[710],355,252,354,[707,1522],&quot;href=/ui-ux-certification-training-course&quot;,[710],356,252,355,[707,1522],&quot;href=/vapt-vulnerability-assessment-penetration-testing-certification&quot;,[710],357,252,356,[376],&quot;class=view-all&quot;,358,256,[376],&quot;class=bootcamp-img&quot;,359,256,358,[376],&quot;class=bootcamp-info&quot;,360,257,[376,1612],361,257,360,[376,1617],362,258,[376,1612],363,258,362,[376,1617],364,259,[376,1612],365,259,364,[376,1617],366,260,[19],&quot;Hear it &quot;,367,260,366,&quot;BR&quot;,368,260,367,[19],&quot; from our Alumni&quot;,369,260,368,[19],&quot;  &quot;,370,261,[971],371,261,370,[971],372,261,371,[971],373,263,[376,852],374,263,373,[376],&quot;class=view-more-btn-fixed &quot;,375,264,[19],&quot;Employee and Team Training Solutions&quot;,376,265,[19],&quot;Curriculum tailored to your organization, delivered with white-glove service and support&quot;,377,266,[19],&quot;Request a Free Demo&quot;,378,267,[376],&quot;class=support-span&quot;,379,267,378,[707],&quot;href=https://www.simplilearn.com/corporate-training&quot;,[710],&quot;class=explore&quot;,[709],380,268,[517],&quot;class=gold-winner0 gm-lazy&quot;,&quot;width=16&quot;,&quot;height=9&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/form_opacity.png&quot;,&quot;data-src=https://www.simplilearn.com/ice9/assets/2023_Top20_Web_L_IT_v_3.png&quot;,381,269,[19],&quot;▫▫▫▫ Winner&quot;,382,270,[19],&quot;For IT &amp; Technical Training&quot;,383,271,[517],&quot;class=gold-winner1 gm-lazy&quot;,[1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/SASCS22_Gold_Winner_v_3.png&quot;,384,272,[19],&quot;▫▫▫▫ Gold Winner&quot;,385,273,[19],&quot;For Customer Service by Stevie Awards&quot;,386,274,[517],&quot;class=gold-winner2 gm-lazy&quot;,[1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/SACS_22_SILVER_v_3.png&quot;,387,275,[19],&quot;▫▫▫▫ Silver Winner&quot;,388,276,[19,1729],389,277,[517],&quot;class=gold-winner3 gm-lazy&quot;,[1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/Iela_Awards_2022_Bronze_SSPL.png&quot;,390,278,[19],&quot;▫▫▫▫ Bronze Winner&quot;,391,279,[19],&quot;For Learning Delivery Platform&quot;,392,280,[517],&quot;class=gold-winner4 gm-lazy&quot;,[1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/SACS_24_BRONZE_v_3.png&quot;,393,281,[19,1752],394,282,[19,1729],395,283,[19],&quot;Learn free on the App &quot;,396,284,[19],&quot;Download the lessons and learn anytime, anywhere from the free courses available on our app&quot;,397,285,[517],&quot;class=gm-lazy blend-mode&quot;,[1704,1705],&quot;src=https://www.simplilearn.com/ice9/assets/home/free-app.png&quot;,[1050],398,286,[860],399,286,398,[517,1780,1704,1705],&quot;src=https://www.simplilearn.com/ice9/assets/home/qr-code.jpg&quot;,[1050],400,287,[376],&quot;id=playStoreButtonId&quot;,401,289,[772],&quot;class=closeFooterCallBackForm&quot;,402,295,[376],&quot;class=col-md-2 foot-socials&quot;,403,295,402,[376],&quot;class=col-md-2 foot_company&quot;,404,295,403,[376],&quot;class=col-md-2 footer_workus&quot;,405,295,404,[376],&quot;class=col-md-2 footer_discover&quot;,406,295,405,[376],&quot;class=col-md-2 footer-disc&quot;,407,295,406,[376],&quot;class=brand-courses&quot;,408,296,&quot;BUTTON&quot;,&quot;class=ot-sdk-show-settings&quot;,&quot;id=oneTrustPopup&quot;,&quot;style=display:none&quot;,409,296,408,[800],&quot;class=simpli_terms&quot;,410,296,409,[376],&quot;class=footer_date&quot;,411,316,[772],412,317,[772],413,319,&quot;FORM&quot;,&quot;name=homepage-search-tag&quot;,&quot;action=/search-new&quot;,414,320,[376],&quot;class=search-recently-view&quot;,415,322,[19],&quot;OBJECTIVE&quot;,416,323,[971],&quot;class=menu-list menu-list-main active &quot;,417,323,416,[971],&quot;class=menu-list menu-list-main  &quot;,418,324,[19],&quot;CATEGORIES&quot;,419,325,[971],&quot;class=menu-list &quot;,420,325,419,[971,1881],421,325,420,[971,1881],422,325,421,[971,1881],423,325,422,[971,1881],424,325,423,[971,1881],425,325,424,[971,1881],426,325,425,[971,1881],427,325,426,[971,1881],428,325,427,[971,1881],429,325,428,[971,1881],430,325,429,[971,1881],431,325,430,[971,1881],432,326,[376],&quot;class=new-mega-menu-program&quot;,433,327,[19,1877],434,328,[971],&quot;class=menu-list active &quot;,435,328,434,[971,1881],436,328,435,[971,1881],437,328,436,[971,1881],438,328,437,[971,1881],439,328,438,[971,1881],440,328,439,[971,1881],441,328,440,[971,1881],442,328,441,[971,1881],443,328,442,[971,1881],444,328,443,[971,1881],445,328,444,[971,1881],446,328,445,[971,1881],447,329,[376],&quot;class=mega-menu-program&quot;,448,330,[707],&quot;href=/certifications/generative-ai-courses&quot;,449,331,[376],&quot;class=main-banner&quot;,450,332,[376],&quot;class=banner&quot;,[1461],451,333,[376,2000],452,339,[376],&quot;class=partner-head&quot;,&quot;a-ga4payload={\&quot;logoUrl\&quot;:\&quot;https://www.simplilearn.com/ice9/labels/iitkanpur_Home (1).svg\&quot;,\&quot;index\&quot;:0,\&quot;displayName\&quot;:\&quot;IIT Kanpur\&quot;,\&quot;partner_type\&quot;:\&quot;UNIVERSITY\&quot;}&quot;,453,339,452,[376,2012],&quot;a-ga4payload={\&quot;logoUrl\&quot;:\&quot;https://www.simplilearn.com/ice9/labels/iitRoorkee_Home.svg\&quot;,\&quot;index\&quot;:1,\&quot;displayName\&quot;:\&quot;IIT Roorkee\&quot;,\&quot;partner_type\&quot;:\&quot;UNIVERSITY\&quot;}&quot;,454,339,453,[376,2012],&quot;a-ga4payload={\&quot;logoUrl\&quot;:\&quot;https://www.simplilearn.com/ice9/labels/iitmadras_Home.svg\&quot;,\&quot;index\&quot;:2,\&quot;displayName\&quot;:\&quot;IITM Pravartak\&quot;,\&quot;partner_type\&quot;:\&quot;UNIVERSITY\&quot;}&quot;,455,339,454,[376,2012],&quot;a-ga4payload={\&quot;logoUrl\&quot;:\&quot;https://www.simplilearn.com/ice9/labels/iimindore_Home.svg\&quot;,\&quot;index\&quot;:3,\&quot;displayName\&quot;:\&quot;Indian Institute of Management Indore\&quot;,\&quot;partner_type\&quot;:\&quot;UNIVERSITY\&quot;}&quot;,456,339,455,[376,2012],&quot;a-ga4payload={\&quot;logoUrl\&quot;:\&quot;https://www.simplilearn.com/ice9/labels/Caltech_Home.svg\&quot;,\&quot;index\&quot;:4,\&quot;displayName\&quot;:\&quot;Caltech CTME\&quot;,\&quot;partner_type\&quot;:\&quot;UNIVERSITY\&quot;}&quot;,457,339,456,[376,2012],&quot;a-ga4payload={\&quot;logoUrl\&quot;:\&quot;https://www.simplilearn.com/ice9/labels/iiitb_Home.svg\&quot;,\&quot;index\&quot;:5,\&quot;displayName\&quot;:\&quot;IIIT Bangalore\&quot;,\&quot;partner_type\&quot;:\&quot;UNIVERSITY\&quot;}&quot;,458,339,457,[376,2012],&quot;a-ga4payload={\&quot;logoUrl\&quot;:\&quot;https://www.simplilearn.com/ice9/labels/AWS_Home.svg\&quot;,\&quot;index\&quot;:6,\&quot;displayName\&quot;:\&quot;AWS Partner\&quot;,\&quot;partner_type\&quot;:\&quot;COMPANY\&quot;}&quot;,&quot;id=last-partner-card&quot;,459,339,458,[376,2012],&quot;a-ga4payload={\&quot;logoUrl\&quot;:\&quot;https://www.simplilearn.com/ice9/accreditation_images/Product_Page_Logo_1/IBM_White_40.svgz\&quot;,\&quot;index\&quot;:7,\&quot;displayName\&quot;:\&quot;IBM\&quot;,\&quot;partner_type\&quot;:\&quot;COMPANY\&quot;}&quot;,460,339,459,[376,2012],&quot;a-ga4payload={\&quot;logoUrl\&quot;:\&quot;https://www.simplilearn.com/ice9/labels/Miscrosoft_Home.svg\&quot;,\&quot;index\&quot;:8,\&quot;displayName\&quot;:\&quot;Microsoft\&quot;,\&quot;partner_type\&quot;:\&quot;COMPANY\&quot;}&quot;,461,339,460,[376,2012],&quot;a-ga4payload={\&quot;logoUrl\&quot;:\&quot;https://www.simplilearn.com/ice9/labels/IITG_Home.svg\&quot;,\&quot;index\&quot;:9,\&quot;displayName\&quot;:\&quot;E &amp; ICT Academy, IIT Guwahati\&quot;,\&quot;partner_type\&quot;:\&quot;UNIVERSITY\&quot;}&quot;,462,339,461,[376,2012],&quot;a-ga4payload={\&quot;logoUrl\&quot;:\&quot;https://www.simplilearn.com/ice9/labels/SPJain_Home.svg\&quot;,\&quot;index\&quot;:10,\&quot;displayName\&quot;:\&quot;SP Jain School of Global Management\&quot;,\&quot;partner_type\&quot;:\&quot;UNIVERSITY\&quot;}&quot;,463,339,462,[376,2012],&quot;a-ga4payload={\&quot;logoUrl\&quot;:\&quot;https://www.simplilearn.com/ice9/labels/Purdue_Home.svg\&quot;,\&quot;index\&quot;:11,\&quot;displayName\&quot;:\&quot;Purdue University\&quot;,\&quot;partner_type\&quot;:\&quot;UNIVERSITY\&quot;}&quot;,464,340,[19],&quot;Categories&quot;,465,341,[376],&quot;class=show-list&quot;,466,342,[376],&quot;class=card-body&quot;,467,342,466,[376],&quot;class=prgram-schedule&quot;,468,343,[376,2081],469,343,468,[376,2086],470,344,[376,2081],471,344,470,[376,2086],472,345,[376,2081],473,345,472,[376,2086],474,346,[376,2081],475,346,474,[376,2086],476,347,[376,2081],477,347,476,[376,2086],478,348,[376,2081],479,348,478,[376,2086],480,349,[376,2081],481,349,480,[376,2086],482,350,[376,2081],483,350,482,[376,2086],484,351,[376,2081],485,351,484,[376,2086],486,352,[376,2081],487,352,486,[376,2086],488,353,[376,2081],489,353,488,[376,2086],490,354,[376,2081],491,354,490,[376,2086],492,355,[376,2081],493,355,492,[376,2086],494,356,[376,2081],495,356,494,[376,2086],496,357,[772],&quot;class=show&quot;,497,358,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/v1.gif&quot;,[1051],498,358,497,[19,1134],499,359,&quot;H4&quot;,500,359,499,[860],501,360,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/v2.gif&quot;,[1051],502,360,501,[19,1134],503,361,[2200],504,361,503,[860],505,362,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/v3.gif&quot;,[1051],506,362,505,[19,1134],507,363,[2200],508,363,507,[860],509,364,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/v4.gif&quot;,[1051],510,364,509,[19,1134],511,365,[2200],512,365,511,[860],513,370,[707],&quot;href=https://www.switchup.org/bootcamps/simplilearn&quot;,[710,917],514,371,[707],&quot;href=https://www.trustpilot.com/review/simplilearn.com&quot;,[710,917],515,372,[707],&quot;href=https://www.coursereport.com/schools/simplilearn&quot;,[710,917],516,373,[800,1092],&quot;style=position:relative&quot;,517,374,[772],&quot;class=c_arrow c_prev hide-btn&quot;,518,374,517,[772],&quot;class=c_arrow c_next&quot;,519,374,518,[376,1107],520,378,&quot;H3&quot;,521,378,520,[376],&quot;class=Enterprises-logo&quot;,522,379,[19,1687],523,398,[19],&quot;Scan this QR code on your camera app to download the app&quot;,524,400,[376],525,402,[860],&quot;class=follow-us&quot;,526,402,525,[707],&quot;href=https://www.simplilearn.com/refer-and-earn&quot;,[709,710],&quot;class=refer-earn&quot;,527,402,526,[707],&quot;class=share facebook&quot;,[709,710],&quot;href=https://www.facebook.com/simplilearn&quot;,528,402,527,[707],&quot;class=share twitter&quot;,[710,709],&quot;href=https://www.twitter.com/simplilearn&quot;,529,402,528,[707],&quot;class=share youtube&quot;,[710,709],&quot;href=https://www.youtube.com/user/Simplilearn&quot;,530,402,529,[707],&quot;class=share linkedin&quot;,[710,709],&quot;href=https://www.linkedin.com/company/simplilearn&quot;,531,402,530,[707],&quot;class=share telegram desktop&quot;,[710,709],&quot;href=https://web.telegram.org/#/im?p=@simplilearnupdates&quot;,532,402,531,[707],&quot;class=share telegram mobile&quot;,[710,709],&quot;href=https://t.me/simplilearnupdates&quot;,533,402,532,[707],&quot;class=share insta&quot;,[710,709],&quot;href=https://www.instagram.com/simplilearn_elearning/&quot;,534,403,[860,2306],535,403,534,[707],&quot;href=https://www.simplilearn.com/about-us&quot;,&quot;data-eventname=footer_company_link_clicked&quot;,536,403,535,[707],&quot;href=https://www.simplilearn.com/careers&quot;,[2371],537,403,536,[707],&quot;href=https://www.simplilearn.com/partners/sl/newsroom&quot;,[2371],538,403,537,[707,733,2371],539,403,538,[707],&quot;href=https://www.simplilearn.com/grievance-redressal&quot;,[2371],540,403,539,[707],&quot;href=https://www.simplilearn.com/contact-us&quot;,[2371],541,404,[860,2306],542,404,541,[707,721],&quot;data-eventname=footer_work_with_us_link_clicked&quot;,543,404,542,[707],&quot;href=https://www.simplilearn.com/guest-blogging&quot;,[2407],544,405,[376],545,405,544,[376],546,406,[860,2306],547,406,546,[707,709],&quot;href=https://play.google.com/store/apps/details?id=com.mobile.simplilearn&quot;,[710,918],548,406,547,[707,709],&quot;href=https://apps.apple.com/app/simplilearn/id963042747?ls=1&quot;,[710],&quot;class=ios-app&quot;,549,407,[376],550,407,549,[376],551,407,550,[376],552,407,551,[376],553,407,552,[376],554,408,[19],&quot;OK&quot;,555,409,[971],556,409,555,[971],557,409,556,[971],558,409,557,[971],&quot;id=footer-country&quot;,559,409,558,[971],&quot;class=copy_rights copy_address&quot;,560,409,559,[971],&quot;class=copy_rights&quot;,561,410,[19],&quot;▪▪▪▪_▫▫▫▫-▫▫-▫▫&quot;,562,411,[19],&quot;All Courses&quot;,563,412,[19,2493],564,413,&quot;INPUT&quot;,&quot;type=hidden&quot;,&quot;name=new_item_type&quot;,&quot;value=••••&quot;,565,413,564,[2499],&quot;id=header_srch&quot;,&quot;autocomplete=off&quot;,&quot;type=search&quot;,&quot;class=form-control input-search-field&quot;,&quot;name=tag&quot;,&quot;placeholder=•••• •• ••• •••• •• ••••••&quot;,566,413,565,[1832],&quot;type=submit&quot;,&quot;class=mobile-close-search&quot;,567,413,566,[1832,2517],&quot;class=input-search-btn&quot;,568,416,[707],&quot;href=#&quot;,569,417,[707,2527],570,419,[707],571,420,[707],572,421,[707],573,422,[707],574,423,[707],575,424,[707],576,425,[707],577,426,[707],578,427,[707],579,428,[707],580,429,[707],581,430,[707],582,431,[707],583,432,[376],&quot;class=new-menu-list w-100 blue-gradient&quot;,584,434,[707],585,435,[707],586,436,[707],587,437,[707],588,438,[707],589,439,[707],590,440,[707],591,441,[707],592,442,[707],593,443,[707],594,444,[707],595,445,[707],596,446,[707],597,447,[707],&quot;href=/applied-ai-course?eventname=Mega_Menu_New_Select_Course&quot;,598,447,597,[707],&quot;href=/generative-ai-for-business-transformation-course?eventname=Mega_Menu_New_Select_Course&quot;,599,447,598,[707],&quot;href=/iitg-generative-ai-machine-learning-program?eventname=Mega_Menu_New_Select_Course&quot;,600,447,599,[707],&quot;href=/iitk-professional-certificate-course-ai-machine-learning?eventname=Mega_Menu_New_Select_Course&quot;,601,447,600,[707],&quot;href=/pgp-ai-machine-learning-certification-training-course?eventname=Mega_Menu_New_Select_Course&quot;,602,448,[19],&quot;Explore Generative AI &quot;,603,449,[376,638],604,450,[376,638],605,451,[376,638],606,452,[707],607,453,[707],608,454,[707],609,455,[707],610,456,[707],611,457,[707],612,458,[707],613,459,[707],614,460,[707],615,461,[707],616,462,[707],617,463,[707],618,465,[376],&quot;class=category-tab active-tab&quot;,619,465,618,[376],&quot;class=category-tab &quot;,620,465,619,[376,2694],621,465,620,[376,2694],622,465,621,[376,2694],623,465,622,[376,2694],624,465,623,[376,2694],625,465,624,[376,2694],626,465,625,[376,2694],627,465,626,[376,2694],628,465,627,[376,2694],629,465,628,[376,2694],630,465,629,[376,2694],631,465,630,[376,2694],632,466,[376],&quot;class=card-banner crd-1&quot;,633,466,632,[376],&quot;class=card-info&quot;,634,467,[376],&quot;class=card-btm&quot;,635,467,634,[772],&quot;class=know-more&quot;,636,468,[376],&quot;class=card-banner &quot;,637,468,636,[376,2751],638,469,[376,2755],639,469,638,[772,2760],640,470,[376,2764],641,470,640,[376,2751],642,471,[376,2755],643,471,642,[772,2760],644,472,[376,2746],645,472,644,[376,2751],646,473,[376,2755],647,473,646,[772,2760],648,474,[376,2764],649,474,648,[376,2751],650,475,[376,2755],651,475,650,[772,2760],652,476,[376],&quot;class=card-banner grd-8&quot;,653,476,652,[376,2751],654,477,[376,2755],655,477,654,[772,2760],656,478,[376],&quot;class=card-banner grd-3&quot;,657,478,656,[376,2751],658,479,[376,2755],659,479,658,[772,2760],660,480,[376,2764],661,480,660,[376,2751],662,481,[376,2755],663,481,662,[772,2760],664,482,[376,2746],665,482,664,[376,2751],666,483,[376,2755],667,483,666,[772,2760],668,484,[376,2764],669,484,668,[376,2751],670,485,[376,2755],671,485,670,[772,2760],672,486,[376,2764],673,486,672,[376,2751],674,487,[376,2755],675,487,674,[772,2760],676,488,[376],&quot;class=card-banner grd-9&quot;,677,488,676,[376,2751],678,489,[376,2755],679,489,678,[772,2760],680,490,[376],&quot;class=card-banner grd-7&quot;,681,490,680,[376,2751],682,491,[376,2755],683,491,682,[772,2760],684,492,[376,2764],685,492,684,[376,2751],686,493,[376,2755],687,493,686,[772,2760],688,494,[376,2764],689,494,688,[376,2751],690,495,[376,2755],691,495,690,[772,2760],692,496,[19],&quot;View All&quot;,693,499,[19],&quot;Develop skills for real career growth&quot;,694,500,[19],&quot;Cutting-edge curriculum designed in guidance with industry and academia to develop job-ready skills&quot;,695,503,[19],&quot;Learn from experts active in their field, not out-of-touch trainers&quot;,696,504,[19],&quot;Leading practitioners who bring current best practices and case studies to sessions that fit into your work schedule.&quot;,697,507,[19],&quot;Learn by working on real-world problems&quot;,698,508,[19],&quot;Capstone projects involving real world data sets with virtual labs for hands-on learning&quot;,699,511,[19],&quot;Structured guidance ensuring learning never stops&quot;,700,512,[19],&quot;▫▫▪▫ Learning support from mentors and a community of like-minded peers to resolve any conceptual doubts&quot;,701,513,[772],&quot;class=val&quot;,702,513,701,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/switchup.png&quot;,[1051],703,513,702,[772],&quot;class=count hide&quot;,704,514,[772,3001],705,514,704,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/trustpilot_v1.png&quot;,[1051],706,514,705,[772],&quot;class=count&quot;,707,515,[772,3001],708,515,707,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/course-report.png&quot;,[1051],709,515,708,[772,3012],710,516,[971,918],711,516,710,[971,918],712,516,711,[971,918],713,516,712,[971,918],714,516,713,[971,918],715,516,714,[971,918],716,517,[19,1479],717,518,[19,1483],718,519,[772],&quot;class=active_tab c_bullet_mobile_home-review_0&quot;,[1488],719,519,718,[772],&quot;class=c_bullet_mobile_home-review_1&quot;,[1494],720,519,719,[772],&quot;class=c_bullet_mobile_home-review_2&quot;,[1500],721,519,720,[772],&quot;class=c_bullet_mobile_home-review_3&quot;,&quot;data-slider-index=3&quot;,722,519,721,[772],&quot;class=c_bullet_mobile_home-review_4&quot;,&quot;data-slider-index=4&quot;,723,519,722,[772],&quot;class=c_bullet_mobile_home-review_5&quot;,&quot;data-slider-index=5&quot;,724,520,[19],&quot;Supporting Enterprises Around the Globe&quot;,725,521,[376],&quot;class=map-company-logo&quot;,726,521,725,[376,3111],727,521,726,[376,3111],728,521,727,[376,3111],729,521,728,[376,3111],730,521,729,[376,3111],731,521,730,[376,3111],732,521,731,[376,3111],733,521,732,[376,3111],734,524,[707,710,709,2428],735,524,734,[707,710,709,2434],736,525,[19],&quot;Follow us!&quot;,737,526,[19],&quot;Refer and Earn&quot;,738,533,[772,918],739,534,[19],&quot;Company&quot;,740,535,[19],&quot; About us&quot;,741,536,[19],&quot;Careers&quot;,742,537,[19],&quot; Newsroom&quot;,743,538,[19],&quot; Alumni speak&quot;,744,539,[19],&quot; Grievance redressal&quot;,745,540,[19],&quot;Contact us&quot;,746,541,[19],&quot;Work with us&quot;,747,542,[19],&quot; Become an instructor&quot;,748,543,[19],&quot;Blog as guest&quot;,749,544,[860,2306],750,544,749,[707],&quot;href=https://www.simplilearn.com/skillup-free-online-courses&quot;,&quot;data-eventname=footer_discover_link_clicked&quot;,751,544,750,[707],&quot;href=https://www.simplilearn.com/skillup-sitemap&quot;,[3210],752,544,751,[707,708,3210],753,544,752,[707],&quot;href=https://www.simplilearn.com/feed&quot;,[3210],754,544,753,[707],&quot;href=https://www.simplilearn.com/city-sitemap&quot;,[3210],755,545,[860,2306],756,545,755,[707,1696],&quot;data-eventname=footer_for_business_clicked&quot;,[709,710],757,545,756,[707],&quot;href=https://www.simplilearn.com/learning-hub&quot;,[3240],758,545,757,[707],&quot;href=https://www.simplilearn.com/guaranteed-to-run-classes&quot;,[3240],759,545,758,[707],&quot;href=https://www.simplilearn.com/reseller-partner-program-for-training-courses&quot;,[3240],760,546,[19],&quot;Learn On the Go!&quot;,761,547,[19],&quot;Get the Android App&quot;,762,548,[19],&quot;Get the iOS App&quot;,763,549,[860],764,549,763,[707],&quot;href=https://www.simplilearn.com/artificial-intelligence-masters-program-training-course&quot;,765,549,764,[19],&quot; | &quot;,766,549,765,[707],&quot;href=https://www.simplilearn.com/pgp-cloud-computing-certification-training-course&quot;,767,549,766,[19,3284],768,549,767,[707],&quot;href=https://www.simplilearn.com/pgp-full-stack-web-development-certification-training-course&quot;,769,549,768,[19,3284],770,549,769,[707],&quot;href=https://www.simplilearn.com/pgp-data-science-certification-bootcamp-program&quot;,771,549,770,[19,3284],772,549,771,[707],&quot;href=https://www.simplilearn.com/product-management-certification-training-course&quot;,773,549,772,[19,3284],774,549,773,[707],&quot;href=https://www.simplilearn.com/blockchain-certification-training-course&quot;,775,549,774,[19,3284],776,549,775,[707],&quot;href=https://www.simplilearn.com/iitk-professional-certificate-course-ai-machine-learning&quot;,777,549,776,[19,3284],778,549,777,[707],&quot;href=https://www.simplilearn.com/pgp-advanced-executive-program-in-cyber-security&quot;,779,549,778,[19,3284],780,549,779,[707],&quot;href=https://www.simplilearn.com/pgp-project-management-certification-training-course&quot;,781,549,780,[19,3284],782,549,781,[707],&quot;href=https://www.simplilearn.com/pgp-lean-six-sigma-certification-training-course&quot;,783,549,782,[19,3284],784,549,783,[707],&quot;href=https://www.simplilearn.com/professional-certificate-program-cloud-computing-devops&quot;,785,549,784,[19,3284],786,549,785,[707],&quot;href=https://www.simplilearn.com/pgp-data-analytics-certification-training-course&quot;,787,549,786,[19,3284],788,549,787,[707],&quot;href=https://www.simplilearn.com/pgp-ai-machine-learning-certification-training-course&quot;,789,549,788,[19,3284],790,549,789,[707],&quot;href=https://www.simplilearn.com/pgp-business-analysis-certification-training-course&quot;,791,549,790,[19,3284],792,549,791,[707],&quot;href=https://www.simplilearn.com/pgp-data-engineering-certification-training-course&quot;,793,550,[860],794,550,793,[707],&quot;href=https://www.simplilearn.com/pmp-plus-bundle-masters-program&quot;,795,550,794,[19,3284],796,550,795,[707],&quot;href=https://www.simplilearn.com/big-data-and-analytics/senior-data-scientist-masters-program-training&quot;,797,550,796,[19,3284],798,550,797,[707],&quot;href=https://www.simplilearn.com/data-analyst-masters-certification-training-course&quot;,799,550,798,[19,3284],800,550,799,[707],&quot;href=https://www.simplilearn.com/masters-in-artificial-intelligence&quot;,801,550,800,[19,3284],802,550,801,[707],&quot;href=https://www.simplilearn.com/cloud-solutions-architect-masters-program-training&quot;,803,550,802,[19,3284],804,550,803,[707],&quot;href=https://www.simplilearn.com/devops-engineer-masters-program-certification-training&quot;,805,550,804,[19,3284],806,550,805,[707],&quot;href=https://www.simplilearn.com/master-in-digital-marketing&quot;,807,550,806,[19,3284],808,550,807,[707],&quot;href=https://www.simplilearn.com/cyber-security-expert-master-program-training-course&quot;,809,550,808,[19,3284],810,550,809,[707],&quot;href=https://www.simplilearn.com/business-analyst-certification-training-course&quot;,811,551,[860],812,551,811,[707],&quot;href=https://www.simplilearn.com/project-management/pmp-certification-training&quot;,813,551,812,[19,3284],814,551,813,[707],&quot;href=https://www.simplilearn.com/agile-and-scrum/csm-certification-training&quot;,815,551,814,[19,3284],816,551,815,[707],&quot;href=https://www.simplilearn.com/big-data-and-analytics/python-for-data-science-training&quot;,817,551,816,[19,3284],818,551,817,[707],&quot;href=https://www.simplilearn.com/cloud-computing/aws-solution-architect-associate-training&quot;,819,551,818,[19,3284],820,551,819,[707],&quot;href=https://www.simplilearn.com/cyber-security/ceh-certification&quot;,821,551,820,[19,3284],822,551,821,[707],&quot;href=https://www.simplilearn.com/aws-technical-essentials&quot;,823,551,822,[19,3284],824,551,823,[707],&quot;href=https://www.simplilearn.com/aws-devops-certification&quot;,825,551,824,[19,3284],826,551,825,[707],&quot;href=https://www.simplilearn.com/it-service-management/itil-foundation-training&quot;,827,551,826,[19,3284],828,551,827,[707],&quot;href=https://www.simplilearn.com/architecting-on-aws&quot;,829,551,828,[19,3284],830,551,829,[707],&quot;href=https://www.simplilearn.com/microsoft-azure-fundamentals-az-900-certification&quot;,831,551,830,[19,3284],832,551,831,[707],&quot;href=https://www.simplilearn.com/microsoft-certified-devops-engineer-expert&quot;,833,551,832,[19,3284],834,551,833,[707],&quot;href=https://www.simplilearn.com/agile-and-scrum/safe-agilist-certification-training&quot;,835,551,834,[19,3284],836,551,835,[707],&quot;href=https://www.simplilearn.com/cyber-security/cissp-certification-training&quot;,837,551,836,[19,3284],838,551,837,[707],&quot;href=https://www.simplilearn.com/tableau-training-and-data-visualization-course&quot;,839,551,838,[19,3284],840,551,839,[707],&quot;href=https://www.simplilearn.com/quality-management/lean-six-sigma-green-belt-training&quot;,841,551,840,[19,3284],842,551,841,[707],&quot;href=https://www.simplilearn.com/quality-management/lean-six-sigma-black-belt-training&quot;,843,551,842,[19,3284],844,551,843,[707],&quot;href=https://www.simplilearn.com/power-bi-certification-training-course&quot;,845,552,[860],846,552,845,[707],&quot;href=https://www.simplilearn.com/project-management&quot;,847,552,846,[19,3284],848,552,847,[707],&quot;href=https://www.simplilearn.com/certifications/aws-courses&quot;,849,552,848,[19,3284],850,552,849,[707],&quot;href=https://www.simplilearn.com/certifications/web-development-courses&quot;,851,552,850,[19,3284],852,552,851,[707],&quot;href=https://www.simplilearn.com/certifications&quot;,853,552,852,[19,3284],854,552,853,[707],&quot;href=https://www.simplilearn.com/certifications/generative-ai-courses&quot;,855,552,854,[19,3284],856,552,855,[707],&quot;href=https://www.simplilearn.com/agile-and-scrum&quot;,857,552,856,[19,3284],858,552,857,[707],&quot;href=https://www.simplilearn.com/cloud-computing&quot;,859,552,858,[19,3284],860,552,859,[707],&quot;href=https://www.simplilearn.com/cyber-security&quot;,861,552,860,[19,3284],862,552,861,[707],&quot;href=https://www.simplilearn.com/certifications/eccouncil-certifications&quot;,863,552,862,[19,3284],864,552,863,[707],&quot;href=https://www.simplilearn.com/certifications/peoplecert-certifications&quot;,865,552,864,[19,3284],866,552,865,[707],&quot;href=https://www.simplilearn.com/certifications/scrum-alliance-certifications&quot;,867,552,866,[19,3284],868,552,867,[707],&quot;href=https://www.simplilearn.com/certifications/scaled-agile-certifications&quot;,869,552,868,[19,3284],870,552,869,[707],&quot;href=https://www.simplilearn.com/certifications/google-cloud-courses&quot;,871,552,870,[19,3284],872,552,871,[707],&quot;href=https://www.simplilearn.com/certifications/isc2-certifications&quot;,873,552,872,[19,3284],874,552,873,[707],&quot;href=https://www.simplilearn.com/certifications/axelos-courses&quot;,875,552,874,[19,3284],876,552,875,[707],&quot;href=https://www.simplilearn.com/certifications/isaca-certifications&quot;,877,552,876,[19,3284],878,552,877,[707],&quot;href=https://www.simplilearn.com/certifications/pmi-certifications&quot;,879,552,878,[19,3284],880,552,879,[707],&quot;href=https://www.simplilearn.com/certifications/comptia-certifications&quot;,881,552,880,[19,3284],882,552,881,[707],&quot;href=https://www.simplilearn.com/certifications/microsoft-certification&quot;,883,553,[860],884,553,883,[707],&quot;href=https://www.simplilearn.com/tutorials/python-tutorial&quot;,885,553,884,[19,3284],886,553,885,[707],&quot;href=https://www.simplilearn.com/tutorials/javascript-tutorial&quot;,887,553,886,[19,3284],888,553,887,[707],&quot;href=https://www.simplilearn.com/tutorials/java-tutorial&quot;,889,553,888,[19,3284],890,553,889,[707],&quot;href=https://www.simplilearn.com/tutorials/angular-tutorial&quot;,891,553,890,[19,3284],892,553,891,[707],&quot;href=https://www.simplilearn.com/tutorials/nodejs-tutorial&quot;,893,553,892,[19,3284],894,553,893,[707],&quot;href=https://www.simplilearn.com/tutorials/docker-tutorial&quot;,895,553,894,[19,3284],896,553,895,[707],&quot;href=https://www.simplilearn.com/tutorials/git-tutorial&quot;,897,553,896,[19,3284],898,553,897,[707],&quot;href=https://www.simplilearn.com/tutorials/kubernetes-tutorial&quot;,899,553,898,[19,3284],900,553,899,[707],&quot;href=https://www.simplilearn.com/tutorials/power-bi-tutorial&quot;,901,553,900,[19,3284],902,553,901,[707],&quot;href=https://www.simplilearn.com/tutorials/css-tutorial&quot;,903,555,[707],&quot;href=https://www.simplilearn.com/terms-and-conditions#terms-and-conditions&quot;,&quot;rel=nofollow&quot;,904,556,[707],&quot;href=https://www.simplilearn.com/terms-and-conditions#privacy-policy&quot;,[3902],905,557,[707],&quot;href=https://www.simplilearn.com/terms-and-conditions#refund-policy&quot;,[3902],906,560,[19],&quot;© ▫▫▫▫-&quot;,907,560,906,[19,1288],908,560,907,[19],&quot; - &quot;,909,560,908,[19,1298],910,560,909,[19],&quot;. All Rights Reserved. The certification names are the trademarks of their respective owners.&quot;,911,567,[772],&quot;class=search_icon input-search-icon&quot;,912,568,[19],&quot;Certification&quot;,913,569,[19],&quot;Career Aligned Learning Path&quot;,914,570,[19],&quot;Generative AI&quot;,915,571,[19],&quot;AI &amp; Machine Learning&quot;,916,572,[19],&quot;Data Science &amp; Business Analytics&quot;,917,573,[19],&quot;Project Management&quot;,918,574,[19],&quot;Cyber Security&quot;,919,575,[19],&quot;Agile and Scrum&quot;,920,576,[19],&quot;Cloud Computing &amp; DevOps&quot;,921,577,[19],&quot;Business and Leadership&quot;,922,578,[19],&quot;Software Development&quot;,923,579,[19],&quot;Product and Design&quot;,924,580,[19],&quot;IT Service and Architecture&quot;,925,581,[19],&quot;Quality Management&quot;,926,582,[19],&quot;Digital Marketing&quot;,927,583,[376],&quot;class=new-megamenu-heading title-blue-gradient&quot;,928,583,927,[376],&quot;class=new-mega-coloum&quot;,929,584,[19,3950],930,585,[19,3954],931,586,[19,3958],932,587,[19,3962],933,588,[19,3966],934,589,[19,3970],935,590,[19,3974],936,591,[19,3978],937,592,[19,3982],938,593,[19,3986],939,594,[19,3990],940,595,[19,3994],941,596,[19,3998],942,597,[376],&quot;class=program-card&quot;,943,598,[376,4050],944,599,[376,4050],945,600,[376,4050],946,601,[376,4050],947,603,[376],&quot;class=ai-left-info&quot;,948,603,947,[376],&quot;class=ai-right-img&quot;,949,604,[376,892],950,604,949,[376,897],951,605,[376,4066],952,605,951,[376,4071],953,606,[517],&quot;draggable=false&quot;,&quot;class=parner-logo gm-lazy gm-loaded gm-observing gm-observing-cb&quot;,[1704,1705],&quot;src=https://www.simplilearn.com/ice9/labels/iitkanpur_Home%20(1).svg?w=240&amp;dpr=1.5&quot;,954,607,[517,4089,4090,1704,1705],&quot;src=https://www.simplilearn.com/ice9/labels/iitRoorkee_Home.svg?w=320&amp;dpr=1.5&quot;,955,608,[517,4089,4090,1704,1705],&quot;src=https://www.simplilearn.com/ice9/labels/iitmadras_Home.svg?w=160&amp;dpr=1.5&quot;,956,609,[517,4089,4090,1704,1705],&quot;src=https://www.simplilearn.com/ice9/labels/iimindore_Home.svg?w=240&amp;dpr=1.5&quot;,957,610,[517,4089,4090,1704,1705],&quot;src=https://www.simplilearn.com/ice9/labels/Caltech_Home.svg?w=320&amp;dpr=1.5&quot;,958,611,[517,4089,4090,1704,1705],&quot;src=https://www.simplilearn.com/ice9/labels/iiitb_Home.svg?w=100&amp;dpr=1.5&quot;,959,612,[517,4089,4090,1704,1705],&quot;src=https://www.simplilearn.com/ice9/labels/AWS_Home.svg?w=128&amp;dpr=1.5&quot;,960,613,[517,4089,4090,1704,1705],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Product_Page_Logo_1/IBM_White_40.svgz?w=1200&amp;dpr=1.5&quot;,961,614,[517,4089,4090,1704,1705],&quot;src=https://www.simplilearn.com/ice9/labels/Miscrosoft_Home.svg?w=240&amp;dpr=1.5&quot;,962,615,[517,4089],&quot;class=parner-logo gm-lazy&quot;,[1704,1705],&quot;src=https://www.simplilearn.com/ice9/labels/IITG_Home.svg&quot;,963,616,[517,4089,4128,1704,1705],&quot;src=https://www.simplilearn.com/ice9/labels/SPJain_Home.svg&quot;,964,617,[517,4089,4128,1704,1705],&quot;src=https://www.simplilearn.com/ice9/labels/Purdue_Home.svg&quot;,965,618,[707,1171],966,619,[707,1996],967,620,[707],&quot;href=/ai-and-machine-learning&quot;,968,621,[707],&quot;href=/data-science-and-business-analytics&quot;,969,622,[707],&quot;href=/project-management&quot;,970,623,[707],&quot;href=/cyber-security&quot;,971,624,[707],&quot;href=/agile-and-scrum&quot;,972,625,[707],&quot;href=/cloud-computing&quot;,973,626,[707],&quot;href=/business-and-leadership-certification-training-courses&quot;,974,627,[707],&quot;href=/mobile-and-software-development&quot;,975,628,[707],&quot;href=/product-and-design&quot;,976,629,[707],&quot;href=/it-service-management&quot;,977,630,[707],&quot;href=/quality-management&quot;,978,631,[707],&quot;href=/digital-marketing&quot;,979,633,[376],&quot;class=card-logo&quot;,980,633,979,[884],981,633,980,[376],&quot;class=card-list&quot;,982,634,[772],&quot;class=months&quot;,983,634,982,[772],&quot;class=cohort&quot;,984,634,983,[19],985,635,[707],986,636,[517],&quot;class=program-img gm-lazy gm-loaded gm-observing gm-observing-cb&quot;,&quot;src=https://www.simplilearn.com/ice9/banners/IIITB_Thumbnail_image.jpg?w=300&amp;dpr=1.5&quot;,987,637,[376,4196],988,637,987,[884],989,637,988,[376,4205],990,638,[772,4209],991,638,990,[772,4214],992,639,[707],993,640,[517,4225],&quot;src=https://www.simplilearn.com/ice9/banners/2020-05-21.jpg?w=300&amp;dpr=1.5&quot;,994,641,[376,4196],995,641,994,[884],996,641,995,[376,4205],997,642,[772,4209],998,642,997,[772,4214],999,643,[707],1000,645,[376,4196],1001,645,1000,[884],1002,645,1001,[376,4205],1003,646,[772,4209],1004,646,1003,[772,4214],1005,646,1004,[19],1006,647,[707],1007,648,[517],&quot;class=program-img gm-lazy gm-added&quot;,&quot;src=https://www.simplilearn.com/ice9/banners/thumbnail-iit-blockchain.jpg&quot;,1008,649,[376,4196],1009,649,1008,[884],1010,649,1009,[376,4205],1011,650,[772,4209],1012,650,1011,[772,4214],1013,651,[707],1014,653,[376,4196],1015,653,1014,[884],1016,653,1015,[376,4205],1017,654,[772,4209],1018,654,1017,[772,4214],1019,654,1018,[19],1020,655,[707],1021,657,[376,4196],1022,657,1021,[884],1023,657,1022,[376,4205],1024,658,[772,4209],1025,658,1024,[772,4214],1026,658,1025,[19],1027,659,[707],1028,660,[517,4301,4302],1029,661,[376,4196],1030,661,1029,[884],1031,661,1030,[376,4205],1032,662,[772,4209],1033,662,1032,[772,4214],1034,663,[707],1035,665,[376,4196],1036,665,1035,[884],1037,665,1036,[376,4205],1038,666,[772,4209],1039,666,1038,[772,4214],1040,666,1039,[19],1041,667,[707],1042,668,[517,4301,4302],1043,669,[376,4196],1044,669,1043,[884],1045,669,1044,[376,4205],1046,670,[772,4209],1047,670,1046,[772,4214],1048,671,[707],1049,672,[517,4301],&quot;src=https://www.simplilearn.com/ice9/banners/Thumbnailimage.jpg&quot;,1050,673,[376,4196],1051,673,1050,[884],1052,673,1051,[376,4205],1053,674,[772,4209],1054,674,1053,[772,4214],1055,675,[707],1056,677,[376,4196],1057,677,1056,[884],1058,677,1057,[376,4205],1059,678,[772,4209],1060,678,1059,[772,4214],1061,678,1060,[19],1062,679,[707],1063,681,[376,4196],1064,681,1063,[884],1065,681,1064,[376,4205],1066,682,[772,4209],1067,682,1066,[772,4214],1068,682,1067,[19],1069,683,[707],1070,684,[517,4301],&quot;src=https://www.simplilearn.com/ice9/banners/IIITB_Thumbnail_image.jpg&quot;,1071,685,[376,4196],1072,685,1071,[884],1073,685,1072,[376,4205],1074,686,[772,4209],1075,686,1074,[772,4214],1076,687,[707],1077,688,[517,4301],&quot;src=https://www.simplilearn.com/ice9/banners/IITkanpurcyber.jpg&quot;,1078,689,[376,4196],1079,689,1078,[884],1080,689,1079,[376,4205],1081,690,[772,4209],1082,690,1081,[772,4214],1083,691,[707],1084,701,[19],&quot;▫.▫&quot;,1085,703,[19],&quot;Reviews &quot;,1086,703,1085,&quot;B&quot;,1087,704,[19,4575],1088,706,[19,4579],1089,706,1088,[4583],1090,707,[19,4575],1091,709,[19,4579],1092,709,1091,[4583],1093,710,[376],&quot;class=review-card&quot;,1094,711,[376,4607],1095,712,[376,4607],1096,713,[376,4607],1097,714,[376,4607],1098,715,[376,4607],1099,725,[19,1134],1100,725,1099,[517],&quot;class=show-mobile gm-lazy&quot;,[1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/EY_home.png&quot;,1101,726,[19,1134],1102,726,1101,[517,4630,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/dell.png&quot;,1103,727,[19,1134],1104,727,1103,[517,4630,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/BCG_home.png&quot;,1105,728,[19,1134],1106,728,1105,[517,4630,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/vodafone.png&quot;,1107,729,[19,1134],1108,729,1107,[517,4630,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/HP_home.png&quot;,1109,730,[19,1134],1110,730,1109,[517,4630,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/Bosch.png&quot;,1111,731,[19,1134],1112,731,1111,[517,4630,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/MPhasis_v_1_01.png&quot;,1113,732,[19,1134],1114,732,1113,[517,4630,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/AIRBUS_home.png&quot;,1115,733,[19,1134],1116,733,1115,[517,4630,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/assets/home/The-World-Bank_home.png&quot;,1117,734,[517,1780,1704,1705],&quot;src=https://www.simplilearn.com/ice9/assets/home/android.svgz&quot;,[709],1118,735,[517,1780,1704,1705],&quot;src=https://www.simplilearn.com/ice9/assets/home/IOS.svgz&quot;,[709],1119,749,[19],&quot;Discover&quot;,1120,750,[19],&quot;Free Courses&quot;,1121,751,[19],&quot;Skillup Sitemap&quot;,1122,752,[19,811],1123,753,[19],&quot;RSS feed&quot;,1124,754,[19],&quot;City Sitemap&quot;,1125,755,[19],&quot;For Businesses&quot;,1126,756,[19],&quot;Corporate training&quot;,1127,757,[19],&quot;Simplilearn Learning Hub+&quot;,1128,758,[19],&quot;Guaranteed-to-run Classes&quot;,1129,759,[19],&quot;Partners&quot;,1130,763,[19],&quot;Trending Post Graduate Programs&quot;,1131,764,[19],&quot;Artificial Intelligence Course&quot;,1132,766,[19],&quot;Cloud Computing Certification Course&quot;,1133,768,[19],&quot;Full Stack Web Development Course&quot;,1134,770,[19],&quot;PG in Data Science&quot;,1135,772,[19],&quot;Product Management Certification Course&quot;,1136,774,[19],&quot;Blockchain Course&quot;,1137,776,[19],&quot;Machine Learning Course&quot;,1138,778,[19],&quot;Cyber Security Course in India&quot;,1139,780,[19],&quot;Project Management Certification Course&quot;,1140,782,[19],&quot;Lean Six Sigma Certification Course&quot;,1141,784,[19],&quot;Cloud Computing and DevOps - IITG&quot;,1142,786,[19],&quot;Data Analytics Program&quot;,1143,788,[19],&quot;AI and ML Course&quot;,1144,790,[19],&quot;Business Analysis Certification Course&quot;,1145,792,[19],&quot;Data Engineering Certification Courses&quot;,1146,793,[19],&quot;Trending Master Programs&quot;,1147,794,[19],&quot;PMP Plus Certification Training Course&quot;,1148,796,[19],&quot;Data Science Certifiation Course&quot;,1149,798,[19],&quot;Data Analyst Course&quot;,1150,800,[19],&quot;Masters in Artificial Intelligence&quot;,1151,802,[19],&quot;Cloud Architect Certification Training Course&quot;,1152,804,[19],&quot;DevOps Engineer Certification Training Course&quot;,1153,806,[19],&quot;Digital Marketing Course&quot;,1154,808,[19],&quot;Cyber Security Expert Course&quot;,1155,810,[19],&quot;Business Analyst Course&quot;,1156,811,[19],&quot;Trending Courses&quot;,1157,812,[19],&quot;PMP Certification Training Course&quot;,1158,814,[19],&quot;CSM Certification Course&quot;,1159,816,[19],&quot;Data Science with Python Course&quot;,1160,818,[19],&quot;AWS Certification&quot;,1161,820,[19],&quot;CEH Certification&quot;,1162,822,[19],&quot;AWS Technical Essentials&quot;,1163,824,[19],&quot;AWS DevOps Certification&quot;,1164,826,[19],&quot;ITIL Certification&quot;,1165,828,[19],&quot;Architecting on AWS Certification&quot;,1166,830,[19],&quot;AZ ▫▫▫ Certification&quot;,1167,832,[19,4897],1168,834,[19],&quot;SAFe Certification&quot;,1169,836,[19],&quot;CISSP Certification Training&quot;,1170,838,[19],&quot;Tableau Certification Course&quot;,1171,840,[19],&quot;Lean Six Sigma Green Belt Certification&quot;,1172,842,[19],&quot;Lean Six Sigma Black Belt Certification&quot;,1173,844,[19],&quot;Power BI Certification Course&quot;,1174,845,[19],&quot;Trending Categories&quot;,1175,846,[19],&quot;Project Management Courses&quot;,1176,848,[19],&quot;AWS Courses&quot;,1177,850,[19],&quot;Web Development Courses&quot;,1178,852,[19],&quot;Online Certifications&quot;,1179,854,[19],&quot;Generative AI Courses&quot;,1180,856,[19],&quot;Agile Certifications&quot;,1181,858,[19],&quot;Cloud Computing Courses&quot;,1182,860,[19],&quot;Cyber Security Courses&quot;,1183,862,[19],&quot;EC-Council Certifications&quot;,1184,864,[19],&quot;PeopleCert Certifications&quot;,1185,866,[19],&quot;Scrum Alliance Certifications&quot;,1186,868,[19],&quot;Scaled Agile Certifications&quot;,1187,870,[19],&quot;Google Cloud Courses&quot;,1188,872,[19],&quot;▪▪▪▫ Certifications&quot;,1189,874,[19],&quot;AXELOS Certifications&quot;,1190,876,[19],&quot;ISACA Certifications&quot;,1191,878,[19],&quot;PMI Certifications&quot;,1192,880,[19],&quot;CompTIA certifications&quot;,1193,882,[19],&quot;Microsoft Certifications&quot;,1194,883,[19],&quot;Trending Resources&quot;,1195,884,[19],&quot;Python Tutorial&quot;,1196,886,[19],&quot;JavaScript Tutorial&quot;,1197,888,[19],&quot;Java Tutorial&quot;,1198,890,[19],&quot;Angular Tutorial&quot;,1199,892,[19],&quot;Node.js Tutorial&quot;,1200,894,[19],&quot;Docker Tutorial&quot;,1201,896,[19],&quot;Git Tutorial&quot;,1202,898,[19],&quot;Kubernetes Tutorial&quot;,1203,900,[19],&quot;Power BI Tutorial&quot;,1204,902,[19],&quot;CSS Tutorial&quot;,1205,903,[19],&quot;Terms and Conditions&quot;,1206,904,[19],&quot;Privacy Policy&quot;,1207,905,[19],&quot;Refund Policy&quot;,1208,927,[2287],1209,927,1208,[860],1210,928,[376],&quot;class=new-megamenu-row&quot;,&quot;id=category-1&quot;,1211,928,1210,[376,5071],&quot;id=category-9&quot;,1212,928,1211,[376,5071],&quot;id=category-2&quot;,1213,928,1212,[376,5071],&quot;id=category-3&quot;,1214,928,1213,[376,5071],&quot;id=category-40&quot;,1215,928,1214,[376,5071],&quot;id=category-10&quot;,1216,942,[376],&quot;class=program-head&quot;,1217,942,1216,[884],1218,942,1217,[376],&quot;class=cohort-wrap&quot;,1219,943,[376,5101],1220,943,1219,[884],1221,943,1220,[376,5110],1222,944,[376,5101],1223,944,1222,[884],1224,944,1223,[376,5110],1225,945,[376,5101],1226,945,1225,[884],1227,945,1226,[376,5110],1228,946,[376,5101],1229,946,1228,[884],1230,946,1229,[376,5110],1231,947,[860],1232,947,1231,[860],1233,947,1232,[376],&quot;class=ai-process-home&quot;,1234,947,1233,[707,3682],&quot;class=btn&quot;,1235,948,[517],&quot;class=mob-banner&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-mobile2.webp&quot;,&quot;width=337&quot;,&quot;height=278&quot;,[1050],&quot;data-gmlazy=false&quot;,&quot;fetchpriority=high&quot;,1236,948,1235,[517],&quot;class=tab-banner&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-tab.webp&quot;,&quot;width=675&quot;,&quot;height=400&quot;,[1050,5180,5181],1237,948,1236,[517],&quot;class=web-banner&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-web.webp&quot;,&quot;width=1046&quot;,&quot;height=492&quot;,[1050,5180,5181],1238,949,[868],1239,949,1238,[800],1240,949,1239,[707],&quot;href=#our-programs&quot;,[5171],1241,950,[707,1171,1172],&quot;class=play-anim&quot;,&quot;style=background-image:url(https://www.simplilearn.com/ice9/assets/1410243f-aea7-497b-9bd1-737a4a6a9e34.png)&quot;,1242,951,[884],1243,951,1242,[2287],1244,951,1243,[376,5166],1245,951,1244,[707,5211,5171],1246,952,[517,5175],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_mobile.png&quot;,[5177,5178,1050,5180,5181],1247,952,1246,[517,5186],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_tablet.png&quot;,[5188,5189,1050,5180,5181],1248,952,1247,[517,5195],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_desktop.png&quot;,[5197,5198,1050,5180,5181],1249,965,[772],1250,966,[772],1251,967,[772],1252,968,[772],1253,969,[772],1254,970,[772],1255,971,[772],1256,972,[772],1257,973,[772],1258,974,[772],1259,975,[772],1260,976,[772],1261,977,[772],1262,978,[772],1263,979,[517],&quot;class=program-logo gm-lazy gm-loaded gm-observing gm-observing-cb&quot;,[1704,1705],&quot;src=https://www.simplilearn.com/ice9/accreditation_icons/PMP_HM_40px.svgz?w=200&amp;dpr=1.5&quot;,1264,980,[19],&quot;PMP® Certification Training&quot;,1265,981,[860,918],1266,981,1265,[860,918],1267,982,[19,1134],1268,982,1267,[19],&quot;▫ weeks&quot;,1269,983,[19],&quot;Cohort Starts: &quot;,1270,983,1269,[4583],1271,985,[19],&quot;Know More &quot;,1272,987,[517,5295,1704,1705],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Digital%20Business%20Homepage/IIITB_HM_40px.svgz?w=160&amp;dpr=1.5&quot;,1273,988,[19],&quot;Advanced Executive Program in Cybersecurity&quot;,1274,989,[860,918],1275,989,1274,[860,918],1276,990,[19,1134],1277,990,1276,[19],&quot;▫ months&quot;,1278,991,[19],&quot;Cohort Starts &quot;,1279,991,1278,[4583],1280,992,[19,5328],1281,994,[517,5295,1704,1705],&quot;src=https://www.simplilearn.com/ice9/new-logo-mix/Caltech_HM_40px.svgz?w=300&amp;dpr=1.5&quot;,1282,995,[19],&quot;Caltech Post Graduate Program in AI and Machine Learning&quot;,1283,996,[860,918],1284,996,1283,[860,918],1285,997,[19,1134],1286,997,1285,[19],&quot;▫▫ months&quot;,1287,998,[19,5355],1288,998,1287,[4583],1289,999,[19,5328],1290,1000,[517],&quot;class=program-logo gm-lazy gm-added&quot;,[1704,1705],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/REA_Scrum_alliance.svgz&quot;,1291,1001,[19],&quot;Certified ScrumMaster&quot;,1292,1001,1291,&quot;SUP&quot;,1293,1001,1292,[19],&quot; (CSM)&quot;,1294,1002,[860,918],1295,1002,1294,[860,918],1296,1003,[19,1134],1297,1003,1296,[19],&quot;▫ days&quot;,1298,1004,[19,5320],1299,1004,1298,[4583],1300,1006,[19,5328],1301,1008,[517,5399,1704,1705],&quot;src=https://www.simplilearn.com/ice9/new-logo-mix/IIT%20Kanpur_HM_40.svgz&quot;,1302,1009,[19],&quot;Professional Certificate Course in Generative AI and Machine Learning&quot;,1303,1010,[860,918],1304,1011,[19,1134],1305,1011,1304,[19,5385],1306,1012,[19,5355],1307,1012,1306,[4583],1308,1013,[19,5328],1309,1014,[517,5399,1704,1705],&quot;src=https://www.simplilearn.com/ice9/assets/Colored_Silver_Business_Partner_with_IBM_logo.svgz&quot;,1310,1015,[19],&quot;Data Analyst&quot;,1311,1016,[860,918],1312,1016,1311,[860,918],1313,1017,[19,1134],1314,1017,1313,[19,5385],1315,1018,[19,5355],1316,1018,1315,[4583],1317,1020,[19,5328],1318,1021,[517,5399,1704,1705],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Devops_homepage/IBM_HM_40px.svgz&quot;,1319,1022,[19],&quot;Business Analyst&quot;,1320,1023,[860,918],1321,1023,1320,[860,918],1322,1024,[19,1134],1323,1024,1322,[19,5385],1324,1025,[19,5355],1325,1025,1324,[4583],1326,1027,[19,5328],1327,1029,[517,5399,1704,1705,5443],1328,1030,[19],&quot;Professional Certificate Course in Data Analytics and Generative AI&quot;,1329,1031,[860,918],1330,1032,[19,1134],1331,1032,1330,[19,5385],1332,1033,[19,5355],1333,1033,1332,[4583],1334,1034,[19,5328],1335,1035,[517,5399,1704,1705],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Megamenu%20Logos/ITIL-Axalos-mm.svgz&quot;,1336,1036,[19],&quot;ITIL&quot;,1337,1036,1336,[5409],1338,1036,1337,[19],&quot; ▫ Foundation&quot;,1339,1037,[860,918],1340,1037,1339,[860,918],1341,1038,[19,1134],1342,1038,1341,[19,5316],1343,1039,[19,5320],1344,1039,1343,[4583],1345,1041,[19,5328],1346,1043,[517,5399,1704,1705,5443],1347,1044,[19],&quot;Professional Certificate Course in Data Science&quot;,1348,1045,[860,918],1349,1045,1348,[860,918],1350,1046,[19,1134],1351,1046,1350,[19,5385],1352,1047,[19,5355],1353,1047,1352,[4583],1354,1048,[19,5328],1355,1050,[517,5399,1704,1705],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Digital%20Business%20Homepage/SPJain_HM_40.svgz&quot;,1356,1051,[19],&quot;Professional Certification in Product Management&quot;,1357,1052,[860,918],1358,1052,1357,[860,918],1359,1053,[19,1134],1360,1053,1359,[19,5351],1361,1054,[19,5355],1362,1054,1361,[4583],1363,1055,[19,5328],1364,1056,[517,5399,1704,1705,5471],1365,1057,[19],&quot;Data Scientist&quot;,1366,1058,[860,918],1367,1058,1366,[860,918],1368,1059,[19,1134],1369,1059,1368,[19,5385],1370,1060,[19,5355],1371,1060,1370,[4583],1372,1062,[19,5328],1373,1063,[517,5399,1704,1705],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Cloud_Computing_Homepage/Azure_HM_40px.svgz&quot;,1374,1064,[19],&quot;Azure Cloud Architect Masters Program&quot;,1375,1065,[860,918],1376,1065,1375,[860,918],1377,1066,[19,1134],1378,1066,1377,[19,5385],1379,1067,[19,5355],1380,1067,1379,[4583],1381,1069,[19,5328],1382,1071,[517,5399,1704,1705],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Digital%20Business%20Homepage/IIITB_HM_40px.svgz&quot;,1383,1072,[19],&quot;Advanced Certification in UI UX Design&quot;,1384,1073,[860,918],1385,1074,[19,1134],1386,1074,1385,[19,5351],1387,1075,[19,5355],1388,1075,1387,[4583],1389,1076,[19,5328],1390,1078,[517,5399,1704,1705,5443],1391,1079,[19],&quot;Professional Certificate Program in Cybersecurity- Red Team&quot;,1392,1080,[860,918],1393,1080,1392,[860,918],1394,1081,[19,1134],1395,1081,1394,[19,5351],1396,1082,[19,5355],1397,1082,1396,[4583],1398,1083,[19,5328],1399,1086,[19,1134],1400,1086,1399,[19],&quot;▫▫▫&quot;,1401,1089,[19,1134],1402,1089,1401,[19,1288],1403,1092,[19,1134],1404,1092,1403,[19,5792],1405,1093,[707,917],&quot;class=profile&quot;,&quot;href=https://www.linkedin.com/in/sameer-marathe-itil-csm-25655537/&quot;,[710],1406,1093,1405,[376],&quot;class=info&quot;,1407,1093,1406,[860],1408,1094,[707,917,5810],&quot;href=https://www.linkedin.com/in/rajendra-prabhu-sivasamy-48557a19/&quot;,[710],1409,1094,1408,[376,5817],1410,1094,1409,[860],1411,1095,[707,917,5810],&quot;href=https://www.linkedin.com/in/sabyasachisgupta/&quot;,[710],1412,1095,1411,[376,5817],1413,1095,1412,[860],1414,1096,[707,917,5810],&quot;href=https://www.linkedin.com/in/pramod-bhargav/&quot;,[710],1415,1096,1414,[376,5817],1416,1096,1415,[860],1417,1097,[707,917,5810],&quot;href=https://www.linkedin.com/in/sreeram-narayan-49242890/&quot;,[710],1418,1097,1417,[376,5817],1419,1097,1418,[860],1420,1098,[707,917,5810],&quot;href=https://www.linkedin.com/in/satish-hiremath-b8945826/&quot;,[710],1421,1098,1420,[376,5817],1422,1098,1421,[860],1423,1208,[19,3942],1424,1209,[19],&quot;Get in-demand, industry-recognized certificates&quot;,1425,1210,[376],&quot;class=new-mega-menu-rowhead&quot;,1426,1210,1425,[376],&quot;class=new-megamenu-row-content&quot;,1427,1211,[376,5897],1428,1211,1427,[376,5902],1429,1212,[376,5897],1430,1212,1429,[376,5902],1431,1213,[376,5897],1432,1213,1431,[376,5902],1433,1214,[376,5897],1434,1214,1433,[376,5902],1435,1215,[376,5897],1436,1215,1435,[376,5902],1437,1216,[517],&quot;class=program-logo gm-added gm-lazy&quot;,&quot;src=https://www.simplilearn.com/ice9/accreditation_icons/perdue.svgz&quot;,1438,1217,[19],&quot;Applied Generative AI Specialization&quot;,1439,1218,[772],&quot;class=cohort-name&quot;,1440,1218,1439,[772],&quot;class=cohort-date&quot;,1441,1218,1440,[772],&quot;class=cohort-split&quot;,1442,1218,1441,[772],&quot;class=cohort-month&quot;,1443,1219,[517,5941,5942],1444,1220,[19],&quot;Generative AI for Business Transformation&quot;,1445,1221,[772,5950],1446,1221,1445,[772,5955],1447,1221,1446,[772,5960],1448,1221,1447,[772,5965],1449,1222,[517,5941],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Megamenu%20Logos/ICT_Guhati-mm.svgz&quot;,1450,1223,[19],&quot;Professional Certificate Program in Generative AI and Machine Learning - IITG&quot;,1451,1224,[772,5950],1452,1224,1451,[772,5955],1453,1224,1452,[772,5960],1454,1224,1453,[772,5965],1455,1225,[517,5941],&quot;src=http://simplilearn.com/ice9/accreditation_icons/IIT-K1.svgz&quot;,1456,1226,[19,5447],1457,1227,[772,5950],1458,1227,1457,[772,5955],1459,1227,1458,[772,5960],1460,1227,1459,[772,5965],1461,1228,[517,5941,5942],1462,1229,[19],&quot;Post Graduate Program in AI and Machine Learning&quot;,1463,1230,[772,5950],1464,1230,1463,[772,5955],1465,1230,1464,[772,5960],1466,1230,1465,[772,5965],1467,1231,[19],&quot;All our top programs include&quot;,1468,1232,[772],1469,1233,[772],1470,1233,1469,[860],1471,1234,[19],&quot;Explore Gen AI Programs&quot;,1472,1238,[19,1134],1473,1238,1472,[19],&quot;World’s #▫ &quot;,1474,1238,1473,[1646],1475,1238,1474,[19],&quot; Online Bootcamp&quot;,1476,1239,[971],1477,1239,1476,[971],1478,1239,1477,[971],1479,1240,[19],&quot;Explore Programs&quot;,1480,1242,[19],&quot;Transform your Career with&quot;,1481,1243,[772],1482,1244,[800],1483,1245,[19,6104],1484,1249,[19],&quot;Most Popular&quot;,1485,1250,[19,3950],1486,1251,[19,3954],1487,1252,[19,3958],1488,1253,[19,3962],1489,1254,[19,3966],1490,1255,[19,3970],1491,1256,[19,3974],1492,1257,[19,3978],1493,1258,[19,3982],1494,1259,[19,3986],1495,1260,[19,3990],1496,1261,[19,3994],1497,1262,[19,3998],1498,1265,[19,1134],1499,1265,1498,[19],&quot;▫▫ contact hours&quot;,1500,1266,[19,1134],1501,1266,1500,[19],&quot;▫ industry case studies, ▫▫ industry-based scenarios&quot;,1502,1270,[19],&quot;▫▫▪▪ Aug &apos;▫▫&quot;,1503,1274,[19,1134],1504,1274,1503,[19],&quot;Validate your learning with a Transcript from IIIT Bangalore&quot;,1505,1275,[19,1134],1506,1275,1505,[19],&quot;Attend Masterclasses from top faculty of IIIT Bangalore&quot;,1507,1279,[19],&quot;▫▫▪▪ Aug&apos; ▫▫&quot;,1508,1283,[19,1134],1509,1283,1508,[19],&quot;Earn a program completion certificate from Caltech CTME&quot;,1510,1284,[19,1134],1511,1284,1510,[19],&quot;Earn a Caltech CTME Circle Membership&quot;,1512,1288,[19,6200],1513,1292,[19],&quot;®&quot;,1514,1294,[19,1134],1515,1294,1514,[19],&quot;▫ days classroom training&quot;,1516,1295,[19,1134],1517,1295,1516,[19],&quot;▫▫ PMI PDUs &amp; Certification Offered&quot;,1518,1299,[19,6180],1519,1303,[19,1134],1520,1303,1519,[19],&quot;Program completion certificate from E&amp;ICT Academy, IIT Kanpur&quot;,1521,1307,[19],&quot;▫▪▪ Sep&apos; ▫▫&quot;,1522,1311,[19,1134],1523,1311,1522,[19],&quot;Simplilearn JobAssist Program &quot;,1524,1312,[19,1134],1525,1312,1524,[19],&quot;▫ tools &amp; Rigorous curriculum&quot;,1526,1316,[19,6180],1527,1320,[19,1134],1528,1320,1527,[19,6262],1529,1321,[19,1134],1530,1321,1529,[19],&quot;▫▫ tools &amp; Rigorous curriculum&quot;,1531,1325,[19,6180],1532,1329,[19,1134],1533,1329,1532,[19,6250],1534,1333,[19,6254],1535,1337,[19,6223],1536,1339,[19,1134],1537,1339,1536,[19],&quot;▫▫ PDUs for self-paced learning&quot;,1538,1340,[19,1134],1539,1340,1538,[19],&quot;▫▫ PDUs for online classroom flexi pass offered&quot;,1540,1344,[19,6180],1541,1348,[19,1134],1542,1348,1541,[19],&quot;Learn about ChatGPT, DALL-E ▫, Midjourney &amp; other key tools&quot;,1543,1349,[19,1134],1544,1349,1543,[19],&quot;Capstone projects in ▫ domains&quot;,1545,1353,[19,6200],1546,1357,[19,1134],1547,1357,1546,[19],&quot;Certificate from SP Jain School of Global Management&quot;,1548,1358,[19,1134],1549,1358,1548,[19],&quot;Live sessions by SP Jain top global faculties&quot;,1550,1362,[19,6200],1551,1366,[19,1134],1552,1366,1551,[19,6262],1553,1367,[19,1134],1554,1367,1553,[19,6288],1555,1371,[19,6180],1556,1375,[19,1134],1557,1375,1556,[19,6262],1558,1376,[19,1134],1559,1376,1558,[19,6270],1560,1380,[19,6180],1561,1384,[19,1134],1562,1384,1561,[19],&quot;Attend masterclasses from top IIIT Bangalore Faculty&quot;,1563,1388,[19,6200],1564,1392,[19,1134],1565,1392,1564,[19],&quot;Attend Masterclasses from IIT Kanpur faculty&quot;,1566,1393,[19,1134],1567,1393,1566,[19],&quot;Seamless access to integrated labs on Simplilearn’s LMS&quot;,1568,1397,[19,6200],1569,1405,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/reviews_images/_1567657440.jpeg&quot;,[1051],1570,1406,[2287],1571,1406,1570,[772],1572,1407,[19,1134],1573,1407,1572,[19],&quot;The certification took me from a Project Manager to a Senior Position with a good hike. All credit to the informative and easy-to-understand online study material!&quot;,1574,1407,1573,[19,1134],1575,1408,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/testimonial_images/127357.jpeg&quot;,[1051],1576,1409,[2287],1577,1409,1576,[772],1578,1410,[19,1134],1579,1410,1578,[19],&quot;Simplilearn&apos;s Certified Scrum Master course helped me rise in my career from Principle Software Engineer to Senior Manager. Thank you.&quot;,1580,1410,1579,[19,1134],1581,1411,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/review_images/sabyasachi-gupta.jpeg&quot;,[1051],1582,1412,[2287],1583,1412,1582,[772],1584,1413,[19,1134],1585,1413,1584,[19],&quot;The course increased my practical knowledge in Agile methodology and helped me get promoted to a Project Manager in the short span of ▫.▫ months.&quot;,1586,1413,1585,[19,1134],1587,1414,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/reviews_images/_1562746916.jpeg&quot;,[1051],1588,1415,[2287],1589,1415,1588,[772],1590,1416,[19,1134],1591,1416,1590,[19],&quot;The trainer was entirely professional, knowledgeable, and helpful while clearing any doubts. Learning from Simplilearn was worth the money and time spent.&quot;,1592,1416,1591,[19,1134],1593,1417,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/review_images/sreeram-narayan.jpeg&quot;,[1051],1594,1418,[2287],1595,1418,1594,[772],1596,1419,[19,1134],1597,1419,1596,[19],&quot;Thanks to the knowledgable &amp; approachable trainers of Simplilearn, the course helped me get promoted to Data Analyst from Quality Analyst with a ▫▫% hike in salary!&quot;,1598,1419,1597,[19,1134],1599,1420,[517,1704,1705,1706],&quot;data-src=https://www.simplilearn.com/ice9/reviews_images/96321_1509954180.jpg&quot;,[1051],1600,1421,[2287],1601,1421,1600,[772],1602,1422,[19,1134],1603,1422,1602,[19],&quot; Simplilearn&apos;s Big Data Architect course has helped me advance from Senior Software Engineer to Senior Java Hadoop Developer with a ▫▫% hike in salary.&quot;,1604,1422,1603,[19,1134],1605,1425,[2200],1606,1425,1605,[707],&quot;href=/project-management/&quot;,1607,1426,[707,1516],&quot;class=new-menu-tagcard&quot;,1608,1426,1607,[707],&quot;href=/project-management/prince2-foundation-and-practitioner-certification-training&quot;,[6581],1609,1426,1608,[707],&quot;href=/prince2-agile-certification-training-course&quot;,[6581],1610,1427,[2200],1611,1427,1610,[707],&quot;href=/agile-and-scrum/&quot;,1612,1428,[707,1535,6581],1613,1428,1612,[707],&quot;href=/agile-and-scrum/safe-agilist-certification-training&quot;,[6581],1614,1428,1613,[707],&quot;href=/agile-and-scrum/cspo-certification-training&quot;,[6581],1615,1429,[2200],1616,1429,1615,[707],&quot;href=/it-service-management/&quot;,1617,1430,[707,1566,6581],1618,1430,1617,[707],&quot;href=/it-service-management/togaf-certification-program-training&quot;,[6581],1619,1430,1618,[707],&quot;href=/itil-strategist-certification-training-course&quot;,[6581],1620,1431,[2200],1621,1431,1620,[707],&quot;href=/cyber-security/&quot;,1622,1432,[707],&quot;href=/cyber-security/cissp-certification-training&quot;,[6581],1623,1432,1622,[707],&quot;href=/cyber-security/cisa-certification-training&quot;,[6581],1624,1432,1623,[707],&quot;href=/cyber-security/ceh-certification&quot;,[6581],1625,1433,[2200],1626,1433,1625,[707],&quot;href=/data-science-and-business-analytics/&quot;,1627,1434,[707],&quot;href=/power-bi-certification-training-course&quot;,[6581],1628,1434,1627,[707],&quot;href=/sql&quot;,[6581],1629,1434,1628,[707],&quot;href=/azure-data-engineering-certification-course&quot;,[6581],1630,1435,[2200],1631,1435,1630,[707],&quot;href=/cloud-computing/&quot;,1632,1436,[707],&quot;href=/cloud-computing/aws-solution-architect-associate-training&quot;,[6581],1633,1436,1632,[707],&quot;href=/google-cloud-associate-cloud-engineer-certification&quot;,[6581],1634,1436,1633,[707],&quot;href=/google-cloud-architect-certification-training-course&quot;,[6581],1635,1439,[19],&quot;Cohort starts : &quot;,1636,1440,[19],&quot;▫ Sep, ▫▫▫▫&quot;,1637,1441,[19],&quot;|&quot;,1638,1442,[19],&quot;▫▫ weeks&quot;,1639,1445,[19,6718],1640,1446,[19],&quot;▫▫ Aug, ▫▫▫▫&quot;,1641,1447,[19,6726],1642,1448,[19,6730],1643,1451,[19,6718],1644,1452,[19,6722],1645,1453,[19,6726],1646,1454,[19,5385],1647,1457,[19,6718],1648,1458,[19,6722],1649,1459,[19,6726],1650,1460,[19,5385],1651,1463,[19,6718],1652,1464,[19,6737],1653,1465,[19,6726],1654,1466,[19,5385],1655,1468,[19],&quot;Generative AI Components&quot;,1656,1469,[19],&quot;Be a leader in your field&quot;,1657,1470,[19],&quot;Change, Adapt and Build with AI&quot;,1658,1476,[4583],1659,1476,1658,[19],&quot; careers advanced&quot;,1660,1477,[4583],1661,1477,1660,[19],&quot; live classes every month&quot;,1662,1478,[4583],1663,1478,1662,[19],&quot; report career benefits including promotion or a new job&quot;,1664,1481,[19],&quot;▫▫▫+ In-demand Industry-Recognized Certifications&quot;,1665,1482,[971],1666,1482,1665,[971],1667,1570,[19],&quot;Sameer Marathe&quot;,1668,1571,[19,1134],1669,1571,1668,[19],&quot;Project Manager&quot;,1670,1571,1669,[19],&quot;, &quot;,1671,1571,1670,[4583],1672,1576,[19],&quot;Rajendra Prabhu Sivasamy&quot;,1673,1577,[19,1134],1674,1577,1673,[19],&quot;Principal Software Engineer &quot;,1675,1577,1674,[19,6843],1676,1577,1675,[4583],1677,1582,[19],&quot;Sabyasachi Gupta&quot;,1678,1583,[19,1134],1679,1583,1678,[19],&quot;Project Manager &quot;,1680,1583,1679,[19,6843],1681,1583,1680,[4583],1682,1588,[19],&quot;Pramod Bhargav&quot;,1683,1589,[19,1134],1684,1589,1683,[19],&quot;Sr. Business Data Analyst and Lead&quot;,1685,1589,1684,[19,6843],1686,1589,1685,[4583],1687,1594,[19],&quot;Sreeram Narayan&quot;,1688,1595,[19,1134],1689,1595,1688,[19],&quot;Data Analyst &quot;,1690,1595,1689,[19,6843],1691,1595,1690,[4583],1692,1600,[19],&quot;Satish Hiremath&quot;,1693,1601,[19,1134],1694,1601,1693,[19],&quot;Senior Consultant &quot;,1695,1601,1694,[19,6843],1696,1601,1695,[4583],1697,1605,[19,3962],1698,1606,[19,2965],1699,1607,[376,4050],1700,1608,[376,4050],1701,1609,[376,4050],1702,1610,[19,3970],1703,1611,[19,2965],1704,1612,[376,4050],1705,1613,[376,4050],1706,1614,[376,4050],1707,1615,[19,3990],1708,1616,[19,2965],1709,1617,[376,4050],1710,1618,[376,4050],1711,1619,[376,4050],1712,1620,[19,3966],1713,1621,[19,2965],1714,1622,[376,4050],1715,1623,[376,4050],1716,1624,[376,4050],1717,1625,[19,3958],1718,1626,[19,2965],1719,1627,[376,4050],1720,1628,[376,4050],1721,1629,[376,4050],1722,1630,[19,3974],1723,1631,[19,2965],1724,1632,[376,4050],1725,1633,[376,4050],1726,1634,[376,4050],1727,1658,[19],&quot;▫,▫▫▫,▫▫▫&quot;,1728,1660,[19],&quot;▫,▫▫▫&quot;,1729,1662,[19],&quot;▫▫%&quot;,1730,1665,[517],&quot;src=https://www.simplilearn.com/ice9/assets/banner-3-success-icon.svgz&quot;,[1051],1731,1665,1730,[19,1134],1732,1665,1731,[772],1733,1666,[517],&quot;src=https://www.simplilearn.com/ice9/assets/banner-3-group-icon.svgz&quot;,[1051],1734,1666,1733,[19,1134],1735,1666,1734,[772],1736,1671,[19],&quot;Atos&quot;,1737,1676,[19],&quot;TESCO&quot;,1738,1681,[19],&quot;aQb Solutions Pvt Ltd&quot;,1739,1686,[19],&quot;Apple Inc.(TCS)&quot;,1740,1691,[19],&quot;Hewlett Packard Enterprise&quot;,1741,1696,[19],&quot;Capgemini&quot;,1742,1699,[376,5101],1743,1699,1742,[2200],1744,1699,1743,[376],&quot;class=pg-card-bottom&quot;,1745,1700,[376,5101],1746,1700,1745,[2200],1747,1700,1746,[376,7111],1748,1701,[376,5101],1749,1701,1748,[2200],1750,1701,1749,[376,7111],1751,1704,[376,5101],1752,1704,1751,[2200],1753,1704,1752,[376,7111],1754,1705,[376,5101],1755,1705,1754,[2200],1756,1705,1755,[376,7111],1757,1706,[376,5101],1758,1706,1757,[2200],1759,1706,1758,[376,7111],1760,1709,[376,5101],1761,1709,1760,[2200],1762,1709,1761,[376,7111],1763,1710,[376,5101],1764,1710,1763,[2200],1765,1710,1764,[376,7111],1766,1711,[376,5101],1767,1711,1766,[2200],1768,1711,1767,[376,7111],1769,1714,[376,5101],1770,1714,1769,[2200],1771,1714,1770,[376,7111],1772,1715,[376,5101],1773,1715,1772,[2200],1774,1715,1773,[376,7111],1775,1716,[376,5101],1776,1716,1775,[2200],1777,1716,1776,[376,7111],1778,1719,[376,5101],1779,1719,1778,[2200],1780,1719,1779,[376,7111],1781,1720,[376,5101],1782,1720,1781,[2200],1783,1720,1782,[376,7111],1784,1721,[376,5101],1785,1721,1784,[2200],1786,1721,1785,[376,7111],1787,1724,[376,5101],1788,1724,1787,[2200],1789,1724,1788,[376,7111],1790,1725,[376,5101],1791,1725,1790,[2200],1792,1725,1791,[376,7111],1793,1726,[376,5101],1794,1726,1793,[2200],1795,1726,1794,[376,7111],1796,1732,[19],&quot; ▫▪▪+ Successful Learners&quot;,1797,1735,[19],&quot;  ▫▫▫▫+ Guaranteed to run sessions every month&quot;,1798,1742,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Megamenu%20Logos/PMI.svgz?w=300&amp;dpr=1.5&quot;,&quot;class=gm-lazy gm-added gm-loaded gm-observing gm-observing-cb&quot;,1799,1743,[19,5301],1800,1744,&quot;H5&quot;,1801,1744,1800,[376],&quot;class=popular-wrapper-main&quot;,1802,1745,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Megamenu%20Logos/Prince2.svgz?w=300&amp;dpr=1.5&quot;,[7311],1803,1746,[19],&quot;▪▪▪▪▪▪▫&quot;,1804,1746,1803,[5409],1805,1746,1804,[19],&quot; Foundation and Practitioner&quot;,1806,1747,[7317],1807,1747,1806,[19],1808,1748,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_icons/Megamenu%20logos/Prince2_Agile_MM_32px.svgz?w=300&amp;dpr=1.5&quot;,[7311],1809,1749,[19,7331],1810,1749,1809,[5409],1811,1749,1810,[19],&quot; Agile Foundation and Practitioner&quot;,1812,1750,[7317],1813,1750,1812,[19],1814,1751,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/CSM_32Px.svgz?w=300&amp;dpr=1.5&quot;,[7311],1815,1752,[19,5405],1816,1752,1815,[5409],1817,1752,1816,[19,5414],1818,1753,[7317],1819,1753,1818,[376,7322],1820,1754,[517],&quot;src=https://www.simplilearn.com/ice9/LOGO%20/Scaled_Agile_with_Text_Silver_CP_48px.svgz?w=300&amp;dpr=1.5&quot;,[7311],1821,1755,[19],&quot;Leading SAFe ® ▫ training with SAFe Agilist Certification&quot;,1822,1756,[7317],1823,1756,1822,[19],1824,1757,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/CSPO_32Px.svgz?w=300&amp;dpr=1.5&quot;,[7311],1825,1758,[19],&quot;Certified Scrum Product Owner&quot;,1826,1758,1825,[5409],1827,1758,1826,[19],&quot; (CSPO)&quot;,1828,1759,[7317],1829,1759,1828,[19],1830,1760,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Megamenu%20Logos/ITIL-Axalos-mm.svgz?w=300&amp;dpr=1.5&quot;,[7311],1831,1761,[19,5566],1832,1761,1831,[5409],1833,1761,1832,[19,5575],1834,1762,[7317],1835,1762,1834,[376,7322],1836,1763,[517],&quot;src=https://www.simplilearn.com/ice9/Togaf/TogafMegamenu.svgz?w=300&amp;dpr=1.5&quot;,[7311],1837,1764,[19],&quot;TOGAF® Enterprise Architecture Training Course&quot;,1838,1765,[7317],1839,1765,1838,[19],1840,1766,[517,7439,7311],1841,1767,[19],&quot;ITIL® ▫ Strategist: Direct, Plan, and Improve&quot;,1842,1768,[7317],1843,1768,1842,[19],1844,1769,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Megamenu%20Logos/CISSP-mm.svgz&quot;,&quot;class=gm-lazy gm-added&quot;,1845,1770,[19],&quot;CISSP&quot;,1846,1770,1845,[5409],1847,1770,1846,[19],&quot;- Certified Information Systems Security Professional&quot;,1848,1771,[7317],1849,1771,1848,[19],1850,1772,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_icons/megamenu/ISACA.svgz&quot;,[7493],1851,1773,[19],&quot;CISA&quot;,1852,1773,1851,[5409],1853,1773,1852,[19],&quot;- Certified Information Systems Auditor&quot;,1854,1774,[7317],1855,1774,1854,[19],1856,1775,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_icons/megamenu/EC%20Council.svgz&quot;,[7493],1857,1776,[19],&quot;CEH (▪▫▫)- Certified Ethical Hacker&quot;,1858,1777,[7317],1859,1777,1858,[19],1860,1778,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Megamenu%20Logos/Power_Bi.svgz&quot;,[7493],1861,1779,[19],&quot;▪▪-▫▫▫ Microsoft Power BI Certification Training&quot;,1862,1780,[7317],1863,1780,1862,[376,7322],1864,1781,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/My%20SQL_32px.svgz&quot;,[7493],1865,1782,[19],&quot;SQL Certification Course&quot;,1866,1783,[7317],1867,1783,1866,[19],1868,1784,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Megamenu%20Logos/Microsoft-Azure-mm.svgz&quot;,[7493],1869,1785,[19],&quot;Microsoft Certified Azure Data Engineer Associate: DP ▫▫▫&quot;,1870,1786,[7317],1871,1786,1870,[19],1872,1787,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Megamenu%20Logos/AWS-mm.svgz&quot;,[7493],1873,1788,[19],&quot;AWS Solutions Architect&quot;,1874,1789,[7317],1875,1789,1874,[376,7322],1876,1790,[517],&quot;src=https://www.simplilearn.com/ice9/accreditation_images/Megamenu%20Logos/Google_Cloud-mm.svgz&quot;,[7493],1877,1791,[19],&quot;Google Associate Cloud Engineer Certification&quot;,1878,1792,[7317],1879,1792,1878,[376,7322],1880,1793,[517,7622,7493],1881,1794,[19],&quot;Google Professional Cloud Architect Certification&quot;,1882,1795,[7317],1883,1795,1882,[376,7322],1884,1800,[19,5316],1885,1801,[376],&quot;class=popular-wrap btn-anim mostPopularTag&quot;,1886,1804,[19,6223],1887,1806,[19,5316],1888,1810,[19,6223],1889,1812,[19,5316],1890,1816,[19,6223],1891,1818,[19,5429],1892,1819,[376],&quot;class=popular-wrap btn-anim trendingNowTag&quot;,1893,1822,[19,5429],1894,1826,[19,6223],1895,1828,[19,5429],1896,1832,[19,6223],1897,1834,[19,5316],1898,1835,[376,7655],1899,1838,[19,5316],1900,1842,[19,5316],1901,1846,[19,6223],1902,1848,[19,5351],1903,1852,[19,6223],1904,1854,[19,5351],1905,1858,[19,5351],1906,1862,[19,5351],1907,1863,[376,7677],1908,1866,[19,5351],1909,1870,[19,5351],1910,1874,[19,5351],1911,1875,[376,7655],1912,1878,[19,5316],1913,1879,[376],&quot;class=popular-wrap btn-anim newLaunchTag&quot;,1914,1882,[19,5316],1915,1883,[376,7741],1916,1885,[772],1917,1892,[772],1918,1898,[772],1919,1907,[772],1920,1911,[772],1921,1913,[772],1922,1915,[772],1923,1916,[19,6121],1924,1917,[19],&quot;Trending Now&quot;,1925,1918,[19,6121],1926,1919,[19,7775],1927,1920,[19,6121],1928,1921,[19],&quot;New Launch&quot;,1929,1922,[19,7788]],[3919,6,113,107,&quot;IMG&quot;,&quot;style=width: 0px; height: 0px; display: none; visibility: hidden;&quot;,&quot;id=batBeacon824667933341&quot;,&quot;width=0&quot;,&quot;height=0&quot;,&quot;src=https://bat.bing.com/action/0?ti=4002550&amp;Ver=2&amp;mid=a67bb0b3-7669-4a05-85c3-aa8d5dbf0100&amp;sid=1f5684705d7411efab59ebca8046ca7b&amp;vid=1f56ae505d7411ef92d96d6b06bdce59&amp;vids=0&amp;msclkid=N&amp;pi=918639831&amp;lg=en-US&amp;sw=1280&amp;sh=720&amp;sc=24&amp;tl=Simplilearn%20%7C%20Online%20Courses%20-%20Bootcamp%20%26%20Certification%20Platform&amp;p=https%3A%2F%2Fwww.simplilearn.com%2F&amp;r=&amp;lt=1124&amp;evt=pageLoad&amp;sv=1&amp;cdb=AQAQ&amp;rn=597746&quot;,&quot;class=gm-added gm-lazy&quot;],[6940,6,244,188,&quot;SPAN&quot;,&quot;class=c_arrow c_prev hide-btn&quot;,1930,243,333,&quot;LI&quot;,&quot;id=ey-banner-li&quot;,&quot;class=ai-banner&quot;,&quot;style=width: 1280px;&quot;,1931,1930,&quot;DIV&quot;,&quot;class=main-banner&quot;,1932,1931,[15],&quot;class=container&quot;,1933,1932,[15],&quot;class=ai-left-info&quot;,1934,1932,1933,[15],&quot;class=ai-right-img&quot;,1935,1933,&quot;P&quot;,1936,1933,1935,[32],1937,1933,1936,[15],&quot;class=ai-process-home&quot;,1938,1933,1937,&quot;A&quot;,&quot;href=https://www.simplilearn.com/certifications/generative-ai-courses&quot;,&quot;class=btn&quot;,1939,1934,&quot;IMG&quot;,&quot;class=mob-banner&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-mobile2.webp&quot;,&quot;width=337&quot;,&quot;height=278&quot;,&quot;data-gumlet=false&quot;,&quot;data-gmlazy=false&quot;,&quot;fetchpriority=high&quot;,1940,1934,1939,[50],&quot;class=tab-banner&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-tab.webp&quot;,&quot;width=675&quot;,&quot;height=400&quot;,[55,56,57],1941,1934,1940,[50],&quot;class=web-banner&quot;,&quot;src=https://www.simplilearn.com/ice9/assets/banner-right-web.webp&quot;,&quot;width=1046&quot;,&quot;height=492&quot;,[55,56,57],1942,1935,&quot;*T&quot;,&quot;All our top programs include&quot;,1943,1936,[4],1944,1937,[4],1945,1937,1944,[32],1946,1938,[78],&quot;Explore Gen AI Programs&quot;,1947,1943,[78],&quot;Generative AI Components&quot;,1948,1944,[78],&quot;Be a leader in your field&quot;,1949,1945,[78],&quot;Change, Adapt and Build with AI&quot;,1950,243,1930,[9],&quot;class=home-bootcamp&quot;,&quot;id=home-banner-li&quot;,[12],1951,1950,[15],&quot;class=banner&quot;,[12],1952,1951,[15,20],1953,1952,[15],&quot;class=left-clm&quot;,1954,1952,1953,[15],&quot;class=right-clm&quot;,1955,1953,&quot;H1&quot;,1956,1953,1955,&quot;UL&quot;,1957,1953,1956,[45],&quot;href=#our-programs&quot;,[47],1958,1954,[45],&quot;href=&quot;,&quot;rel=noopener&quot;,&quot;class=play-anim&quot;,&quot;style=background-image:url(https://www.simplilearn.com/ice9/assets/1410243f-aea7-497b-9bd1-737a4a6a9e34.png)&quot;,1959,1955,[78],&quot; &quot;,1960,1955,1959,[78],&quot;World’s #▫ &quot;,1961,1955,1960,&quot;BR&quot;,1962,1955,1961,[78],&quot; Online Bootcamp&quot;,1963,1956,[9],1964,1956,1963,[9],1965,1956,1964,[9],1966,1957,[78],&quot;Explore Programs&quot;,1967,1963,&quot;B&quot;,1968,1963,1967,[78],&quot; careers advanced&quot;,1969,1964,[185],1970,1964,1969,[78],&quot; live classes every month&quot;,1971,1965,[185],1972,1965,1971,[78],&quot; report career benefits including promotion or a new job&quot;,1973,1967,[78],&quot;▫,▫▫▫,▫▫▫&quot;,1974,1969,[78],&quot;▫,▫▫▫&quot;,1975,1971,[78],&quot;▫▫%&quot;,1976,243,1950,[9],&quot;id=certification-banner-li&quot;,&quot;class=certification-banner ai-banner&quot;,&quot;style=background:linear-gradient(99deg, #0092D1 1.55%, #000 26.98%, #000506 29.29%, #00080B 64.42%, #0092D1 102.02%);&quot;,1977,1976,[15,16],1978,1977,[15,20],1979,1978,[15,24],1980,1978,1979,[15,29],1981,1979,&quot;H2&quot;,1982,1979,1981,&quot;H3&quot;,1983,1979,1982,[15,41],1984,1979,1983,[45,141,47],1985,1980,[50,51],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_mobile.png&quot;,[53,54,55,56,57],1986,1980,1985,[50,62],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_tablet.png&quot;,[64,65,55,56,57],1987,1980,1986,[50,71],&quot;src=https://www.simplilearn.com/ice9/assets/banner_third_desktop.png&quot;,[73,74,55,56,57],1988,1981,[78],&quot;Transform your Career with&quot;,1989,1982,[4],1990,1983,[136],1991,1984,[78,182],1992,1989,[78],&quot;▫▫▫+ In-demand Industry-Recognized Certifications&quot;,1993,1990,[9],1994,1990,1993,[9],1995,1993,[50],&quot;src=https://www.simplilearn.com/ice9/assets/banner-3-success-icon.svgz&quot;,&quot;class=gm-lazy&quot;,1996,1993,1995,[78,153],1997,1993,1996,[4],1998,1994,[50],&quot;src=https://www.simplilearn.com/ice9/assets/banner-3-group-icon.svgz&quot;,[299],1999,1994,1998,[78,153],2000,1994,1999,[4],2001,1997,[78],&quot; ▫▪▪+ Successful Learners&quot;,2002,2000,[78],&quot;  ▫▫▫▫+ Guaranteed to run sessions every month&quot;,243,187,[136],&quot;class=c_list&quot;,&quot;style=position: relative; transform: translate3d(-3840px, 0px, 0px); width: 6000px; transition: 0.4s;&quot;,245,188,244,[4],&quot;class=c_arrow c_next&quot;]]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-317" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:36:03 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:35:59 GMT&quot;,&quot;timeSpent&quot;:&quot;4086&quot;,&quot;totalTimeSpent&quot;:&quot;13956&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-318" enabled="true">
            <stringProp name="HTTPSampler.domain">u.clarity.ms</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/collect</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="�&#x8;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xa;�T[o�0&#x14;� ��6�&#x10;_�@*&#x1e;�4U�IӞ&#x10;�&#x8;�`�۰&#x13;�N��;6I�H}�Z!َ�������$�d���&#x1f;P�9�&#x13;!p@�&#x8;�*���&#x1;" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">�&#x8;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;
�T[o�0&#x14;� ��6�&#x10;_�@*&#x1e;�4U�IӞ&#x10;�&#x8;�`�۰&#x13;�N��;6I�H}�Z!َ�������$�d���&#x1f;P�9�&#x13;!p@�&#x8;�*���&#x1;</stringProp>
                  <stringProp name="Argument.value">�&#x1d;&#x88;�f�F��Ձ=&#x1d;&#x10;f�`�cT&#x0;BF�&#x8;	l��&#x4;9�&#x16;$8CYLp&#x14;EtY�qd/�G$���(&apos;&#x1;�&#x16; ��
&#x10;��]Jq&#x8;&#x13;&#xb;q�Y�����,&#x17;X��&#x10;&#x12;�iJb�X.J�&#x0;�&#x1c;t�N�; 0M�=&#xc;&#x1;F�&#x7fe;���-�N�a�튾�Ӫ�d&#x5;��T��1�ެ��&lt;�Zuc�ZYL�_&#xe;�Z�2Y�ui�z��M�n�&#x7;pp�����Rͪ2M�y&#x4;�F�&#x13;)�b�Q&#x15;���}�J�&gt;&#x16;�����-^���Gi�f��0)sL&#x1b;@@`&#x2;j�8O&#x19;��d�&#x14;�j&#x6;�n��(�o$ &#x4;�&#xc;jj��[U��
�]�&#x2;��T&#x5;p��(	ĕ��]�ʗ�D.&#x0;Ih&#x7;~&#xe;�&#x1b;&#x14;pO��Rj�r�}}�_.I&#x2;o����&#x8;d�&#x1d;��&#x1a;o⫧a?^�e��:�V�2�W���QS�]��}�q9�������&#x1c;��&#x0;&#x1c;軱�J�i&#x2;}&#xb;3&#x17;e�Pga�#�|&#x12;VI�d��F�ki�H�qv&#xd;&#xe;&#x1a;$�&#x18;=�C��&#xc;g&lt;����Ao�`&#x0;�z�d�ܶJ&#x1b; �&#x1c;[���VF&#xd;�f5ɶ0� �Vf*z�8L�fY¾��&apos;2&gt;��y�|�r&quot;7 &#x1;&#x1f;��|g�c`�r���/߯8w�&#x16;�~JҶ&#x19;:��{ �����POEw�疝��[UA�U_��Y&#x6;�&#x18;2*�7b�UQZ�6	��&#x10;��&#x7f;�&#x1;ώ�</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/x-clarity-gzip</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/-320" enabled="true">
            <stringProp name="HTTPSampler.domain">ssbk4-uk.gsecondscreen.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">websocket</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade" elementType="Header">
                  <stringProp name="Header.name">Upgrade</stringProp>
                  <stringProp name="Header.value">websocket</stringProp>
                </elementProp>
                <elementProp name="Sec-WebSocket-Extensions" elementType="Header">
                  <stringProp name="Header.name">Sec-WebSocket-Extensions</stringProp>
                  <stringProp name="Header.value">permessage-deflate</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Sec-WebSocket-Version" elementType="Header">
                  <stringProp name="Header.name">Sec-WebSocket-Version</stringProp>
                  <stringProp name="Header.value">13</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-WebSocket-Key" elementType="Header">
                  <stringProp name="Header.name">Sec-WebSocket-Key</stringProp>
                  <stringProp name="Header.value">O/H26RS25NKUVTAAXn4QWQ==</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-321" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:36:06 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:36:03 GMT&quot;,&quot;timeSpent&quot;:&quot;3034&quot;,&quot;totalTimeSpent&quot;:&quot;16990&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/collect-319" enabled="true">
            <stringProp name="HTTPSampler.domain">u.clarity.ms</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/collect</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.41&quot;,4,13043,1133,&quot;d7w7q41v8m&quot;,&quot;1bw6kip&quot;,&quot;1sdv2kv&quot;,2,1,1],&quot;a&quot;:[[13043,4,0,1280,7771,1280,587,0,0,0,0,11026,0],[14176,0,2,675,3,1,4,2,5,1,25,4],[14176,36,6,[14067,0]],[14176,35,6]],&quot;p&quot;:[[14067,6,244,188,&quot;SPAN&quot;,&quot;class=c_arrow c_prev&quot;,243,187,&quot;UL&quot;,&quot;class=c_list&quot;,&quot;style=position: relative; transform: translate3d(-1280px, 0px, 0px); width: 6000px; transition: 0.3s;&quot;,336,246,[4],&quot;class=c_bullet_mobile_home-university-program-banner_0&quot;,&quot;data-slider-index=0&quot;,337,246,336,[4],&quot;class=c_bullet_mobile_home-university-program-banner_1 active_tab&quot;,&quot;data-slider-index=1&quot;]]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-322" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:36:08 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:36:06 GMT&quot;,&quot;timeSpent&quot;:&quot;2042&quot;,&quot;totalTimeSpent&quot;:&quot;19032&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-323" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:36:10 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:36:08 GMT&quot;,&quot;timeSpent&quot;:&quot;2023&quot;,&quot;totalTimeSpent&quot;:&quot;21055&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-324" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:36:11 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:36:10 GMT&quot;,&quot;timeSpent&quot;:&quot;1003&quot;,&quot;totalTimeSpent&quot;:&quot;22058&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-325" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:36:12 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:36:11 GMT&quot;,&quot;timeSpent&quot;:&quot;1010&quot;,&quot;totalTimeSpent&quot;:&quot;23068&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-326" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:36:13 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:36:12 GMT&quot;,&quot;timeSpent&quot;:&quot;1010&quot;,&quot;totalTimeSpent&quot;:&quot;24078&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-327" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:36:16 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:36:13 GMT&quot;,&quot;timeSpent&quot;:&quot;3030&quot;,&quot;totalTimeSpent&quot;:&quot;27108&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-328" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:36:19 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:36:16 GMT&quot;,&quot;timeSpent&quot;:&quot;3038&quot;,&quot;totalTimeSpent&quot;:&quot;30146&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-329" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:36:22 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:36:19 GMT&quot;,&quot;timeSpent&quot;:&quot;3008&quot;,&quot;totalTimeSpent&quot;:&quot;33154&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/v1/beacon/img.gif-330" enabled="true">
            <stringProp name="HTTPSampler.domain">b.6sc.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/v1/beacon/img.gif</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">bb02d357a7626bfb5ed6ca1d35efd712</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="svisitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">svisitor</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="visitor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">visitor</stringProp>
                  <stringProp name="Argument.value">e7e17e82-1678-46fe-8dee-0d2c22ccfdab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">c28174d1-449c-467d-8ef9-18551d1c2459</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="event" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">event</stringProp>
                  <stringProp name="Argument.value">passive_time_track</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">{&quot;currentTime&quot;:&quot;Sun, 18 Aug 2024 15:36:25 GMT&quot;,&quot;lastTrackTime&quot;:&quot;Sun, 18 Aug 2024 15:36:22 GMT&quot;,&quot;timeSpent&quot;:&quot;3026&quot;,&quot;totalTimeSpent&quot;:&quot;36180&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isIframe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isIframe</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="m" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">m</stringProp>
                  <stringProp name="Argument.value">{&quot;description&quot;:&quot;Simplilearn is the popular online Bootcamp &amp; online courses learning platform that offers the industry&apos;s best PGPs, Master&apos;s, and Live Training. Start upskilling!&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;title&quot;:&quot;Simplilearn | Online Courses - Bootcamp &amp;amp; Certification Platform&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">r</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="thirdParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">thirdParty</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v2</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pageURL</stringProp>
                  <stringProp name="Argument.value">https://www.simplilearn.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageViewId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageViewId</stringProp>
                  <stringProp name="Argument.value">6adda18b-297b-4c80-835d-090e58a9b88c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="webTagId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">webTagId</stringProp>
                  <stringProp name="Argument.value">aba49154-3ac6-4297-839c-2d581677fb46</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.1.23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.simplilearn.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=6, i</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list"/>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.default_encoding"></stringProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
      </ProxyControl>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
